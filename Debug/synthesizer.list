
synthesizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08006890  08006890  00016890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be8  08006be8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bf0  08006bf0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf0  08006bf0  00016bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  20000078  08006c70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  08006c70  00020bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baf7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c45  00000000  00000000  0002bb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  0002d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212bc  00000000  00000000  0002edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008eeb  00000000  00000000  0005008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9794  00000000  00000000  00058f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012270b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  00122788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006874 	.word	0x08006874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006874 	.word	0x08006874

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b972 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	4688      	mov	r8, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14b      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	d967      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0720 	rsb	r7, r2, #32
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c32:	4095      	lsls	r5, r2
 8000c34:	ea47 0803 	orr.w	r8, r7, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c44:	fa1f fc85 	uxth.w	ip, r5
 8000c48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c50:	fb07 f10c 	mul.w	r1, r7, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5e:	f080 811b 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8118 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c68:	3f02      	subs	r7, #2
 8000c6a:	442b      	add	r3, r5
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c94:	3802      	subs	r0, #2
 8000c96:	442c      	add	r4, r5
 8000c98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cac:	4639      	mov	r1, r7
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xbe>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80eb 	beq.w	8000e92 <__udivmoddi4+0x286>
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f783 	clz	r7, r3
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	d147      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd0>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000cea:	e9c6 4800 	strd	r4, r8, [r6]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa0>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xe8>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 808f 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfe:	1b49      	subs	r1, r1, r5
 8000d00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d04:	fa1f f885 	uxth.w	r8, r5
 8000d08:	2701      	movs	r7, #1
 8000d0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb08 f10c 	mul.w	r1, r8, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d20:	18eb      	adds	r3, r5, r3
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1a59      	subs	r1, r3, r1
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x14c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80b6 	bhi.w	8000ec2 <__udivmoddi4+0x2b6>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e79f      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d62:	f1c7 0c20 	rsb	ip, r7, #32
 8000d66:	40bb      	lsls	r3, r7
 8000d68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d70:	fa01 f407 	lsl.w	r4, r1, r7
 8000d74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d80:	4325      	orrs	r5, r4
 8000d82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	fb08 3319 	mls	r3, r8, r9, r3
 8000d8c:	fa1f fa8e 	uxth.w	sl, lr
 8000d90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d94:	fb09 f40a 	mul.w	r4, r9, sl
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1e 0303 	adds.w	r3, lr, r3
 8000da8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dac:	f080 8087 	bcs.w	8000ebe <__udivmoddi4+0x2b2>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f240 8084 	bls.w	8000ebe <__udivmoddi4+0x2b2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4473      	add	r3, lr
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	b2ad      	uxth	r5, r5
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd0:	45a2      	cmp	sl, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	d26b      	bcs.n	8000eb6 <__udivmoddi4+0x2aa>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d969      	bls.n	8000eb6 <__udivmoddi4+0x2aa>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4474      	add	r4, lr
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	fba0 8902 	umull	r8, r9, r0, r2
 8000dee:	eba4 040a 	sub.w	r4, r4, sl
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c2      	mov	sl, r8
 8000df6:	464b      	mov	r3, r9
 8000df8:	d354      	bcc.n	8000ea4 <__udivmoddi4+0x298>
 8000dfa:	d051      	beq.n	8000ea0 <__udivmoddi4+0x294>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d069      	beq.n	8000ed4 <__udivmoddi4+0x2c8>
 8000e00:	ebb1 050a 	subs.w	r5, r1, sl
 8000e04:	eb64 0403 	sbc.w	r4, r4, r3
 8000e08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	40fc      	lsrs	r4, r7
 8000e10:	ea4c 0505 	orr.w	r5, ip, r5
 8000e14:	e9c6 5400 	strd	r5, r4, [r6]
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f703 	lsr.w	r7, r0, r3
 8000e24:	4095      	lsls	r5, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e32:	4338      	orrs	r0, r7
 8000e34:	0c01      	lsrs	r1, r0, #16
 8000e36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3a:	fa1f f885 	uxth.w	r8, r5
 8000e3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb07 f308 	mul.w	r3, r7, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x256>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e58:	d22f      	bcs.n	8000eba <__udivmoddi4+0x2ae>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d92d      	bls.n	8000eba <__udivmoddi4+0x2ae>
 8000e5e:	3f02      	subs	r7, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	b281      	uxth	r1, r0
 8000e66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb00 f308 	mul.w	r3, r0, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x27e>
 8000e7a:	1869      	adds	r1, r5, r1
 8000e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e80:	d217      	bcs.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d915      	bls.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4429      	add	r1, r5
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xfe>
 8000e92:	4637      	mov	r7, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e709      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e98:	4607      	mov	r7, r0
 8000e9a:	e6e7      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000ea0:	4541      	cmp	r1, r8
 8000ea2:	d2ab      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eac:	3801      	subs	r0, #1
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e7a4      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb2:	4660      	mov	r0, ip
 8000eb4:	e7e9      	b.n	8000e8a <__udivmoddi4+0x27e>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	e795      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000eba:	4667      	mov	r7, ip
 8000ebc:	e7d1      	b.n	8000e62 <__udivmoddi4+0x256>
 8000ebe:	4681      	mov	r9, r0
 8000ec0:	e77c      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	442c      	add	r4, r5
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0x14c>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	442b      	add	r3, r5
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xda>
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0xa0>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <setNote>:
#include <string.h>

void setNote(char* note, TIM_HandleTypeDef* htim){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
   HAL_TIM_Base_Stop_IT(htim);
 8000ee6:	6838      	ldr	r0, [r7, #0]
 8000ee8:	f003 fc8d 	bl	8004806 <HAL_TIM_Base_Stop_IT>
   __HAL_TIM_SET_COUNTER(htim, 0);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
   HAL_TIM_Base_Start_IT(htim);
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f003 fc62 	bl	80047be <HAL_TIM_Base_Start_IT>
   if(strcmp(note, "pp ") == 0){
 8000efa:	49a3      	ldr	r1, [pc, #652]	; (8001188 <setNote+0x2ac>)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff f967 	bl	80001d0 <strcmp>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d108      	bne.n	8000f1a <setNote+0x3e>
          htim->Instance->PSC = 13;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	220d      	movs	r2, #13
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 59999;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C2 ") == 0){
 8000f1a:	499c      	ldr	r1, [pc, #624]	; (800118c <setNote+0x2b0>)
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff f957 	bl	80001d0 <strcmp>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d108      	bne.n	8000f3a <setNote+0x5e>
          htim->Instance->PSC = 6460;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f641 123c 	movw	r2, #6460	; 0x193c
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2201      	movs	r2, #1
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS2") == 0){
 8000f3a:	4995      	ldr	r1, [pc, #596]	; (8001190 <setNote+0x2b4>)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff f947 	bl	80001d0 <strcmp>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d108      	bne.n	8000f5a <setNote+0x7e>
          htim->Instance->PSC = 1738;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f240 62ca 	movw	r2, #1738	; 0x6ca
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 6;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2206      	movs	r2, #6
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D2 ") == 0){
 8000f5a:	498e      	ldr	r1, [pc, #568]	; (8001194 <setNote+0x2b8>)
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff f937 	bl	80001d0 <strcmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d108      	bne.n	8000f7a <setNote+0x9e>
          htim->Instance->PSC = 10;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1045;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f240 4215 	movw	r2, #1045	; 0x415
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS2") == 0){
 8000f7a:	4987      	ldr	r1, [pc, #540]	; (8001198 <setNote+0x2bc>)
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff f927 	bl	80001d0 <strcmp>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d108      	bne.n	8000f9a <setNote+0xbe>
          htim->Instance->PSC = 10;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 978;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f240 32d2 	movw	r2, #978	; 0x3d2
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E2 ") == 0){
 8000f9a:	4980      	ldr	r1, [pc, #512]	; (800119c <setNote+0x2c0>)
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff f917 	bl	80001d0 <strcmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d108      	bne.n	8000fba <setNote+0xde>
          htim->Instance->PSC = 568;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f44f 720e 	mov.w	r2, #568	; 0x238
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 17;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2211      	movs	r2, #17
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F2 ") == 0){
 8000fba:	4979      	ldr	r1, [pc, #484]	; (80011a0 <setNote+0x2c4>)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff f907 	bl	80001d0 <strcmp>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d108      	bne.n	8000fda <setNote+0xfe>
          htim->Instance->PSC = 1930;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f240 728a 	movw	r2, #1930	; 0x78a
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS2") == 0){
 8000fda:	4972      	ldr	r1, [pc, #456]	; (80011a4 <setNote+0x2c8>)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f8f7 	bl	80001d0 <strcmp>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <setNote+0x11c>
          htim->Instance->PSC = 54;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2236      	movs	r2, #54	; 0x36
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 165;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	22a5      	movs	r2, #165	; 0xa5
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G2 ") == 0){
 8000ff8:	496b      	ldr	r1, [pc, #428]	; (80011a8 <setNote+0x2cc>)
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f8e8 	bl	80001d0 <strcmp>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d108      	bne.n	8001018 <setNote+0x13c>
          htim->Instance->PSC = 2856;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f640 3228 	movw	r2, #2856	; 0xb28
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS2") == 0){
 8001018:	4964      	ldr	r1, [pc, #400]	; (80011ac <setNote+0x2d0>)
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff f8d8 	bl	80001d0 <strcmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d108      	bne.n	8001038 <setNote+0x15c>
          htim->Instance->PSC = 672;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 11;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	220b      	movs	r2, #11
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A2 ") == 0){
 8001038:	495d      	ldr	r1, [pc, #372]	; (80011b0 <setNote+0x2d4>)
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff f8c8 	bl	80001d0 <strcmp>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d108      	bne.n	8001058 <setNote+0x17c>
          htim->Instance->PSC = 22;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2216      	movs	r2, #22
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 331;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f240 124b 	movw	r2, #331	; 0x14b
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS2") == 0){
 8001058:	4956      	ldr	r1, [pc, #344]	; (80011b4 <setNote+0x2d8>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff f8b8 	bl	80001d0 <strcmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d108      	bne.n	8001078 <setNote+0x19c>
          htim->Instance->PSC = 2392;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f640 1258 	movw	r2, #2392	; 0x958
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2202      	movs	r2, #2
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B2 ") == 0){
 8001078:	494f      	ldr	r1, [pc, #316]	; (80011b8 <setNote+0x2dc>)
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff f8a8 	bl	80001d0 <strcmp>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d108      	bne.n	8001098 <setNote+0x1bc>
          htim->Instance->PSC = 568;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f44f 720e 	mov.w	r2, #568	; 0x238
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 11;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	220b      	movs	r2, #11
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C3 ") == 0){
 8001098:	4948      	ldr	r1, [pc, #288]	; (80011bc <setNote+0x2e0>)
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff f898 	bl	80001d0 <strcmp>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <setNote+0x1dc>
          htim->Instance->PSC = 1602;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f240 6242 	movw	r2, #1602	; 0x642
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2203      	movs	r2, #3
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS3") == 0){
 80010b8:	4941      	ldr	r1, [pc, #260]	; (80011c0 <setNote+0x2e4>)
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff f888 	bl	80001d0 <strcmp>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <setNote+0x1fc>
          htim->Instance->PSC = 3020;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f640 32cc 	movw	r2, #3020	; 0xbcc
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D3 ") == 0){
 80010d8:	493a      	ldr	r1, [pc, #232]	; (80011c4 <setNote+0x2e8>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f878 	bl	80001d0 <strcmp>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d108      	bne.n	80010f8 <setNote+0x21c>
          htim->Instance->PSC = 2856;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f640 3228 	movw	r2, #2856	; 0xb28
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS3") == 0){
 80010f8:	4933      	ldr	r1, [pc, #204]	; (80011c8 <setNote+0x2ec>)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff f868 	bl	80001d0 <strcmp>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <setNote+0x23c>
          htim->Instance->PSC = 672;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 7;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2207      	movs	r2, #7
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E3 ") == 0){
 8001118:	492c      	ldr	r1, [pc, #176]	; (80011cc <setNote+0x2f0>)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff f858 	bl	80001d0 <strcmp>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d108      	bne.n	8001138 <setNote+0x25c>
          htim->Instance->PSC = 2544;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2201      	movs	r2, #1
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F3 ") == 0){
 8001138:	4925      	ldr	r1, [pc, #148]	; (80011d0 <setNote+0x2f4>)
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff f848 	bl	80001d0 <strcmp>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d108      	bne.n	8001158 <setNote+0x27c>
          htim->Instance->PSC = 0;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4799;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS3") == 0){
 8001158:	491e      	ldr	r1, [pc, #120]	; (80011d4 <setNote+0x2f8>)
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff f838 	bl	80001d0 <strcmp>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d108      	bne.n	8001178 <setNote+0x29c>
          htim->Instance->PSC = 1134;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f240 426e 	movw	r2, #1134	; 0x46e
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2203      	movs	r2, #3
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G3 ") == 0){
 8001178:	4917      	ldr	r1, [pc, #92]	; (80011d8 <setNote+0x2fc>)
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	e02a      	b.n	80011dc <setNote+0x300>
 8001186:	bf00      	nop
 8001188:	08006890 	.word	0x08006890
 800118c:	08006894 	.word	0x08006894
 8001190:	08006898 	.word	0x08006898
 8001194:	0800689c 	.word	0x0800689c
 8001198:	080068a0 	.word	0x080068a0
 800119c:	080068a4 	.word	0x080068a4
 80011a0:	080068a8 	.word	0x080068a8
 80011a4:	080068ac 	.word	0x080068ac
 80011a8:	080068b0 	.word	0x080068b0
 80011ac:	080068b4 	.word	0x080068b4
 80011b0:	080068b8 	.word	0x080068b8
 80011b4:	080068bc 	.word	0x080068bc
 80011b8:	080068c0 	.word	0x080068c0
 80011bc:	080068c4 	.word	0x080068c4
 80011c0:	080068c8 	.word	0x080068c8
 80011c4:	080068cc 	.word	0x080068cc
 80011c8:	080068d0 	.word	0x080068d0
 80011cc:	080068d4 	.word	0x080068d4
 80011d0:	080068d8 	.word	0x080068d8
 80011d4:	080068dc 	.word	0x080068dc
 80011d8:	080068e0 	.word	0x080068e0
 80011dc:	d108      	bne.n	80011f0 <setNote+0x314>
          htim->Instance->PSC = 856;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f44f 7256 	mov.w	r2, #856	; 0x358
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2204      	movs	r2, #4
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS3") == 0){
 80011f0:	499f      	ldr	r1, [pc, #636]	; (8001470 <setNote+0x594>)
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7fe ffec 	bl	80001d0 <strcmp>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d108      	bne.n	8001210 <setNote+0x334>
          htim->Instance->PSC = 672;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 5;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2205      	movs	r2, #5
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A3 ") == 0){
 8001210:	4998      	ldr	r1, [pc, #608]	; (8001474 <setNote+0x598>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7fe ffdc 	bl	80001d0 <strcmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d107      	bne.n	800122e <setNote+0x352>
          htim->Instance->PSC = 22;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2216      	movs	r2, #22
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 165;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	22a5      	movs	r2, #165	; 0xa5
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS3") == 0){
 800122e:	4992      	ldr	r1, [pc, #584]	; (8001478 <setNote+0x59c>)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe ffcd 	bl	80001d0 <strcmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d108      	bne.n	800124e <setNote+0x372>
          htim->Instance->PSC = 720;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2204      	movs	r2, #4
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B3 ") == 0){
 800124e:	498b      	ldr	r1, [pc, #556]	; (800147c <setNote+0x5a0>)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7fe ffbd 	bl	80001d0 <strcmp>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <setNote+0x392>
          htim->Instance->PSC = 424;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 7;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2207      	movs	r2, #7
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C4 ") == 0){
 800126e:	4984      	ldr	r1, [pc, #528]	; (8001480 <setNote+0x5a4>)
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7fe ffad 	bl	80001d0 <strcmp>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d108      	bne.n	800128e <setNote+0x3b2>
          htim->Instance->PSC = 1602;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f240 6242 	movw	r2, #1602	; 0x642
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS4") == 0){
 800128e:	497d      	ldr	r1, [pc, #500]	; (8001484 <setNote+0x5a8>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7fe ff9d 	bl	80001d0 <strcmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <setNote+0x3d2>
          htim->Instance->PSC = 378;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 7;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2207      	movs	r2, #7
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D4 ") == 0){
 80012ae:	4976      	ldr	r1, [pc, #472]	; (8001488 <setNote+0x5ac>)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7fe ff8d 	bl	80001d0 <strcmp>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d107      	bne.n	80012cc <setNote+0x3f0>
          htim->Instance->PSC = 118;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2276      	movs	r2, #118	; 0x76
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 23;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2217      	movs	r2, #23
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS4") == 0){
 80012cc:	496f      	ldr	r1, [pc, #444]	; (800148c <setNote+0x5b0>)
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7fe ff7e 	bl	80001d0 <strcmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d107      	bne.n	80012ea <setNote+0x40e>
          htim->Instance->PSC = 44;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	222c      	movs	r2, #44	; 0x2c
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 59;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	223b      	movs	r2, #59	; 0x3b
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E4 ") == 0){
 80012ea:	4969      	ldr	r1, [pc, #420]	; (8001490 <setNote+0x5b4>)
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7fe ff6f 	bl	80001d0 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <setNote+0x42e>
          htim->Instance->PSC = 508;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2204      	movs	r2, #4
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F4 ") == 0){
 800130a:	4962      	ldr	r1, [pc, #392]	; (8001494 <setNote+0x5b8>)
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7fe ff5f 	bl	80001d0 <strcmp>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d108      	bne.n	800132a <setNote+0x44e>
          htim->Instance->PSC = 1202;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f240 42b2 	movw	r2, #1202	; 0x4b2
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2201      	movs	r2, #1
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS4") == 0){
 800132a:	495b      	ldr	r1, [pc, #364]	; (8001498 <setNote+0x5bc>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7fe ff4f 	bl	80001d0 <strcmp>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d108      	bne.n	800134a <setNote+0x46e>
          htim->Instance->PSC = 1134;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f240 426e 	movw	r2, #1134	; 0x46e
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2201      	movs	r2, #1
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G4 ") == 0){
 800134a:	4954      	ldr	r1, [pc, #336]	; (800149c <setNote+0x5c0>)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7fe ff3f 	bl	80001d0 <strcmp>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <setNote+0x48c>
          htim->Instance->PSC = 62;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	223e      	movs	r2, #62	; 0x3e
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 33;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2221      	movs	r2, #33	; 0x21
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS4") == 0){
 8001368:	494d      	ldr	r1, [pc, #308]	; (80014a0 <setNote+0x5c4>)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7fe ff30 	bl	80001d0 <strcmp>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d107      	bne.n	8001386 <setNote+0x4aa>
          htim->Instance->PSC = 22;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2216      	movs	r2, #22
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 87;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2257      	movs	r2, #87	; 0x57
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A4 ") == 0){
 8001386:	4947      	ldr	r1, [pc, #284]	; (80014a4 <setNote+0x5c8>)
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7fe ff21 	bl	80001d0 <strcmp>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d107      	bne.n	80013a4 <setNote+0x4c8>
          htim->Instance->PSC = 22;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2216      	movs	r2, #22
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 82;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2252      	movs	r2, #82	; 0x52
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS4") == 0){
 80013a4:	4940      	ldr	r1, [pc, #256]	; (80014a8 <setNote+0x5cc>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7fe ff12 	bl	80001d0 <strcmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d107      	bne.n	80013c2 <setNote+0x4e6>
          htim->Instance->PSC = 52;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2234      	movs	r2, #52	; 0x34
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 33;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2221      	movs	r2, #33	; 0x21
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B4 ") == 0){
 80013c2:	493a      	ldr	r1, [pc, #232]	; (80014ac <setNote+0x5d0>)
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7fe ff03 	bl	80001d0 <strcmp>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d108      	bne.n	80013e2 <setNote+0x506>
          htim->Instance->PSC = 424;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2203      	movs	r2, #3
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C5 ") == 0){
 80013e2:	4933      	ldr	r1, [pc, #204]	; (80014b0 <setNote+0x5d4>)
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7fe fef3 	bl	80001d0 <strcmp>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d108      	bne.n	8001402 <setNote+0x526>
          htim->Instance->PSC = 802;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f240 3222 	movw	r2, #802	; 0x322
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS5") == 0){
 8001402:	492c      	ldr	r1, [pc, #176]	; (80014b4 <setNote+0x5d8>)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7fe fee3 	bl	80001d0 <strcmp>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d108      	bne.n	8001422 <setNote+0x546>
          htim->Instance->PSC = 378;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2203      	movs	r2, #3
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D5 ") == 0){
 8001422:	4925      	ldr	r1, [pc, #148]	; (80014b8 <setNote+0x5dc>)
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7fe fed3 	bl	80001d0 <strcmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d108      	bne.n	8001442 <setNote+0x566>
          htim->Instance->PSC = 476;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2202      	movs	r2, #2
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS5") == 0){
 8001442:	491e      	ldr	r1, [pc, #120]	; (80014bc <setNote+0x5e0>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7fe fec3 	bl	80001d0 <strcmp>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <setNote+0x584>
          htim->Instance->PSC = 44;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	222c      	movs	r2, #44	; 0x2c
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 29;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	221d      	movs	r2, #29
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E5 ") == 0){
 8001460:	4917      	ldr	r1, [pc, #92]	; (80014c0 <setNote+0x5e4>)
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7fe feb4 	bl	80001d0 <strcmp>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d132      	bne.n	80014d4 <setNote+0x5f8>
 800146e:	e029      	b.n	80014c4 <setNote+0x5e8>
 8001470:	080068e4 	.word	0x080068e4
 8001474:	080068e8 	.word	0x080068e8
 8001478:	080068ec 	.word	0x080068ec
 800147c:	080068f0 	.word	0x080068f0
 8001480:	080068f4 	.word	0x080068f4
 8001484:	080068f8 	.word	0x080068f8
 8001488:	080068fc 	.word	0x080068fc
 800148c:	08006900 	.word	0x08006900
 8001490:	08006904 	.word	0x08006904
 8001494:	08006908 	.word	0x08006908
 8001498:	0800690c 	.word	0x0800690c
 800149c:	08006910 	.word	0x08006910
 80014a0:	08006914 	.word	0x08006914
 80014a4:	08006918 	.word	0x08006918
 80014a8:	0800691c 	.word	0x0800691c
 80014ac:	08006920 	.word	0x08006920
 80014b0:	08006924 	.word	0x08006924
 80014b4:	08006928 	.word	0x08006928
 80014b8:	0800692c 	.word	0x0800692c
 80014bc:	08006930 	.word	0x08006930
 80014c0:	08006934 	.word	0x08006934
          htim->Instance->PSC = 12;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	220c      	movs	r2, #12
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 97;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2261      	movs	r2, #97	; 0x61
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F5 ") == 0){
 80014d4:	499a      	ldr	r1, [pc, #616]	; (8001740 <setNote+0x864>)
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7fe fe7a 	bl	80001d0 <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d108      	bne.n	80014f4 <setNote+0x618>
          htim->Instance->PSC = 400;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2202      	movs	r2, #2
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS5") == 0){
 80014f4:	4993      	ldr	r1, [pc, #588]	; (8001744 <setNote+0x868>)
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7fe fe6a 	bl	80001d0 <strcmp>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d107      	bne.n	8001512 <setNote+0x636>
          htim->Instance->PSC = 226;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	22e2      	movs	r2, #226	; 0xe2
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2204      	movs	r2, #4
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G5 ") == 0){
 8001512:	498d      	ldr	r1, [pc, #564]	; (8001748 <setNote+0x86c>)
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7fe fe5b 	bl	80001d0 <strcmp>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d107      	bne.n	8001530 <setNote+0x654>
          htim->Instance->PSC = 62;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	223e      	movs	r2, #62	; 0x3e
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 16;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2210      	movs	r2, #16
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS5") == 0){
 8001530:	4986      	ldr	r1, [pc, #536]	; (800174c <setNote+0x870>)
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe fe4c 	bl	80001d0 <strcmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d107      	bne.n	800154e <setNote+0x672>
          htim->Instance->PSC = 100;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2264      	movs	r2, #100	; 0x64
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 9;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2209      	movs	r2, #9
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A5 ") == 0){
 800154e:	4980      	ldr	r1, [pc, #512]	; (8001750 <setNote+0x874>)
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe fe3d 	bl	80001d0 <strcmp>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <setNote+0x692>
          htim->Instance->PSC = 476;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS5") == 0){
 800156e:	4979      	ldr	r1, [pc, #484]	; (8001754 <setNote+0x878>)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7fe fe2d 	bl	80001d0 <strcmp>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <setNote+0x6b0>
          htim->Instance->PSC = 52;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2234      	movs	r2, #52	; 0x34
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 16;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2210      	movs	r2, #16
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B5 ") == 0){
 800158c:	4972      	ldr	r1, [pc, #456]	; (8001758 <setNote+0x87c>)
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7fe fe1e 	bl	80001d0 <strcmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d108      	bne.n	80015ac <setNote+0x6d0>
          htim->Instance->PSC = 424;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C6 ") == 0){
 80015ac:	496b      	ldr	r1, [pc, #428]	; (800175c <setNote+0x880>)
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe fe0e 	bl	80001d0 <strcmp>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <setNote+0x6f0>
          htim->Instance->PSC = 400;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2201      	movs	r2, #1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS6") == 0){
 80015cc:	4964      	ldr	r1, [pc, #400]	; (8001760 <setNote+0x884>)
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fdfe 	bl	80001d0 <strcmp>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d107      	bne.n	80015ea <setNote+0x70e>
          htim->Instance->PSC = 26;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	221a      	movs	r2, #26
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 27;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	221b      	movs	r2, #27
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D6 ") == 0){
 80015ea:	495e      	ldr	r1, [pc, #376]	; (8001764 <setNote+0x888>)
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe fdef 	bl	80001d0 <strcmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <setNote+0x72c>
          htim->Instance->PSC = 16;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2210      	movs	r2, #16
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 41;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2229      	movs	r2, #41	; 0x29
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS6") == 0){
 8001608:	4957      	ldr	r1, [pc, #348]	; (8001768 <setNote+0x88c>)
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7fe fde0 	bl	80001d0 <strcmp>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d108      	bne.n	8001628 <setNote+0x74c>
          htim->Instance->PSC = 336;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2201      	movs	r2, #1
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E6 ") == 0){
 8001628:	4950      	ldr	r1, [pc, #320]	; (800176c <setNote+0x890>)
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7fe fdd0 	bl	80001d0 <strcmp>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d107      	bne.n	8001646 <setNote+0x76a>
          htim->Instance->PSC = 12;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	220c      	movs	r2, #12
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 48;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F6 ") == 0){
 8001646:	494a      	ldr	r1, [pc, #296]	; (8001770 <setNote+0x894>)
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7fe fdc1 	bl	80001d0 <strcmp>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <setNote+0x788>
          htim->Instance->PSC = 12;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	220c      	movs	r2, #12
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 45;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	222d      	movs	r2, #45	; 0x2d
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS6") == 0){
 8001664:	4943      	ldr	r1, [pc, #268]	; (8001774 <setNote+0x898>)
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7fe fdb2 	bl	80001d0 <strcmp>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <setNote+0x7a6>
          htim->Instance->PSC = 188;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	22bc      	movs	r2, #188	; 0xbc
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2202      	movs	r2, #2
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G6 ") == 0){
 8001682:	493d      	ldr	r1, [pc, #244]	; (8001778 <setNote+0x89c>)
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7fe fda3 	bl	80001d0 <strcmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <setNote+0x7c4>
          htim->Instance->PSC = 106;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	226a      	movs	r2, #106	; 0x6a
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2204      	movs	r2, #4
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS6") == 0){
 80016a0:	4936      	ldr	r1, [pc, #216]	; (800177c <setNote+0x8a0>)
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe fd94 	bl	80001d0 <strcmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d107      	bne.n	80016be <setNote+0x7e2>
          htim->Instance->PSC = 100;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2204      	movs	r2, #4
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A6 ") == 0){
 80016be:	4930      	ldr	r1, [pc, #192]	; (8001780 <setNote+0x8a4>)
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe fd85 	bl	80001d0 <strcmp>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <setNote+0x800>
          htim->Instance->PSC = 52;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2234      	movs	r2, #52	; 0x34
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 8;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2208      	movs	r2, #8
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS6") == 0){
 80016dc:	4929      	ldr	r1, [pc, #164]	; (8001784 <setNote+0x8a8>)
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7fe fd76 	bl	80001d0 <strcmp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <setNote+0x81e>
          htim->Instance->PSC = 224;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	22e0      	movs	r2, #224	; 0xe0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B6 ") == 0){
 80016fa:	4923      	ldr	r1, [pc, #140]	; (8001788 <setNote+0x8ac>)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7fe fd67 	bl	80001d0 <strcmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <setNote+0x83c>
          htim->Instance->PSC = 16;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2210      	movs	r2, #16
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 24;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2218      	movs	r2, #24
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C7 ") == 0){
 8001718:	491c      	ldr	r1, [pc, #112]	; (800178c <setNote+0x8b0>)
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe fd58 	bl	80001d0 <strcmp>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <setNote+0x85a>
          htim->Instance->PSC = 18;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2212      	movs	r2, #18
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 20;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2214      	movs	r2, #20
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
      }
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08006938 	.word	0x08006938
 8001744:	0800693c 	.word	0x0800693c
 8001748:	08006940 	.word	0x08006940
 800174c:	08006944 	.word	0x08006944
 8001750:	08006948 	.word	0x08006948
 8001754:	0800694c 	.word	0x0800694c
 8001758:	08006950 	.word	0x08006950
 800175c:	08006954 	.word	0x08006954
 8001760:	08006958 	.word	0x08006958
 8001764:	0800695c 	.word	0x0800695c
 8001768:	08006960 	.word	0x08006960
 800176c:	08006964 	.word	0x08006964
 8001770:	08006968 	.word	0x08006968
 8001774:	0800696c 	.word	0x0800696c
 8001778:	08006970 	.word	0x08006970
 800177c:	08006974 	.word	0x08006974
 8001780:	08006978 	.word	0x08006978
 8001784:	0800697c 	.word	0x0800697c
 8001788:	08006980 	.word	0x08006980
 800178c:	08006984 	.word	0x08006984

08001790 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
//		setNote(sequence[sequence_iterator], &htim7);
//		sequence_iterator++;
//		if(sequence_iterator == 8) sequence_iterator = 0;
	}
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <map>:

uint32_t sine_val[SAMPLING_RATE];
uint32_t saw_val[SAMPLING_RATE];
uint32_t quad_val[SAMPLING_RATE];

float map(float v, float is, float ie, float os, float oe){
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80017ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80017b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80017b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80017ba:	ed87 2a01 	vstr	s4, [r7, #4]
	return os + (oe - os) * ((v - is)/(ie - is));
 80017be:	ed97 7a01 	vldr	s14, [r7, #4]
 80017c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80017ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80017d6:	edd7 6a03 	vldr	s13, [r7, #12]
 80017da:	edd7 7a04 	vldr	s15, [r7, #16]
 80017de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <get_sineval>:

void get_sineval(){
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	for(int i = 0; i < SAMPLING_RATE; i++){
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	e035      	b.n	8001878 <get_sineval+0x78>
		sine_val[i] = ((sin(i*2*PI/SAMPLING_RATE) + 1)*(4096/2));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001888 <get_sineval+0x88>
 800181c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001820:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800188c <get_sineval+0x8c>
 8001824:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001828:	ee16 0a90 	vmov	r0, s13
 800182c:	f7fe fe9c 	bl	8000568 <__aeabi_f2d>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	ec44 3b10 	vmov	d0, r3, r4
 8001838:	f004 f80a 	bl	8005850 <sin>
 800183c:	ec51 0b10 	vmov	r0, r1, d0
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <get_sineval+0x90>)
 8001846:	f7fe fd31 	bl	80002ac <__adddf3>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	4618      	mov	r0, r3
 8001850:	4621      	mov	r1, r4
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <get_sineval+0x94>)
 8001858:	f7fe fede 	bl	8000618 <__aeabi_dmul>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	4618      	mov	r0, r3
 8001862:	4621      	mov	r1, r4
 8001864:	f7ff f99a 	bl	8000b9c <__aeabi_d2uiz>
 8001868:	4601      	mov	r1, r0
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <get_sineval+0x98>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SAMPLING_RATE; i++){
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2bc7      	cmp	r3, #199	; 0xc7
 800187c:	ddc6      	ble.n	800180c <get_sineval+0xc>
	}
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	bf00      	nop
 8001888:	40490ff9 	.word	0x40490ff9
 800188c:	43480000 	.word	0x43480000
 8001890:	3ff00000 	.word	0x3ff00000
 8001894:	40a00000 	.word	0x40a00000
 8001898:	200000e4 	.word	0x200000e4

0800189c <get_sawval>:

void get_sawval(){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < SAMPLING_RATE; i++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	e021      	b.n	80018ec <get_sawval+0x50>
		saw_val[i] = map(i, 0, 100, 0, 2)*(4096/2);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b2:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 80018b6:	eddf 1a11 	vldr	s3, [pc, #68]	; 80018fc <get_sawval+0x60>
 80018ba:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8001900 <get_sawval+0x64>
 80018be:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80018fc <get_sawval+0x60>
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	f7ff ff6d 	bl	80017a4 <map>
 80018ca:	eeb0 7a40 	vmov.f32	s14, s0
 80018ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001904 <get_sawval+0x68>
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018da:	ee17 1a90 	vmov	r1, s15
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <get_sawval+0x6c>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SAMPLING_RATE; i++){
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2bc7      	cmp	r3, #199	; 0xc7
 80018f0:	ddda      	ble.n	80018a8 <get_sawval+0xc>
	}
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	00000000 	.word	0x00000000
 8001900:	42c80000 	.word	0x42c80000
 8001904:	45000000 	.word	0x45000000
 8001908:	200007dc 	.word	0x200007dc

0800190c <get_quadval>:

void get_quadval(){
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
	for(int i = 0; i < 50; i++){
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	e008      	b.n	800192a <get_quadval+0x1e>
		quad_val[i] = 4095;
 8001918:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <get_quadval+0x4c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001920:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 50; i++){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3301      	adds	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b31      	cmp	r3, #49	; 0x31
 800192e:	ddf3      	ble.n	8001918 <get_quadval+0xc>
	}
	for(int i = 50; i < 100; i++){
 8001930:	2332      	movs	r3, #50	; 0x32
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	e007      	b.n	8001946 <get_quadval+0x3a>
		quad_val[i] = 0;
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <get_quadval+0x4c>)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2100      	movs	r1, #0
 800193c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 50; i < 100; i++){
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b63      	cmp	r3, #99	; 0x63
 800194a:	ddf4      	ble.n	8001936 <get_quadval+0x2a>
	}
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	20000478 	.word	0x20000478

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	next_octave = octave + 1;
 8001962:	4bc5      	ldr	r3, [pc, #788]	; (8001c78 <main+0x31c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4ac4      	ldr	r2, [pc, #784]	; (8001c7c <main+0x320>)
 800196a:	6013      	str	r3, [r2, #0]
	sprintf(octave_str, "%d", octave);
 800196c:	4bc2      	ldr	r3, [pc, #776]	; (8001c78 <main+0x31c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	49c3      	ldr	r1, [pc, #780]	; (8001c80 <main+0x324>)
 8001974:	48c3      	ldr	r0, [pc, #780]	; (8001c84 <main+0x328>)
 8001976:	f003 fb55 	bl	8005024 <siprintf>
	sprintf(next_octave_str, "%d", next_octave);
 800197a:	4bc0      	ldr	r3, [pc, #768]	; (8001c7c <main+0x320>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	49bf      	ldr	r1, [pc, #764]	; (8001c80 <main+0x324>)
 8001982:	48c1      	ldr	r0, [pc, #772]	; (8001c88 <main+0x32c>)
 8001984:	f003 fb4e 	bl	8005024 <siprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001988:	f001 f8f2 	bl	8002b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198c:	f000 fca4 	bl	80022d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001990:	f000 fe20 	bl	80025d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001994:	f000 fdf6 	bl	8002584 <MX_DMA_Init>
  MX_DAC_Init();
 8001998:	f000 fd08 	bl	80023ac <MX_DAC_Init>
  MX_TIM6_Init();
 800199c:	f000 fd8a 	bl	80024b4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80019a0:	f000 fdbc 	bl	800251c <MX_TIM7_Init>
  MX_TIM4_Init();
 80019a4:	f000 fd38 	bl	8002418 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80019a8:	48b8      	ldr	r0, [pc, #736]	; (8001c8c <main+0x330>)
 80019aa:	f002 ff08 	bl	80047be <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80019ae:	48b8      	ldr	r0, [pc, #736]	; (8001c90 <main+0x334>)
 80019b0:	f002 ff05 	bl	80047be <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80019b4:	48b7      	ldr	r0, [pc, #732]	; (8001c94 <main+0x338>)
 80019b6:	f002 ff02 	bl	80047be <HAL_TIM_Base_Start_IT>
  get_sineval();
 80019ba:	f7ff ff21 	bl	8001800 <get_sineval>
  get_sawval();
 80019be:	f7ff ff6d 	bl	800189c <get_sawval>
  get_quadval();
 80019c2:	f7ff ffa3 	bl	800190c <get_quadval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, saw_val, SAMPLING_RATE, DAC_ALIGN_12B_R);
 80019c6:	2300      	movs	r3, #0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	23c8      	movs	r3, #200	; 0xc8
 80019cc:	4ab2      	ldr	r2, [pc, #712]	; (8001c98 <main+0x33c>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	48b2      	ldr	r0, [pc, #712]	; (8001c9c <main+0x340>)
 80019d2:	f001 fa95 	bl	8002f00 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, quad_val, SAMPLING_RATE, DAC_ALIGN_12B_R);
 80019d6:	2300      	movs	r3, #0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	23c8      	movs	r3, #200	; 0xc8
 80019dc:	4ab0      	ldr	r2, [pc, #704]	; (8001ca0 <main+0x344>)
 80019de:	2110      	movs	r1, #16
 80019e0:	48ae      	ldr	r0, [pc, #696]	; (8001c9c <main+0x340>)
 80019e2:	f001 fa8d 	bl	8002f00 <HAL_DAC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	48ae      	ldr	r0, [pc, #696]	; (8001ca4 <main+0x348>)
 80019ec:	f002 fa5a 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f6:	48ab      	ldr	r0, [pc, #684]	; (8001ca4 <main+0x348>)
 80019f8:	f002 fa54 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a02:	48a8      	ldr	r0, [pc, #672]	; (8001ca4 <main+0x348>)
 8001a04:	f002 fa4e 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0e:	48a5      	ldr	r0, [pc, #660]	; (8001ca4 <main+0x348>)
 8001a10:	f002 fa48 	bl	8003ea4 <HAL_GPIO_WritePin>
	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))){
 8001a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a18:	48a3      	ldr	r0, [pc, #652]	; (8001ca8 <main+0x34c>)
 8001a1a:	f002 fa2b 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d135      	bne.n	8001a90 <main+0x134>
		HAL_Delay(delay);
 8001a24:	4ba1      	ldr	r3, [pc, #644]	; (8001cac <main+0x350>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 f913 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_11)));
 8001a2e:	bf00      	nop
 8001a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a34:	489c      	ldr	r0, [pc, #624]	; (8001ca8 <main+0x34c>)
 8001a36:	f002 fa1d 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f7      	beq.n	8001a30 <main+0xd4>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a44:	489a      	ldr	r0, [pc, #616]	; (8001cb0 <main+0x354>)
 8001a46:	f002 fa46 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001a4a:	4b9a      	ldr	r3, [pc, #616]	; (8001cb4 <main+0x358>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "C");
 8001a50:	4898      	ldr	r0, [pc, #608]	; (8001cb4 <main+0x358>)
 8001a52:	f7fe fbc7 	bl	80001e4 <strlen>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b96      	ldr	r3, [pc, #600]	; (8001cb4 <main+0x358>)
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4996      	ldr	r1, [pc, #600]	; (8001cb8 <main+0x35c>)
 8001a60:	461a      	mov	r2, r3
 8001a62:	460b      	mov	r3, r1
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	8013      	strh	r3, [r2, #0]
		strcat(active_note, octave_str);
 8001a68:	4986      	ldr	r1, [pc, #536]	; (8001c84 <main+0x328>)
 8001a6a:	4892      	ldr	r0, [pc, #584]	; (8001cb4 <main+0x358>)
 8001a6c:	f003 fafa 	bl	8005064 <strcat>
		strcat(active_note, " ");
 8001a70:	4890      	ldr	r0, [pc, #576]	; (8001cb4 <main+0x358>)
 8001a72:	f7fe fbb7 	bl	80001e4 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b8e      	ldr	r3, [pc, #568]	; (8001cb4 <main+0x358>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	498f      	ldr	r1, [pc, #572]	; (8001cbc <main+0x360>)
 8001a80:	461a      	mov	r2, r3
 8001a82:	460b      	mov	r3, r1
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	8013      	strh	r3, [r2, #0]
	  	setNote(active_note, &htim6);
 8001a88:	4980      	ldr	r1, [pc, #512]	; (8001c8c <main+0x330>)
 8001a8a:	488a      	ldr	r0, [pc, #552]	; (8001cb4 <main+0x358>)
 8001a8c:	f7ff fa26 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))){
 8001a90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a94:	4884      	ldr	r0, [pc, #528]	; (8001ca8 <main+0x34c>)
 8001a96:	f002 f9ed 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d129      	bne.n	8001af4 <main+0x198>
		HAL_Delay(delay);
 8001aa0:	4b82      	ldr	r3, [pc, #520]	; (8001cac <main+0x350>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 f8d5 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_12)));
 8001aaa:	bf00      	nop
 8001aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab0:	487d      	ldr	r0, [pc, #500]	; (8001ca8 <main+0x34c>)
 8001ab2:	f002 f9df 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f7      	beq.n	8001aac <main+0x150>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac0:	487b      	ldr	r0, [pc, #492]	; (8001cb0 <main+0x354>)
 8001ac2:	f002 fa08 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001ac6:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <main+0x358>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "CS");
 8001acc:	4879      	ldr	r0, [pc, #484]	; (8001cb4 <main+0x358>)
 8001ace:	f7fe fb89 	bl	80001e4 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b77      	ldr	r3, [pc, #476]	; (8001cb4 <main+0x358>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a79      	ldr	r2, [pc, #484]	; (8001cc0 <main+0x364>)
 8001adc:	8811      	ldrh	r1, [r2, #0]
 8001ade:	7892      	ldrb	r2, [r2, #2]
 8001ae0:	8019      	strh	r1, [r3, #0]
 8001ae2:	709a      	strb	r2, [r3, #2]
		strcat(active_note, octave_str);
 8001ae4:	4967      	ldr	r1, [pc, #412]	; (8001c84 <main+0x328>)
 8001ae6:	4873      	ldr	r0, [pc, #460]	; (8001cb4 <main+0x358>)
 8001ae8:	f003 fabc 	bl	8005064 <strcat>
	  	setNote(active_note, &htim6);
 8001aec:	4967      	ldr	r1, [pc, #412]	; (8001c8c <main+0x330>)
 8001aee:	4871      	ldr	r0, [pc, #452]	; (8001cb4 <main+0x358>)
 8001af0:	f7ff f9f4 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))){
 8001af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af8:	486b      	ldr	r0, [pc, #428]	; (8001ca8 <main+0x34c>)
 8001afa:	f002 f9bb 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d135      	bne.n	8001b70 <main+0x214>
		HAL_Delay(delay);
 8001b04:	4b69      	ldr	r3, [pc, #420]	; (8001cac <main+0x350>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 f8a3 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)));
 8001b0e:	bf00      	nop
 8001b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b14:	4864      	ldr	r0, [pc, #400]	; (8001ca8 <main+0x34c>)
 8001b16:	f002 f9ad 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f7      	beq.n	8001b10 <main+0x1b4>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b24:	4862      	ldr	r0, [pc, #392]	; (8001cb0 <main+0x354>)
 8001b26:	f002 f9d6 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001b2a:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <main+0x358>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "D");
 8001b30:	4860      	ldr	r0, [pc, #384]	; (8001cb4 <main+0x358>)
 8001b32:	f7fe fb57 	bl	80001e4 <strlen>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <main+0x358>)
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4961      	ldr	r1, [pc, #388]	; (8001cc4 <main+0x368>)
 8001b40:	461a      	mov	r2, r3
 8001b42:	460b      	mov	r3, r1
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	8013      	strh	r3, [r2, #0]
		strcat(active_note, octave_str);
 8001b48:	494e      	ldr	r1, [pc, #312]	; (8001c84 <main+0x328>)
 8001b4a:	485a      	ldr	r0, [pc, #360]	; (8001cb4 <main+0x358>)
 8001b4c:	f003 fa8a 	bl	8005064 <strcat>
		strcat(active_note, " ");
 8001b50:	4858      	ldr	r0, [pc, #352]	; (8001cb4 <main+0x358>)
 8001b52:	f7fe fb47 	bl	80001e4 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <main+0x358>)
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4957      	ldr	r1, [pc, #348]	; (8001cbc <main+0x360>)
 8001b60:	461a      	mov	r2, r3
 8001b62:	460b      	mov	r3, r1
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	8013      	strh	r3, [r2, #0]
	  	setNote(active_note, &htim6);
 8001b68:	4948      	ldr	r1, [pc, #288]	; (8001c8c <main+0x330>)
 8001b6a:	4852      	ldr	r0, [pc, #328]	; (8001cb4 <main+0x358>)
 8001b6c:	f7ff f9b6 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))){
 8001b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b74:	484c      	ldr	r0, [pc, #304]	; (8001ca8 <main+0x34c>)
 8001b76:	f002 f97d 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d129      	bne.n	8001bd4 <main+0x278>
		HAL_Delay(delay);
 8001b80:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <main+0x350>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 f865 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)));
 8001b8a:	bf00      	nop
 8001b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b90:	4845      	ldr	r0, [pc, #276]	; (8001ca8 <main+0x34c>)
 8001b92:	f002 f96f 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f7      	beq.n	8001b8c <main+0x230>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba0:	4843      	ldr	r0, [pc, #268]	; (8001cb0 <main+0x354>)
 8001ba2:	f002 f998 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <main+0x358>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "DS");
 8001bac:	4841      	ldr	r0, [pc, #260]	; (8001cb4 <main+0x358>)
 8001bae:	f7fe fb19 	bl	80001e4 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <main+0x358>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <main+0x36c>)
 8001bbc:	8811      	ldrh	r1, [r2, #0]
 8001bbe:	7892      	ldrb	r2, [r2, #2]
 8001bc0:	8019      	strh	r1, [r3, #0]
 8001bc2:	709a      	strb	r2, [r3, #2]
		strcat(active_note, octave_str);
 8001bc4:	492f      	ldr	r1, [pc, #188]	; (8001c84 <main+0x328>)
 8001bc6:	483b      	ldr	r0, [pc, #236]	; (8001cb4 <main+0x358>)
 8001bc8:	f003 fa4c 	bl	8005064 <strcat>
	  	setNote(active_note, &htim6);
 8001bcc:	492f      	ldr	r1, [pc, #188]	; (8001c8c <main+0x330>)
 8001bce:	4839      	ldr	r0, [pc, #228]	; (8001cb4 <main+0x358>)
 8001bd0:	f7ff f984 	bl	8000edc <setNote>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	4832      	ldr	r0, [pc, #200]	; (8001ca4 <main+0x348>)
 8001bda:	f002 f963 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be4:	482f      	ldr	r0, [pc, #188]	; (8001ca4 <main+0x348>)
 8001be6:	f002 f95d 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf0:	482c      	ldr	r0, [pc, #176]	; (8001ca4 <main+0x348>)
 8001bf2:	f002 f957 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bfc:	4829      	ldr	r0, [pc, #164]	; (8001ca4 <main+0x348>)
 8001bfe:	f002 f951 	bl	8003ea4 <HAL_GPIO_WritePin>
	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))){
 8001c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c06:	4828      	ldr	r0, [pc, #160]	; (8001ca8 <main+0x34c>)
 8001c08:	f002 f934 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d162      	bne.n	8001cd8 <main+0x37c>
		HAL_Delay(delay);
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <main+0x350>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 f81c 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)));
 8001c1c:	bf00      	nop
 8001c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c22:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <main+0x34c>)
 8001c24:	f002 f926 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f7      	beq.n	8001c1e <main+0x2c2>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c32:	481f      	ldr	r0, [pc, #124]	; (8001cb0 <main+0x354>)
 8001c34:	f002 f94f 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <main+0x358>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "E");
 8001c3e:	481d      	ldr	r0, [pc, #116]	; (8001cb4 <main+0x358>)
 8001c40:	f7fe fad0 	bl	80001e4 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <main+0x358>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	491f      	ldr	r1, [pc, #124]	; (8001ccc <main+0x370>)
 8001c4e:	461a      	mov	r2, r3
 8001c50:	460b      	mov	r3, r1
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	8013      	strh	r3, [r2, #0]
		strcat(active_note, octave_str);
 8001c56:	490b      	ldr	r1, [pc, #44]	; (8001c84 <main+0x328>)
 8001c58:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <main+0x358>)
 8001c5a:	f003 fa03 	bl	8005064 <strcat>
		strcat(active_note, " ");
 8001c5e:	4815      	ldr	r0, [pc, #84]	; (8001cb4 <main+0x358>)
 8001c60:	f7fe fac0 	bl	80001e4 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <main+0x358>)
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4913      	ldr	r1, [pc, #76]	; (8001cbc <main+0x360>)
 8001c6e:	461a      	mov	r2, r3
 8001c70:	460b      	mov	r3, r1
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	8013      	strh	r3, [r2, #0]
 8001c76:	e02b      	b.n	8001cd0 <main+0x374>
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	20000afc 	.word	0x20000afc
 8001c80:	08006988 	.word	0x08006988
 8001c84:	20000b64 	.word	0x20000b64
 8001c88:	20000b00 	.word	0x20000b00
 8001c8c:	2000079c 	.word	0x2000079c
 8001c90:	20000b68 	.word	0x20000b68
 8001c94:	200000a4 	.word	0x200000a4
 8001c98:	200007dc 	.word	0x200007dc
 8001c9c:	20000464 	.word	0x20000464
 8001ca0:	20000478 	.word	0x20000478
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	20000798 	.word	0x20000798
 8001cb8:	0800698c 	.word	0x0800698c
 8001cbc:	08006990 	.word	0x08006990
 8001cc0:	08006994 	.word	0x08006994
 8001cc4:	08006998 	.word	0x08006998
 8001cc8:	0800699c 	.word	0x0800699c
 8001ccc:	080069a0 	.word	0x080069a0
	  	setNote(active_note, &htim6);
 8001cd0:	49c4      	ldr	r1, [pc, #784]	; (8001fe4 <main+0x688>)
 8001cd2:	48c5      	ldr	r0, [pc, #788]	; (8001fe8 <main+0x68c>)
 8001cd4:	f7ff f902 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))){
 8001cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cdc:	48c3      	ldr	r0, [pc, #780]	; (8001fec <main+0x690>)
 8001cde:	f002 f8c9 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d135      	bne.n	8001d54 <main+0x3f8>
		HAL_Delay(delay);
 8001ce8:	4bc1      	ldr	r3, [pc, #772]	; (8001ff0 <main+0x694>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 ffb1 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));
 8001cf2:	bf00      	nop
 8001cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf8:	48bc      	ldr	r0, [pc, #752]	; (8001fec <main+0x690>)
 8001cfa:	f002 f8bb 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f7      	beq.n	8001cf4 <main+0x398>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d08:	48ba      	ldr	r0, [pc, #744]	; (8001ff4 <main+0x698>)
 8001d0a:	f002 f8e4 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001d0e:	4bb6      	ldr	r3, [pc, #728]	; (8001fe8 <main+0x68c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "F");
 8001d14:	48b4      	ldr	r0, [pc, #720]	; (8001fe8 <main+0x68c>)
 8001d16:	f7fe fa65 	bl	80001e4 <strlen>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4bb2      	ldr	r3, [pc, #712]	; (8001fe8 <main+0x68c>)
 8001d20:	4413      	add	r3, r2
 8001d22:	49b5      	ldr	r1, [pc, #724]	; (8001ff8 <main+0x69c>)
 8001d24:	461a      	mov	r2, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	8013      	strh	r3, [r2, #0]
		strcat(active_note, octave_str);
 8001d2c:	49b3      	ldr	r1, [pc, #716]	; (8001ffc <main+0x6a0>)
 8001d2e:	48ae      	ldr	r0, [pc, #696]	; (8001fe8 <main+0x68c>)
 8001d30:	f003 f998 	bl	8005064 <strcat>
		strcat(active_note, " ");
 8001d34:	48ac      	ldr	r0, [pc, #688]	; (8001fe8 <main+0x68c>)
 8001d36:	f7fe fa55 	bl	80001e4 <strlen>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4baa      	ldr	r3, [pc, #680]	; (8001fe8 <main+0x68c>)
 8001d40:	4413      	add	r3, r2
 8001d42:	49af      	ldr	r1, [pc, #700]	; (8002000 <main+0x6a4>)
 8001d44:	461a      	mov	r2, r3
 8001d46:	460b      	mov	r3, r1
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	8013      	strh	r3, [r2, #0]
	  	setNote(active_note, &htim6);
 8001d4c:	49a5      	ldr	r1, [pc, #660]	; (8001fe4 <main+0x688>)
 8001d4e:	48a6      	ldr	r0, [pc, #664]	; (8001fe8 <main+0x68c>)
 8001d50:	f7ff f8c4 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))){
 8001d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d58:	48a4      	ldr	r0, [pc, #656]	; (8001fec <main+0x690>)
 8001d5a:	f002 f88b 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d129      	bne.n	8001db8 <main+0x45c>
		HAL_Delay(delay);
 8001d64:	4ba2      	ldr	r3, [pc, #648]	; (8001ff0 <main+0x694>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 ff73 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)));
 8001d6e:	bf00      	nop
 8001d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d74:	489d      	ldr	r0, [pc, #628]	; (8001fec <main+0x690>)
 8001d76:	f002 f87d 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f7      	beq.n	8001d70 <main+0x414>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d84:	489b      	ldr	r0, [pc, #620]	; (8001ff4 <main+0x698>)
 8001d86:	f002 f8a6 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001d8a:	4b97      	ldr	r3, [pc, #604]	; (8001fe8 <main+0x68c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "FS");
 8001d90:	4895      	ldr	r0, [pc, #596]	; (8001fe8 <main+0x68c>)
 8001d92:	f7fe fa27 	bl	80001e4 <strlen>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b93      	ldr	r3, [pc, #588]	; (8001fe8 <main+0x68c>)
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a99      	ldr	r2, [pc, #612]	; (8002004 <main+0x6a8>)
 8001da0:	8811      	ldrh	r1, [r2, #0]
 8001da2:	7892      	ldrb	r2, [r2, #2]
 8001da4:	8019      	strh	r1, [r3, #0]
 8001da6:	709a      	strb	r2, [r3, #2]
		strcat(active_note, octave_str);
 8001da8:	4994      	ldr	r1, [pc, #592]	; (8001ffc <main+0x6a0>)
 8001daa:	488f      	ldr	r0, [pc, #572]	; (8001fe8 <main+0x68c>)
 8001dac:	f003 f95a 	bl	8005064 <strcat>
	  	setNote(active_note, &htim6);
 8001db0:	498c      	ldr	r1, [pc, #560]	; (8001fe4 <main+0x688>)
 8001db2:	488d      	ldr	r0, [pc, #564]	; (8001fe8 <main+0x68c>)
 8001db4:	f7ff f892 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))){
 8001db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbc:	488b      	ldr	r0, [pc, #556]	; (8001fec <main+0x690>)
 8001dbe:	f002 f859 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d135      	bne.n	8001e34 <main+0x4d8>
		HAL_Delay(delay);
 8001dc8:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <main+0x694>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 ff41 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)));
 8001dd2:	bf00      	nop
 8001dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd8:	4884      	ldr	r0, [pc, #528]	; (8001fec <main+0x690>)
 8001dda:	f002 f84b 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f7      	beq.n	8001dd4 <main+0x478>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de8:	4882      	ldr	r0, [pc, #520]	; (8001ff4 <main+0x698>)
 8001dea:	f002 f874 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001dee:	4b7e      	ldr	r3, [pc, #504]	; (8001fe8 <main+0x68c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "G");
 8001df4:	487c      	ldr	r0, [pc, #496]	; (8001fe8 <main+0x68c>)
 8001df6:	f7fe f9f5 	bl	80001e4 <strlen>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <main+0x68c>)
 8001e00:	4413      	add	r3, r2
 8001e02:	4981      	ldr	r1, [pc, #516]	; (8002008 <main+0x6ac>)
 8001e04:	461a      	mov	r2, r3
 8001e06:	460b      	mov	r3, r1
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	8013      	strh	r3, [r2, #0]
		strcat(active_note, octave_str);
 8001e0c:	497b      	ldr	r1, [pc, #492]	; (8001ffc <main+0x6a0>)
 8001e0e:	4876      	ldr	r0, [pc, #472]	; (8001fe8 <main+0x68c>)
 8001e10:	f003 f928 	bl	8005064 <strcat>
		strcat(active_note, " ");
 8001e14:	4874      	ldr	r0, [pc, #464]	; (8001fe8 <main+0x68c>)
 8001e16:	f7fe f9e5 	bl	80001e4 <strlen>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <main+0x68c>)
 8001e20:	4413      	add	r3, r2
 8001e22:	4977      	ldr	r1, [pc, #476]	; (8002000 <main+0x6a4>)
 8001e24:	461a      	mov	r2, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	8013      	strh	r3, [r2, #0]
	  	setNote(active_note, &htim6);
 8001e2c:	496d      	ldr	r1, [pc, #436]	; (8001fe4 <main+0x688>)
 8001e2e:	486e      	ldr	r0, [pc, #440]	; (8001fe8 <main+0x68c>)
 8001e30:	f7ff f854 	bl	8000edc <setNote>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	4874      	ldr	r0, [pc, #464]	; (800200c <main+0x6b0>)
 8001e3a:	f002 f833 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e44:	4871      	ldr	r0, [pc, #452]	; (800200c <main+0x6b0>)
 8001e46:	f002 f82d 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	486e      	ldr	r0, [pc, #440]	; (800200c <main+0x6b0>)
 8001e52:	f002 f827 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e5c:	486b      	ldr	r0, [pc, #428]	; (800200c <main+0x6b0>)
 8001e5e:	f002 f821 	bl	8003ea4 <HAL_GPIO_WritePin>
	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))){
 8001e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e66:	4861      	ldr	r0, [pc, #388]	; (8001fec <main+0x690>)
 8001e68:	f002 f804 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d129      	bne.n	8001ec6 <main+0x56a>
		HAL_Delay(delay);
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <main+0x694>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 feec 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)));
 8001e7c:	bf00      	nop
 8001e7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e82:	485a      	ldr	r0, [pc, #360]	; (8001fec <main+0x690>)
 8001e84:	f001 fff6 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f7      	beq.n	8001e7e <main+0x522>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e92:	4858      	ldr	r0, [pc, #352]	; (8001ff4 <main+0x698>)
 8001e94:	f002 f81f 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <main+0x68c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "GS");
 8001e9e:	4852      	ldr	r0, [pc, #328]	; (8001fe8 <main+0x68c>)
 8001ea0:	f7fe f9a0 	bl	80001e4 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <main+0x68c>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <main+0x6b4>)
 8001eae:	8811      	ldrh	r1, [r2, #0]
 8001eb0:	7892      	ldrb	r2, [r2, #2]
 8001eb2:	8019      	strh	r1, [r3, #0]
 8001eb4:	709a      	strb	r2, [r3, #2]
		strcat(active_note, octave_str);
 8001eb6:	4951      	ldr	r1, [pc, #324]	; (8001ffc <main+0x6a0>)
 8001eb8:	484b      	ldr	r0, [pc, #300]	; (8001fe8 <main+0x68c>)
 8001eba:	f003 f8d3 	bl	8005064 <strcat>
	  	setNote(active_note, &htim6);
 8001ebe:	4949      	ldr	r1, [pc, #292]	; (8001fe4 <main+0x688>)
 8001ec0:	4849      	ldr	r0, [pc, #292]	; (8001fe8 <main+0x68c>)
 8001ec2:	f7ff f80b 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))){
 8001ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eca:	4848      	ldr	r0, [pc, #288]	; (8001fec <main+0x690>)
 8001ecc:	f001 ffd2 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d135      	bne.n	8001f42 <main+0x5e6>
		HAL_Delay(delay);
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <main+0x694>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 feba 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));
 8001ee0:	bf00      	nop
 8001ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee6:	4841      	ldr	r0, [pc, #260]	; (8001fec <main+0x690>)
 8001ee8:	f001 ffc4 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f7      	beq.n	8001ee2 <main+0x586>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef6:	483f      	ldr	r0, [pc, #252]	; (8001ff4 <main+0x698>)
 8001ef8:	f001 ffed 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001efc:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <main+0x68c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "A");
 8001f02:	4839      	ldr	r0, [pc, #228]	; (8001fe8 <main+0x68c>)
 8001f04:	f7fe f96e 	bl	80001e4 <strlen>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <main+0x68c>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	4940      	ldr	r1, [pc, #256]	; (8002014 <main+0x6b8>)
 8001f12:	461a      	mov	r2, r3
 8001f14:	460b      	mov	r3, r1
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	8013      	strh	r3, [r2, #0]
		strcat(active_note, octave_str);
 8001f1a:	4938      	ldr	r1, [pc, #224]	; (8001ffc <main+0x6a0>)
 8001f1c:	4832      	ldr	r0, [pc, #200]	; (8001fe8 <main+0x68c>)
 8001f1e:	f003 f8a1 	bl	8005064 <strcat>
		strcat(active_note, " ");
 8001f22:	4831      	ldr	r0, [pc, #196]	; (8001fe8 <main+0x68c>)
 8001f24:	f7fe f95e 	bl	80001e4 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <main+0x68c>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	4933      	ldr	r1, [pc, #204]	; (8002000 <main+0x6a4>)
 8001f32:	461a      	mov	r2, r3
 8001f34:	460b      	mov	r3, r1
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	8013      	strh	r3, [r2, #0]
	  	setNote(active_note, &htim6);
 8001f3a:	492a      	ldr	r1, [pc, #168]	; (8001fe4 <main+0x688>)
 8001f3c:	482a      	ldr	r0, [pc, #168]	; (8001fe8 <main+0x68c>)
 8001f3e:	f7fe ffcd 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))){
 8001f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f46:	4829      	ldr	r0, [pc, #164]	; (8001fec <main+0x690>)
 8001f48:	f001 ff94 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d129      	bne.n	8001fa6 <main+0x64a>
		HAL_Delay(delay);
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <main+0x694>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fe7c 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)));
 8001f5c:	bf00      	nop
 8001f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f62:	4822      	ldr	r0, [pc, #136]	; (8001fec <main+0x690>)
 8001f64:	f001 ff86 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f7      	beq.n	8001f5e <main+0x602>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f72:	4820      	ldr	r0, [pc, #128]	; (8001ff4 <main+0x698>)
 8001f74:	f001 ffaf 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <main+0x68c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "AS");
 8001f7e:	481a      	ldr	r0, [pc, #104]	; (8001fe8 <main+0x68c>)
 8001f80:	f7fe f930 	bl	80001e4 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <main+0x68c>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <main+0x6bc>)
 8001f8e:	8811      	ldrh	r1, [r2, #0]
 8001f90:	7892      	ldrb	r2, [r2, #2]
 8001f92:	8019      	strh	r1, [r3, #0]
 8001f94:	709a      	strb	r2, [r3, #2]
		strcat(active_note, octave_str);
 8001f96:	4919      	ldr	r1, [pc, #100]	; (8001ffc <main+0x6a0>)
 8001f98:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <main+0x68c>)
 8001f9a:	f003 f863 	bl	8005064 <strcat>
	  	setNote(active_note, &htim6);
 8001f9e:	4911      	ldr	r1, [pc, #68]	; (8001fe4 <main+0x688>)
 8001fa0:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <main+0x68c>)
 8001fa2:	f7fe ff9b 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))){
 8001fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001faa:	4810      	ldr	r0, [pc, #64]	; (8001fec <main+0x690>)
 8001fac:	f001 ff62 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d152      	bne.n	800205c <main+0x700>
		HAL_Delay(delay);
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <main+0x694>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fe4a 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)));
 8001fc0:	bf00      	nop
 8001fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc6:	4809      	ldr	r0, [pc, #36]	; (8001fec <main+0x690>)
 8001fc8:	f001 ff54 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f7      	beq.n	8001fc2 <main+0x666>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <main+0x698>)
 8001fd8:	f001 ff7d 	bl	8003ed6 <HAL_GPIO_TogglePin>
		strcpy(active_note, "");
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <main+0x68c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e01b      	b.n	800201c <main+0x6c0>
 8001fe4:	2000079c 	.word	0x2000079c
 8001fe8:	20000798 	.word	0x20000798
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	40020c00 	.word	0x40020c00
 8001ff8:	080069a4 	.word	0x080069a4
 8001ffc:	20000b64 	.word	0x20000b64
 8002000:	08006990 	.word	0x08006990
 8002004:	080069a8 	.word	0x080069a8
 8002008:	080069ac 	.word	0x080069ac
 800200c:	40021000 	.word	0x40021000
 8002010:	080069b0 	.word	0x080069b0
 8002014:	080069b4 	.word	0x080069b4
 8002018:	080069b8 	.word	0x080069b8
		strcat(active_note, "B");
 800201c:	489b      	ldr	r0, [pc, #620]	; (800228c <main+0x930>)
 800201e:	f7fe f8e1 	bl	80001e4 <strlen>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	4b99      	ldr	r3, [pc, #612]	; (800228c <main+0x930>)
 8002028:	4413      	add	r3, r2
 800202a:	4999      	ldr	r1, [pc, #612]	; (8002290 <main+0x934>)
 800202c:	461a      	mov	r2, r3
 800202e:	460b      	mov	r3, r1
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	8013      	strh	r3, [r2, #0]
		strcat(active_note, octave_str);
 8002034:	4997      	ldr	r1, [pc, #604]	; (8002294 <main+0x938>)
 8002036:	4895      	ldr	r0, [pc, #596]	; (800228c <main+0x930>)
 8002038:	f003 f814 	bl	8005064 <strcat>
		strcat(active_note, " ");
 800203c:	4893      	ldr	r0, [pc, #588]	; (800228c <main+0x930>)
 800203e:	f7fe f8d1 	bl	80001e4 <strlen>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4b91      	ldr	r3, [pc, #580]	; (800228c <main+0x930>)
 8002048:	4413      	add	r3, r2
 800204a:	4993      	ldr	r1, [pc, #588]	; (8002298 <main+0x93c>)
 800204c:	461a      	mov	r2, r3
 800204e:	460b      	mov	r3, r1
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	8013      	strh	r3, [r2, #0]
	  	setNote(active_note, &htim6);
 8002054:	4991      	ldr	r1, [pc, #580]	; (800229c <main+0x940>)
 8002056:	488d      	ldr	r0, [pc, #564]	; (800228c <main+0x930>)
 8002058:	f7fe ff40 	bl	8000edc <setNote>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	488f      	ldr	r0, [pc, #572]	; (80022a0 <main+0x944>)
 8002062:	f001 ff1f 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206c:	488c      	ldr	r0, [pc, #560]	; (80022a0 <main+0x944>)
 800206e:	f001 ff19 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002078:	4889      	ldr	r0, [pc, #548]	; (80022a0 <main+0x944>)
 800207a:	f001 ff13 	bl	8003ea4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002084:	4886      	ldr	r0, [pc, #536]	; (80022a0 <main+0x944>)
 8002086:	f001 ff0d 	bl	8003ea4 <HAL_GPIO_WritePin>
	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11))){
 800208a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208e:	4885      	ldr	r0, [pc, #532]	; (80022a4 <main+0x948>)
 8002090:	f001 fef0 	bl	8003e74 <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d130      	bne.n	80020fc <main+0x7a0>
		HAL_Delay(delay);
 800209a:	4b83      	ldr	r3, [pc, #524]	; (80022a8 <main+0x94c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fdd8 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)));
 80020a4:	bf00      	nop
 80020a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020aa:	487e      	ldr	r0, [pc, #504]	; (80022a4 <main+0x948>)
 80020ac:	f001 fee2 	bl	8003e74 <HAL_GPIO_ReadPin>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f7      	beq.n	80020a6 <main+0x74a>
		strcpy(active_note, "");
 80020b6:	4b75      	ldr	r3, [pc, #468]	; (800228c <main+0x930>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
		strcat(active_note, "C");
 80020bc:	4873      	ldr	r0, [pc, #460]	; (800228c <main+0x930>)
 80020be:	f7fe f891 	bl	80001e4 <strlen>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b71      	ldr	r3, [pc, #452]	; (800228c <main+0x930>)
 80020c8:	4413      	add	r3, r2
 80020ca:	4978      	ldr	r1, [pc, #480]	; (80022ac <main+0x950>)
 80020cc:	461a      	mov	r2, r3
 80020ce:	460b      	mov	r3, r1
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	8013      	strh	r3, [r2, #0]
		strcat(active_note, next_octave_str);
 80020d4:	4976      	ldr	r1, [pc, #472]	; (80022b0 <main+0x954>)
 80020d6:	486d      	ldr	r0, [pc, #436]	; (800228c <main+0x930>)
 80020d8:	f002 ffc4 	bl	8005064 <strcat>
		strcat(active_note, " ");
 80020dc:	486b      	ldr	r0, [pc, #428]	; (800228c <main+0x930>)
 80020de:	f7fe f881 	bl	80001e4 <strlen>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b69      	ldr	r3, [pc, #420]	; (800228c <main+0x930>)
 80020e8:	4413      	add	r3, r2
 80020ea:	496b      	ldr	r1, [pc, #428]	; (8002298 <main+0x93c>)
 80020ec:	461a      	mov	r2, r3
 80020ee:	460b      	mov	r3, r1
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	8013      	strh	r3, [r2, #0]
	  	setNote(active_note, &htim6);
 80020f4:	4969      	ldr	r1, [pc, #420]	; (800229c <main+0x940>)
 80020f6:	4865      	ldr	r0, [pc, #404]	; (800228c <main+0x930>)
 80020f8:	f7fe fef0 	bl	8000edc <setNote>
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))){
 80020fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002100:	4868      	ldr	r0, [pc, #416]	; (80022a4 <main+0x948>)
 8002102:	f001 feb7 	bl	8003e74 <HAL_GPIO_ReadPin>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d151      	bne.n	80021b0 <main+0x854>
		HAL_Delay(delay);
 800210c:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <main+0x94c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fd9f 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));
 8002116:	bf00      	nop
 8002118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800211c:	4861      	ldr	r0, [pc, #388]	; (80022a4 <main+0x948>)
 800211e:	f001 fea9 	bl	8003e74 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f7      	beq.n	8002118 <main+0x7bc>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800212c:	4861      	ldr	r0, [pc, #388]	; (80022b4 <main+0x958>)
 800212e:	f001 fed2 	bl	8003ed6 <HAL_GPIO_TogglePin>
		if(chosen_wave == 0){
 8002132:	4b61      	ldr	r3, [pc, #388]	; (80022b8 <main+0x95c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d111      	bne.n	800215e <main+0x802>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800213a:	2100      	movs	r1, #0
 800213c:	485f      	ldr	r0, [pc, #380]	; (80022bc <main+0x960>)
 800213e:	f000 ff8d 	bl	800305c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_val, SAMPLING_RATE, DAC_ALIGN_12B_R);
 8002142:	2300      	movs	r3, #0
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	23c8      	movs	r3, #200	; 0xc8
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <main+0x964>)
 800214a:	2100      	movs	r1, #0
 800214c:	485b      	ldr	r0, [pc, #364]	; (80022bc <main+0x960>)
 800214e:	f000 fed7 	bl	8002f00 <HAL_DAC_Start_DMA>
			chosen_wave += 1;
 8002152:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <main+0x95c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a57      	ldr	r2, [pc, #348]	; (80022b8 <main+0x95c>)
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e028      	b.n	80021b0 <main+0x854>
		}else if(chosen_wave == 1){
 800215e:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <main+0x95c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d111      	bne.n	800218a <main+0x82e>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002166:	2100      	movs	r1, #0
 8002168:	4854      	ldr	r0, [pc, #336]	; (80022bc <main+0x960>)
 800216a:	f000 ff77 	bl	800305c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, saw_val, SAMPLING_RATE, DAC_ALIGN_12B_R);
 800216e:	2300      	movs	r3, #0
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	23c8      	movs	r3, #200	; 0xc8
 8002174:	4a53      	ldr	r2, [pc, #332]	; (80022c4 <main+0x968>)
 8002176:	2100      	movs	r1, #0
 8002178:	4850      	ldr	r0, [pc, #320]	; (80022bc <main+0x960>)
 800217a:	f000 fec1 	bl	8002f00 <HAL_DAC_Start_DMA>
			chosen_wave += 1;
 800217e:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <main+0x95c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <main+0x95c>)
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e012      	b.n	80021b0 <main+0x854>
		}else if(chosen_wave == 2){
 800218a:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <main+0x95c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d10e      	bne.n	80021b0 <main+0x854>
		  	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002192:	2100      	movs	r1, #0
 8002194:	4849      	ldr	r0, [pc, #292]	; (80022bc <main+0x960>)
 8002196:	f000 ff61 	bl	800305c <HAL_DAC_Stop_DMA>
		  	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, quad_val, SAMPLING_RATE, DAC_ALIGN_12B_R);
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	23c8      	movs	r3, #200	; 0xc8
 80021a0:	4a49      	ldr	r2, [pc, #292]	; (80022c8 <main+0x96c>)
 80021a2:	2100      	movs	r1, #0
 80021a4:	4845      	ldr	r0, [pc, #276]	; (80022bc <main+0x960>)
 80021a6:	f000 feab 	bl	8002f00 <HAL_DAC_Start_DMA>
		  	chosen_wave = 0;
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <main+0x95c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
		}
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))){
 80021b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b4:	483b      	ldr	r0, [pc, #236]	; (80022a4 <main+0x948>)
 80021b6:	f001 fe5d 	bl	8003e74 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d129      	bne.n	8002214 <main+0x8b8>
		HAL_Delay(delay);
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <main+0x94c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fd45 	bl	8002c54 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)));
 80021ca:	bf00      	nop
 80021cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d0:	4834      	ldr	r0, [pc, #208]	; (80022a4 <main+0x948>)
 80021d2:	f001 fe4f 	bl	8003e74 <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f7      	beq.n	80021cc <main+0x870>
		if(octave > 2){
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <main+0x970>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	dd17      	ble.n	8002214 <main+0x8b8>
			octave -= 1;
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <main+0x970>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	4a38      	ldr	r2, [pc, #224]	; (80022cc <main+0x970>)
 80021ec:	6013      	str	r3, [r2, #0]
			next_octave = octave + 1;
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <main+0x970>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	4a36      	ldr	r2, [pc, #216]	; (80022d0 <main+0x974>)
 80021f6:	6013      	str	r3, [r2, #0]
			sprintf(octave_str, "%d", octave);
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <main+0x970>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4935      	ldr	r1, [pc, #212]	; (80022d4 <main+0x978>)
 8002200:	4824      	ldr	r0, [pc, #144]	; (8002294 <main+0x938>)
 8002202:	f002 ff0f 	bl	8005024 <siprintf>
			sprintf(next_octave_str, "%d", next_octave);
 8002206:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <main+0x974>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	4931      	ldr	r1, [pc, #196]	; (80022d4 <main+0x978>)
 800220e:	4828      	ldr	r0, [pc, #160]	; (80022b0 <main+0x954>)
 8002210:	f002 ff08 	bl	8005024 <siprintf>
		}
	  }

	  if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))){
 8002214:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002218:	4822      	ldr	r0, [pc, #136]	; (80022a4 <main+0x948>)
 800221a:	f001 fe2b 	bl	8003e74 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	f47f abe0 	bne.w	80019e6 <main+0x8a>
		HAL_Delay(delay);
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <main+0x94c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd12 	bl	8002c54 <HAL_Delay>
	  	while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)));
 8002230:	bf00      	nop
 8002232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002236:	481b      	ldr	r0, [pc, #108]	; (80022a4 <main+0x948>)
 8002238:	f001 fe1c 	bl	8003e74 <HAL_GPIO_ReadPin>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f7      	beq.n	8002232 <main+0x8d6>
	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002246:	481b      	ldr	r0, [pc, #108]	; (80022b4 <main+0x958>)
 8002248:	f001 fe45 	bl	8003ed6 <HAL_GPIO_TogglePin>
	  	if(octave < 6){
 800224c:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <main+0x970>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b05      	cmp	r3, #5
 8002252:	f73f abc8 	bgt.w	80019e6 <main+0x8a>
	  		octave += 1;
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <main+0x970>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <main+0x970>)
 800225e:	6013      	str	r3, [r2, #0]
	  		next_octave = octave + 1;
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <main+0x970>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <main+0x974>)
 8002268:	6013      	str	r3, [r2, #0]
	  		sprintf(octave_str, "%d", octave);
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <main+0x970>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4918      	ldr	r1, [pc, #96]	; (80022d4 <main+0x978>)
 8002272:	4808      	ldr	r0, [pc, #32]	; (8002294 <main+0x938>)
 8002274:	f002 fed6 	bl	8005024 <siprintf>
	  		sprintf(next_octave_str, "%d", next_octave);
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <main+0x974>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4915      	ldr	r1, [pc, #84]	; (80022d4 <main+0x978>)
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <main+0x954>)
 8002282:	f002 fecf 	bl	8005024 <siprintf>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002286:	f7ff bbae 	b.w	80019e6 <main+0x8a>
 800228a:	bf00      	nop
 800228c:	20000798 	.word	0x20000798
 8002290:	080069bc 	.word	0x080069bc
 8002294:	20000b64 	.word	0x20000b64
 8002298:	08006990 	.word	0x08006990
 800229c:	2000079c 	.word	0x2000079c
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	20000000 	.word	0x20000000
 80022ac:	0800698c 	.word	0x0800698c
 80022b0:	20000b00 	.word	0x20000b00
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	20000094 	.word	0x20000094
 80022bc:	20000464 	.word	0x20000464
 80022c0:	200000e4 	.word	0x200000e4
 80022c4:	200007dc 	.word	0x200007dc
 80022c8:	20000478 	.word	0x20000478
 80022cc:	20000004 	.word	0x20000004
 80022d0:	20000afc 	.word	0x20000afc
 80022d4:	08006988 	.word	0x08006988

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b094      	sub	sp, #80	; 0x50
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	2230      	movs	r2, #48	; 0x30
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fe94 	bl	8005014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <SystemClock_Config+0xcc>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <SystemClock_Config+0xcc>)
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <SystemClock_Config+0xcc>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <SystemClock_Config+0xd0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <SystemClock_Config+0xd0>)
 8002322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <SystemClock_Config+0xd0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002334:	2301      	movs	r3, #1
 8002336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233e:	2302      	movs	r3, #2
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002348:	2304      	movs	r3, #4
 800234a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800234c:	23a8      	movs	r3, #168	; 0xa8
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002350:	2302      	movs	r3, #2
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002354:	2304      	movs	r3, #4
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002358:	f107 0320 	add.w	r3, r7, #32
 800235c:	4618      	mov	r0, r3
 800235e:	f001 fdd5 	bl	8003f0c <HAL_RCC_OscConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002368:	f000 f9d6 	bl	8002718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800236c:	230f      	movs	r3, #15
 800236e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002370:	2302      	movs	r3, #2
 8002372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002378:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800237c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800237e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002382:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2105      	movs	r1, #5
 800238a:	4618      	mov	r0, r3
 800238c:	f002 f82e 	bl	80043ec <HAL_RCC_ClockConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002396:	f000 f9bf 	bl	8002718 <Error_Handler>
  }
}
 800239a:	bf00      	nop
 800239c:	3750      	adds	r7, #80	; 0x50
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000

080023ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80023b2:	463b      	mov	r3, r7
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_DAC_Init+0x64>)
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <MX_DAC_Init+0x68>)
 80023be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80023c0:	4813      	ldr	r0, [pc, #76]	; (8002410 <MX_DAC_Init+0x64>)
 80023c2:	f000 fd7a 	bl	8002eba <HAL_DAC_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80023cc:	f000 f9a4 	bl	8002718 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80023d0:	2304      	movs	r3, #4
 80023d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80023d8:	463b      	mov	r3, r7
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	480c      	ldr	r0, [pc, #48]	; (8002410 <MX_DAC_Init+0x64>)
 80023e0:	f000 feef 	bl	80031c2 <HAL_DAC_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80023ea:	f000 f995 	bl	8002718 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80023ee:	2314      	movs	r3, #20
 80023f0:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80023f2:	463b      	mov	r3, r7
 80023f4:	2210      	movs	r2, #16
 80023f6:	4619      	mov	r1, r3
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_DAC_Init+0x64>)
 80023fa:	f000 fee2 	bl	80031c2 <HAL_DAC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8002404:	f000 f988 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000464 	.word	0x20000464
 8002414:	40007400 	.word	0x40007400

08002418 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242c:	463b      	mov	r3, r7
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <MX_TIM4_Init+0x94>)
 8002436:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <MX_TIM4_Init+0x98>)
 8002438:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6999;
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <MX_TIM4_Init+0x94>)
 800243c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002440:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <MX_TIM4_Init+0x94>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 11999;
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <MX_TIM4_Init+0x94>)
 800244a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800244e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <MX_TIM4_Init+0x94>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <MX_TIM4_Init+0x94>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800245c:	4813      	ldr	r0, [pc, #76]	; (80024ac <MX_TIM4_Init+0x94>)
 800245e:	f002 f983 	bl	8004768 <HAL_TIM_Base_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002468:	f000 f956 	bl	8002718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4619      	mov	r1, r3
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <MX_TIM4_Init+0x94>)
 800247a:	f002 faf7 	bl	8004a6c <HAL_TIM_ConfigClockSource>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002484:	f000 f948 	bl	8002718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002490:	463b      	mov	r3, r7
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_TIM4_Init+0x94>)
 8002496:	f002 fd03 	bl	8004ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80024a0:	f000 f93a 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200000a4 	.word	0x200000a4
 80024b0:	40000800 	.word	0x40000800

080024b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ba:	463b      	mov	r3, r7
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_TIM6_Init+0x60>)
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <MX_TIM6_Init+0x64>)
 80024c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_TIM6_Init+0x60>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_TIM6_Init+0x60>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_TIM6_Init+0x60>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_TIM6_Init+0x60>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <MX_TIM6_Init+0x60>)
 80024e2:	f002 f941 	bl	8004768 <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80024ec:	f000 f914 	bl	8002718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024f0:	2320      	movs	r3, #32
 80024f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024f8:	463b      	mov	r3, r7
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_TIM6_Init+0x60>)
 80024fe:	f002 fccf 	bl	8004ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002508:	f000 f906 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2000079c 	.word	0x2000079c
 8002518:	40001000 	.word	0x40001000

0800251c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002522:	463b      	mov	r3, r7
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_TIM7_Init+0x60>)
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <MX_TIM7_Init+0x64>)
 800252e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <MX_TIM7_Init+0x60>)
 8002532:	2200      	movs	r2, #0
 8002534:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_TIM7_Init+0x60>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_TIM7_Init+0x60>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_TIM7_Init+0x60>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <MX_TIM7_Init+0x60>)
 800254a:	f002 f90d 	bl	8004768 <HAL_TIM_Base_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002554:	f000 f8e0 	bl	8002718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002558:	2320      	movs	r3, #32
 800255a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002560:	463b      	mov	r3, r7
 8002562:	4619      	mov	r1, r3
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_TIM7_Init+0x60>)
 8002566:	f002 fc9b 	bl	8004ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002570:	f000 f8d2 	bl	8002718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000b68 	.word	0x20000b68
 8002580:	40001400 	.word	0x40001400

08002584 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_DMA_Init+0x4c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <MX_DMA_Init+0x4c>)
 8002594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <MX_DMA_Init+0x4c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2010      	movs	r0, #16
 80025ac:	f000 fc4f 	bl	8002e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025b0:	2010      	movs	r0, #16
 80025b2:	f000 fc68 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	2011      	movs	r0, #17
 80025bc:	f000 fc47 	bl	8002e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025c0:	2011      	movs	r0, #17
 80025c2:	f000 fc60 	bl	8002e86 <HAL_NVIC_EnableIRQ>

}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b45      	ldr	r3, [pc, #276]	; (8002704 <MX_GPIO_Init+0x130>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a44      	ldr	r2, [pc, #272]	; (8002704 <MX_GPIO_Init+0x130>)
 80025f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b42      	ldr	r3, [pc, #264]	; (8002704 <MX_GPIO_Init+0x130>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <MX_GPIO_Init+0x130>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a3d      	ldr	r2, [pc, #244]	; (8002704 <MX_GPIO_Init+0x130>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <MX_GPIO_Init+0x130>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <MX_GPIO_Init+0x130>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a36      	ldr	r2, [pc, #216]	; (8002704 <MX_GPIO_Init+0x130>)
 800262c:	f043 0310 	orr.w	r3, r3, #16
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b34      	ldr	r3, [pc, #208]	; (8002704 <MX_GPIO_Init+0x130>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <MX_GPIO_Init+0x130>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <MX_GPIO_Init+0x130>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <MX_GPIO_Init+0x130>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <MX_GPIO_Init+0x130>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a28      	ldr	r2, [pc, #160]	; (8002704 <MX_GPIO_Init+0x130>)
 8002664:	f043 0308 	orr.w	r3, r3, #8
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <MX_GPIO_Init+0x130>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002676:	2201      	movs	r2, #1
 8002678:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800267c:	4822      	ldr	r0, [pc, #136]	; (8002708 <MX_GPIO_Init+0x134>)
 800267e:	f001 fc11 	bl	8003ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002682:	2200      	movs	r2, #0
 8002684:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002688:	4820      	ldr	r0, [pc, #128]	; (800270c <MX_GPIO_Init+0x138>)
 800268a:	f001 fc0b 	bl	8003ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800268e:	2301      	movs	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	481b      	ldr	r0, [pc, #108]	; (8002710 <MX_GPIO_Init+0x13c>)
 80026a2:	f001 fa4d 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80026a6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80026aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ac:	2301      	movs	r3, #1
 80026ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4619      	mov	r1, r3
 80026be:	4812      	ldr	r0, [pc, #72]	; (8002708 <MX_GPIO_Init+0x134>)
 80026c0:	f001 fa3e 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80026c4:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80026c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	480e      	ldr	r0, [pc, #56]	; (8002714 <MX_GPIO_Init+0x140>)
 80026da:	f001 fa31 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80026e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e4:	2301      	movs	r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026e8:	2302      	movs	r3, #2
 80026ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_GPIO_Init+0x138>)
 80026f8:	f001 fa22 	bl	8003b40 <HAL_GPIO_Init>

}
 80026fc:	bf00      	nop
 80026fe:	3728      	adds	r7, #40	; 0x28
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40021000 	.word	0x40021000
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400

08002718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_MspInit+0x4c>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_MspInit+0x4c>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a55      	ldr	r2, [pc, #340]	; (80028ec <HAL_DAC_MspInit+0x174>)
 8002796:	4293      	cmp	r3, r2
 8002798:	f040 80a4 	bne.w	80028e4 <HAL_DAC_MspInit+0x16c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_DAC_MspInit+0x178>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_DAC_MspInit+0x178>)
 80027a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027aa:	6413      	str	r3, [r2, #64]	; 0x40
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_DAC_MspInit+0x178>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4b4c      	ldr	r3, [pc, #304]	; (80028f0 <HAL_DAC_MspInit+0x178>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4a4b      	ldr	r2, [pc, #300]	; (80028f0 <HAL_DAC_MspInit+0x178>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6313      	str	r3, [r2, #48]	; 0x30
 80027c8:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <HAL_DAC_MspInit+0x178>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027d4:	2330      	movs	r3, #48	; 0x30
 80027d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027d8:	2303      	movs	r3, #3
 80027da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	4843      	ldr	r0, [pc, #268]	; (80028f4 <HAL_DAC_MspInit+0x17c>)
 80027e8:	f001 f9aa 	bl	8003b40 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80027ec:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 80027ee:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_DAC_MspInit+0x184>)
 80027f0:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 80027f4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80027f8:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027fa:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 80027fc:	2240      	movs	r2, #64	; 0x40
 80027fe:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002806:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002814:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002818:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800281c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002824:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002826:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 800282e:	2204      	movs	r2, #4
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002834:	2203      	movs	r2, #3
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 800283a:	2200      	movs	r2, #0
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002844:	482c      	ldr	r0, [pc, #176]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002846:	f000 fd9d 	bl	8003384 <HAL_DMA_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_DAC_MspInit+0xdc>
    {
      Error_Handler();
 8002850:	f7ff ff62 	bl	8002718 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <HAL_DAC_MspInit+0x180>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_DAC_MspInit+0x188>)
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <HAL_DAC_MspInit+0x18c>)
 8002864:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <HAL_DAC_MspInit+0x188>)
 8002868:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800286c:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_DAC_MspInit+0x188>)
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_DAC_MspInit+0x188>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_DAC_MspInit+0x188>)
 800287c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002880:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <HAL_DAC_MspInit+0x188>)
 8002884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002888:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_DAC_MspInit+0x188>)
 800288c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002890:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_DAC_MspInit+0x188>)
 8002894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002898:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_DAC_MspInit+0x188>)
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_DAC_MspInit+0x188>)
 80028a2:	2204      	movs	r2, #4
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dac2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_DAC_MspInit+0x188>)
 80028a8:	2203      	movs	r2, #3
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dac2.Init.MemBurst = DMA_MBURST_SINGLE;
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_DAC_MspInit+0x188>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dac2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_DAC_MspInit+0x188>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80028b8:	4811      	ldr	r0, [pc, #68]	; (8002900 <HAL_DAC_MspInit+0x188>)
 80028ba:	f000 fd63 	bl	8003384 <HAL_DMA_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_DAC_MspInit+0x150>
    {
      Error_Handler();
 80028c4:	f7ff ff28 	bl	8002718 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_DAC_MspInit+0x188>)
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <HAL_DAC_MspInit+0x188>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2036      	movs	r0, #54	; 0x36
 80028da:	f000 fab8 	bl	8002e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028de:	2036      	movs	r0, #54	; 0x36
 80028e0:	f000 fad1 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80028e4:	bf00      	nop
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40007400 	.word	0x40007400
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	20000404 	.word	0x20000404
 80028fc:	40026088 	.word	0x40026088
 8002900:	20000b04 	.word	0x20000b04
 8002904:	400260a0 	.word	0x400260a0

08002908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d116      	bne.n	8002948 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a28      	ldr	r2, [pc, #160]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	201e      	movs	r0, #30
 800293c:	f000 fa87 	bl	8002e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002940:	201e      	movs	r0, #30
 8002942:	f000 faa0 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002946:	e036      	b.n	80029b6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_TIM_Base_MspInit+0xc0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d116      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 800295c:	f043 0310 	orr.w	r3, r3, #16
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2036      	movs	r0, #54	; 0x36
 8002974:	f000 fa6b 	bl	8002e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002978:	2036      	movs	r0, #54	; 0x36
 800297a:	f000 fa84 	bl	8002e86 <HAL_NVIC_EnableIRQ>
}
 800297e:	e01a      	b.n	80029b6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_TIM_Base_MspInit+0xc4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d115      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002994:	f043 0320 	orr.w	r3, r3, #32
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_TIM_Base_MspInit+0xbc>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2037      	movs	r0, #55	; 0x37
 80029ac:	f000 fa4f 	bl	8002e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80029b0:	2037      	movs	r0, #55	; 0x37
 80029b2:	f000 fa68 	bl	8002e86 <HAL_NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40001000 	.word	0x40001000
 80029cc:	40001400 	.word	0x40001400

080029d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <HardFault_Handler+0x4>

080029e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <MemManage_Handler+0x4>

080029ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ee:	e7fe      	b.n	80029ee <BusFault_Handler+0x4>

080029f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <UsageFault_Handler+0x4>

080029f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a24:	f000 f8f6 	bl	8002c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <DMA1_Stream5_IRQHandler+0x10>)
 8002a32:	f000 fe1d 	bl	8003670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000404 	.word	0x20000404

08002a40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <DMA1_Stream6_IRQHandler+0x10>)
 8002a46:	f000 fe13 	bl	8003670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000b04 	.word	0x20000b04

08002a54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <TIM4_IRQHandler+0x10>)
 8002a5a:	f001 feff 	bl	800485c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200000a4 	.word	0x200000a4

08002a68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002a6c:	4803      	ldr	r0, [pc, #12]	; (8002a7c <TIM6_DAC_IRQHandler+0x14>)
 8002a6e:	f000 fb36 	bl	80030de <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002a72:	4803      	ldr	r0, [pc, #12]	; (8002a80 <TIM6_DAC_IRQHandler+0x18>)
 8002a74:	f001 fef2 	bl	800485c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000464 	.word	0x20000464
 8002a80:	2000079c 	.word	0x2000079c

08002a84 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <TIM7_IRQHandler+0x10>)
 8002a8a:	f001 fee7 	bl	800485c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000b68 	.word	0x20000b68

08002a98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <_sbrk+0x50>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <_sbrk+0x16>
		heap_end = &end;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <_sbrk+0x50>)
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <_sbrk+0x54>)
 8002aac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <_sbrk+0x50>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <_sbrk+0x50>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	466a      	mov	r2, sp
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d907      	bls.n	8002ad2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ac2:	f002 fa7d 	bl	8004fc0 <__errno>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	230c      	movs	r3, #12
 8002aca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad0:	e006      	b.n	8002ae0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <_sbrk+0x50>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a03      	ldr	r2, [pc, #12]	; (8002ae8 <_sbrk+0x50>)
 8002adc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000098 	.word	0x20000098
 8002aec:	20000bb0 	.word	0x20000bb0

08002af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <SystemInit+0x28>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <SystemInit+0x28>)
 8002afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SystemInit+0x28>)
 8002b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b22:	e003      	b.n	8002b2c <LoopCopyDataInit>

08002b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b2a:	3104      	adds	r1, #4

08002b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b34:	d3f6      	bcc.n	8002b24 <CopyDataInit>
  ldr  r2, =_sbss
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b38:	e002      	b.n	8002b40 <LoopFillZerobss>

08002b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b3c:	f842 3b04 	str.w	r3, [r2], #4

08002b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b44:	d3f9      	bcc.n	8002b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b46:	f7ff ffd3 	bl	8002af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f002 fa3f 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4e:	f7fe ff05 	bl	800195c <main>
  bx  lr    
 8002b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b58:	08006bf8 	.word	0x08006bf8
  ldr  r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b60:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002b64:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002b68:	20000bb0 	.word	0x20000bb0

08002b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <HAL_Init+0x40>)
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_Init+0x40>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_Init+0x40>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f000 f94d 	bl	8002e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f000 f808 	bl	8002bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba4:	f7ff fdc0 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_InitTick+0x54>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x58>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f965 	bl	8002ea2 <HAL_SYSTICK_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00e      	b.n	8002c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b0f      	cmp	r3, #15
 8002be6:	d80a      	bhi.n	8002bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be8:	2200      	movs	r2, #0
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f000 f92d 	bl	8002e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf4:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <HAL_InitTick+0x5c>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	20000010 	.word	0x20000010
 8002c10:	2000000c 	.word	0x2000000c

08002c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_IncTick+0x20>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x24>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_IncTick+0x24>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000010 	.word	0x20000010
 8002c38:	20000ba8 	.word	0x20000ba8

08002c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_GetTick+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000ba8 	.word	0x20000ba8

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ffee 	bl	8002c3c <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_Delay+0x40>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000010 	.word	0x20000010

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60d3      	str	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4907      	ldr	r1, [pc, #28]	; (8002d34 <__NVIC_EnableIRQ+0x38>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db0a      	blt.n	8002d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	490c      	ldr	r1, [pc, #48]	; (8002d84 <__NVIC_SetPriority+0x4c>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d60:	e00a      	b.n	8002d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4908      	ldr	r1, [pc, #32]	; (8002d88 <__NVIC_SetPriority+0x50>)
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	3b04      	subs	r3, #4
 8002d70:	0112      	lsls	r2, r2, #4
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	440b      	add	r3, r1
 8002d76:	761a      	strb	r2, [r3, #24]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f1c3 0307 	rsb	r3, r3, #7
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	bf28      	it	cs
 8002daa:	2304      	movcs	r3, #4
 8002dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d902      	bls.n	8002dbc <NVIC_EncodePriority+0x30>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3b03      	subs	r3, #3
 8002dba:	e000      	b.n	8002dbe <NVIC_EncodePriority+0x32>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	401a      	ands	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43d9      	mvns	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	4313      	orrs	r3, r2
         );
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e04:	d301      	bcc.n	8002e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00f      	b.n	8002e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <SysTick_Config+0x40>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e12:	210f      	movs	r1, #15
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	f7ff ff8e 	bl	8002d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <SysTick_Config+0x40>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e22:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <SysTick_Config+0x40>)
 8002e24:	2207      	movs	r2, #7
 8002e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	e000e010 	.word	0xe000e010

08002e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ff29 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e60:	f7ff ff3e 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ff8e 	bl	8002d8c <NVIC_EncodePriority>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff5d 	bl	8002d38 <__NVIC_SetPriority>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff31 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ffa2 	bl	8002df4 <SysTick_Config>
 8002eb0:	4603      	mov	r3, r0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e014      	b.n	8002ef6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff fc4b 	bl	8002778 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	795b      	ldrb	r3, [r3, #5]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_DAC_Start_DMA+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e08e      	b.n	800303c <HAL_DAC_Start_DMA+0x13c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2202      	movs	r2, #2
 8002f28:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d12a      	bne.n	8002f86 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_DAC_Start_DMA+0x144>)
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <HAL_DAC_Start_DMA+0x148>)
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a41      	ldr	r2, [pc, #260]	; (800304c <HAL_DAC_Start_DMA+0x14c>)
 8002f46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f56:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d009      	beq.n	8002f72 <HAL_DAC_Start_DMA+0x72>
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d00c      	beq.n	8002f7c <HAL_DAC_Start_DMA+0x7c>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d000      	beq.n	8002f68 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002f66:	e039      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	617b      	str	r3, [r7, #20]
        break;
 8002f70:	e034      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	617b      	str	r3, [r7, #20]
        break;
 8002f7a:	e02f      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3310      	adds	r3, #16
 8002f82:	617b      	str	r3, [r7, #20]
        break;
 8002f84:	e02a      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a31      	ldr	r2, [pc, #196]	; (8003050 <HAL_DAC_Start_DMA+0x150>)
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_DAC_Start_DMA+0x154>)
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_DAC_Start_DMA+0x158>)
 8002f9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d009      	beq.n	8002fc8 <HAL_DAC_Start_DMA+0xc8>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_DAC_Start_DMA+0xd2>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d000      	beq.n	8002fbe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002fbc:	e00e      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	617b      	str	r3, [r7, #20]
        break;
 8002fc6:	e009      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	617b      	str	r3, [r7, #20]
        break;
 8002fd0:	e004      	b.n	8002fdc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	617b      	str	r3, [r7, #20]
        break;
 8002fda:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6898      	ldr	r0, [r3, #8]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	f000 fa70 	bl	80034e0 <HAL_DMA_Start_IT>
 8003000:	e00e      	b.n	8003020 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003010:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68d8      	ldr	r0, [r3, #12]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	f000 fa60 	bl	80034e0 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	0800325d 	.word	0x0800325d
 8003048:	0800327f 	.word	0x0800327f
 800304c:	0800329b 	.word	0x0800329b
 8003050:	08003319 	.word	0x08003319
 8003054:	0800333b 	.word	0x0800333b
 8003058:	08003357 	.word	0x08003357

0800305c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	400a      	ands	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6819      	ldr	r1, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	400a      	ands	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa72 	bl	8003590 <HAL_DMA_Abort>
 80030ac:	4603      	mov	r3, r0
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e006      	b.n	80030c0 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fa6a 	bl	8003590 <HAL_DMA_Abort>
 80030bc:	4603      	mov	r3, r0
 80030be:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2204      	movs	r2, #4
 80030ca:	711a      	strb	r2, [r3, #4]
 80030cc:	e002      	b.n	80030d4 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f4:	d118      	bne.n	8003128 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003120:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f843 	bl	80031ae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003136:	d118      	bne.n	800316a <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2204      	movs	r2, #4
 800313c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f043 0202 	orr.w	r2, r3, #2
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003152:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003162:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f8cd 	bl	8003304 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	795b      	ldrb	r3, [r3, #5]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_DAC_ConfigChannel+0x20>
 80031de:	2302      	movs	r3, #2
 80031e0:	e036      	b.n	8003250 <HAL_DAC_ConfigChannel+0x8e>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2202      	movs	r2, #2
 80031ec:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80031f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4013      	ands	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	22c0      	movs	r2, #192	; 0xc0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43da      	mvns	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	400a      	ands	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff ff81 	bl	8003172 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	711a      	strb	r2, [r3, #4]
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff ff7a 	bl	8003186 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ff70 	bl	800319a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	711a      	strb	r2, [r3, #4]
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff ffce 	bl	80032c8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	711a      	strb	r2, [r3, #4]
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff ffc7 	bl	80032dc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f043 0204 	orr.w	r2, r3, #4
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff ffbd 	bl	80032f0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	711a      	strb	r2, [r3, #4]
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff fc54 	bl	8002c3c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e099      	b.n	80034d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c0:	e00f      	b.n	80033e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c2:	f7ff fc3b 	bl	8002c3c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d908      	bls.n	80033e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2203      	movs	r2, #3
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e078      	b.n	80034d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e8      	bne.n	80033c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4b38      	ldr	r3, [pc, #224]	; (80034dc <HAL_DMA_Init+0x158>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800340e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b04      	cmp	r3, #4
 800343a:	d107      	bne.n	800344c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4313      	orrs	r3, r2
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0307 	bic.w	r3, r3, #7
 8003462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b04      	cmp	r3, #4
 8003474:	d117      	bne.n	80034a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fadf 	bl	8003a4c <DMA_CheckFifoParam>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2240      	movs	r2, #64	; 0x40
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034a2:	2301      	movs	r3, #1
 80034a4:	e016      	b.n	80034d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa96 	bl	80039e0 <DMA_CalcBaseAndBitshift>
 80034b4:	4603      	mov	r3, r0
 80034b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	223f      	movs	r2, #63	; 0x3f
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	f010803f 	.word	0xf010803f

080034e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_DMA_Start_IT+0x26>
 8003502:	2302      	movs	r3, #2
 8003504:	e040      	b.n	8003588 <HAL_DMA_Start_IT+0xa8>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d12f      	bne.n	800357a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2202      	movs	r2, #2
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fa28 	bl	8003984 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	223f      	movs	r2, #63	; 0x3f
 800353a:	409a      	lsls	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0216 	orr.w	r2, r2, #22
 800354e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0208 	orr.w	r2, r2, #8
 8003566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e005      	b.n	8003586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003582:	2302      	movs	r3, #2
 8003584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800359e:	f7ff fb4d 	bl	8002c3c <HAL_GetTick>
 80035a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d008      	beq.n	80035c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e052      	b.n	8003668 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0216 	bic.w	r2, r2, #22
 80035d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_DMA_Abort+0x62>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0208 	bic.w	r2, r2, #8
 8003600:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003612:	e013      	b.n	800363c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003614:	f7ff fb12 	bl	8002c3c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b05      	cmp	r3, #5
 8003620:	d90c      	bls.n	800363c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2203      	movs	r2, #3
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e015      	b.n	8003668 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e4      	bne.n	8003614 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	223f      	movs	r2, #63	; 0x3f
 8003650:	409a      	lsls	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800367c:	4b92      	ldr	r3, [pc, #584]	; (80038c8 <HAL_DMA_IRQHandler+0x258>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a92      	ldr	r2, [pc, #584]	; (80038cc <HAL_DMA_IRQHandler+0x25c>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	0a9b      	lsrs	r3, r3, #10
 8003688:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2208      	movs	r2, #8
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01a      	beq.n	80036dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	2208      	movs	r2, #8
 80036ca:	409a      	lsls	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	2201      	movs	r2, #1
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d012      	beq.n	8003712 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	2201      	movs	r2, #1
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	2204      	movs	r2, #4
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	2204      	movs	r2, #4
 8003736:	409a      	lsls	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	2210      	movs	r2, #16
 800374e:	409a      	lsls	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d043      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03c      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	2210      	movs	r2, #16
 800376c:	409a      	lsls	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d018      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d024      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
 800379e:	e01f      	b.n	80037e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
 80037b0:	e016      	b.n	80037e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0208 	bic.w	r2, r2, #8
 80037ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	2220      	movs	r2, #32
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 808e 	beq.w	800390e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8086 	beq.w	800390e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	2220      	movs	r2, #32
 8003808:	409a      	lsls	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b05      	cmp	r3, #5
 8003818:	d136      	bne.n	8003888 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0216 	bic.w	r2, r2, #22
 8003828:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003838:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_DMA_IRQHandler+0x1da>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0208 	bic.w	r2, r2, #8
 8003858:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	223f      	movs	r2, #63	; 0x3f
 8003860:	409a      	lsls	r2, r3
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	2b00      	cmp	r3, #0
 800387c:	d07d      	beq.n	800397a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
        }
        return;
 8003886:	e078      	b.n	800397a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01c      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d108      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d030      	beq.n	800390e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
 80038b4:	e02b      	b.n	800390e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d027      	beq.n	800390e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
 80038c6:	e022      	b.n	800390e <HAL_DMA_IRQHandler+0x29e>
 80038c8:	20000008 	.word	0x20000008
 80038cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0210 	bic.w	r2, r2, #16
 80038ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	2b00      	cmp	r3, #0
 8003914:	d032      	beq.n	800397c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d022      	beq.n	8003968 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2205      	movs	r2, #5
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3301      	adds	r3, #1
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	429a      	cmp	r2, r3
 8003944:	d307      	bcc.n	8003956 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f2      	bne.n	800393a <HAL_DMA_IRQHandler+0x2ca>
 8003954:	e000      	b.n	8003958 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003956:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e000      	b.n	800397c <HAL_DMA_IRQHandler+0x30c>
        return;
 800397a:	bf00      	nop
    }
  }
}
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop

08003984 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d108      	bne.n	80039c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039c2:	e007      	b.n	80039d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	3b10      	subs	r3, #16
 80039f0:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <DMA_CalcBaseAndBitshift+0x64>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039fa:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <DMA_CalcBaseAndBitshift+0x68>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d909      	bls.n	8003a22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	1d1a      	adds	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a20:	e007      	b.n	8003a32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	aaaaaaab 	.word	0xaaaaaaab
 8003a48:	080069d0 	.word	0x080069d0

08003a4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11f      	bne.n	8003aa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d855      	bhi.n	8003b18 <DMA_CheckFifoParam+0xcc>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <DMA_CheckFifoParam+0x28>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a97 	.word	0x08003a97
 8003a7c:	08003a85 	.word	0x08003a85
 8003a80:	08003b19 	.word	0x08003b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d045      	beq.n	8003b1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a94:	e042      	b.n	8003b1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a9e:	d13f      	bne.n	8003b20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa4:	e03c      	b.n	8003b20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d121      	bne.n	8003af4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d836      	bhi.n	8003b24 <DMA_CheckFifoParam+0xd8>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <DMA_CheckFifoParam+0x70>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad3 	.word	0x08003ad3
 8003ac4:	08003acd 	.word	0x08003acd
 8003ac8:	08003ae5 	.word	0x08003ae5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	e02f      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d024      	beq.n	8003b28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae2:	e021      	b.n	8003b28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aec:	d11e      	bne.n	8003b2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003af2:	e01b      	b.n	8003b2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d902      	bls.n	8003b00 <DMA_CheckFifoParam+0xb4>
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d003      	beq.n	8003b06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003afe:	e018      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e015      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00e      	beq.n	8003b30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
      break;
 8003b16:	e00b      	b.n	8003b30 <DMA_CheckFifoParam+0xe4>
      break;
 8003b18:	bf00      	nop
 8003b1a:	e00a      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      break;
 8003b1c:	bf00      	nop
 8003b1e:	e008      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      break;
 8003b20:	bf00      	nop
 8003b22:	e006      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      break;
 8003b24:	bf00      	nop
 8003b26:	e004      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      break;
 8003b28:	bf00      	nop
 8003b2a:	e002      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      break;   
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <DMA_CheckFifoParam+0xe6>
      break;
 8003b30:	bf00      	nop
    }
  } 
  
  return status; 
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	; 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e16b      	b.n	8003e34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	f040 815a 	bne.w	8003e2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d00b      	beq.n	8003b9a <HAL_GPIO_Init+0x5a>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d007      	beq.n	8003b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b8e:	2b11      	cmp	r3, #17
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b12      	cmp	r3, #18
 8003b98:	d130      	bne.n	8003bfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0201 	and.w	r2, r3, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0xfc>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b12      	cmp	r3, #18
 8003c3a:	d123      	bne.n	8003c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	220f      	movs	r2, #15
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	08da      	lsrs	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3208      	adds	r2, #8
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0203 	and.w	r2, r3, #3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80b4 	beq.w	8003e2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <HAL_GPIO_Init+0x308>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4a5e      	ldr	r2, [pc, #376]	; (8003e48 <HAL_GPIO_Init+0x308>)
 8003cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_GPIO_Init+0x308>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ce2:	4a5a      	ldr	r2, [pc, #360]	; (8003e4c <HAL_GPIO_Init+0x30c>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a51      	ldr	r2, [pc, #324]	; (8003e50 <HAL_GPIO_Init+0x310>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <HAL_GPIO_Init+0x226>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a50      	ldr	r2, [pc, #320]	; (8003e54 <HAL_GPIO_Init+0x314>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d025      	beq.n	8003d62 <HAL_GPIO_Init+0x222>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4f      	ldr	r2, [pc, #316]	; (8003e58 <HAL_GPIO_Init+0x318>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <HAL_GPIO_Init+0x21e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4e      	ldr	r2, [pc, #312]	; (8003e5c <HAL_GPIO_Init+0x31c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x21a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <HAL_GPIO_Init+0x320>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x216>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4c      	ldr	r2, [pc, #304]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x212>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4b      	ldr	r2, [pc, #300]	; (8003e68 <HAL_GPIO_Init+0x328>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x20e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4a      	ldr	r2, [pc, #296]	; (8003e6c <HAL_GPIO_Init+0x32c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x20a>
 8003d46:	2307      	movs	r3, #7
 8003d48:	e00e      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	e00c      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d4e:	2306      	movs	r3, #6
 8003d50:	e00a      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d52:	2305      	movs	r3, #5
 8003d54:	e008      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d56:	2304      	movs	r3, #4
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e004      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d66:	2300      	movs	r3, #0
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f002 0203 	and.w	r2, r2, #3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4093      	lsls	r3, r2
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d78:	4934      	ldr	r1, [pc, #208]	; (8003e4c <HAL_GPIO_Init+0x30c>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d86:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003daa:	4a31      	ldr	r2, [pc, #196]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003db0:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dda:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	f67f ae90 	bls.w	8003b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	3724      	adds	r7, #36	; 0x24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40013800 	.word	0x40013800
 8003e50:	40020000 	.word	0x40020000
 8003e54:	40020400 	.word	0x40020400
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	40020c00 	.word	0x40020c00
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40021400 	.word	0x40021400
 8003e68:	40021800 	.word	0x40021800
 8003e6c:	40021c00 	.word	0x40021c00
 8003e70:	40013c00 	.word	0x40013c00

08003e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	887b      	ldrh	r3, [r7, #2]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e001      	b.n	8003e96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb4:	787b      	ldrb	r3, [r7, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ec0:	e003      	b.n	8003eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	041a      	lsls	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	619a      	str	r2, [r3, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	887b      	ldrh	r3, [r7, #2]
 8003ee8:	401a      	ands	r2, r3
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d104      	bne.n	8003efa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	041a      	lsls	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	619a      	str	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e25b      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d075      	beq.n	8004016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2a:	4ba3      	ldr	r3, [pc, #652]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d00c      	beq.n	8003f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f36:	4ba0      	ldr	r3, [pc, #640]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d112      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f42:	4b9d      	ldr	r3, [pc, #628]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	4b99      	ldr	r3, [pc, #612]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05b      	beq.n	8004014 <HAL_RCC_OscConfig+0x108>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d157      	bne.n	8004014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e236      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d106      	bne.n	8003f80 <HAL_RCC_OscConfig+0x74>
 8003f72:	4b91      	ldr	r3, [pc, #580]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a90      	ldr	r2, [pc, #576]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e01d      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x98>
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a8a      	ldr	r2, [pc, #552]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a87      	ldr	r2, [pc, #540]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003fa4:	4b84      	ldr	r3, [pc, #528]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a83      	ldr	r2, [pc, #524]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a80      	ldr	r2, [pc, #512]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fe3a 	bl	8002c3c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fe fe36 	bl	8002c3c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1fb      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0xc0>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fe26 	bl	8002c3c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe fe22 	bl	8002c3c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1e7      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xe8>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004022:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402e:	4b62      	ldr	r3, [pc, #392]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004036:	2b08      	cmp	r3, #8
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d116      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e1bb      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b56      	ldr	r3, [pc, #344]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4952      	ldr	r1, [pc, #328]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	e03a      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407c:	4b4f      	ldr	r3, [pc, #316]	; (80041bc <HAL_RCC_OscConfig+0x2b0>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fe fddb 	bl	8002c3c <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800408a:	f7fe fdd7 	bl	8002c3c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e19c      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	4b46      	ldr	r3, [pc, #280]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4940      	ldr	r1, [pc, #256]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040be:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_RCC_OscConfig+0x2b0>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe fdba 	bl	8002c3c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040cc:	f7fe fdb6 	bl	8002c3c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e17b      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d030      	beq.n	8004158 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCC_OscConfig+0x2b4>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fe fd9a 	bl	8002c3c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410c:	f7fe fd96 	bl	8002c3c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e15b      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x200>
 800412a:	e015      	b.n	8004158 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412c:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x2b4>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fe fd83 	bl	8002c3c <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413a:	f7fe fd7f 	bl	8002c3c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e144      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800414e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a0 	beq.w	80042a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10f      	bne.n	8004196 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	6413      	str	r3, [r2, #64]	; 0x40
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_OscConfig+0x2b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d121      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <HAL_RCC_OscConfig+0x2b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <HAL_RCC_OscConfig+0x2b8>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ae:	f7fe fd45 	bl	8002c3c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	e011      	b.n	80041da <HAL_RCC_OscConfig+0x2ce>
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	42470000 	.word	0x42470000
 80041c0:	42470e80 	.word	0x42470e80
 80041c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fe fd38 	bl	8002c3c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0fd      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	4b81      	ldr	r3, [pc, #516]	; (80043e0 <HAL_RCC_OscConfig+0x4d4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x2f0>
 80041ee:	4b7d      	ldr	r3, [pc, #500]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	4a7c      	ldr	r2, [pc, #496]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	; 0x70
 80041fa:	e01c      	b.n	8004236 <HAL_RCC_OscConfig+0x32a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b05      	cmp	r3, #5
 8004202:	d10c      	bne.n	800421e <HAL_RCC_OscConfig+0x312>
 8004204:	4b77      	ldr	r3, [pc, #476]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a76      	ldr	r2, [pc, #472]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	4b74      	ldr	r3, [pc, #464]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a73      	ldr	r2, [pc, #460]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	e00b      	b.n	8004236 <HAL_RCC_OscConfig+0x32a>
 800421e:	4b71      	ldr	r3, [pc, #452]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a70      	ldr	r2, [pc, #448]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	4b6e      	ldr	r3, [pc, #440]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a6d      	ldr	r2, [pc, #436]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423e:	f7fe fcfd 	bl	8002c3c <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fe fcf9 	bl	8002c3c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0bc      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	4b61      	ldr	r3, [pc, #388]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ee      	beq.n	8004246 <HAL_RCC_OscConfig+0x33a>
 8004268:	e014      	b.n	8004294 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fe fce7 	bl	8002c3c <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fe fce3 	bl	8002c3c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0a6      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	4b56      	ldr	r3, [pc, #344]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429a:	4b52      	ldr	r3, [pc, #328]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a51      	ldr	r2, [pc, #324]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8092 	beq.w	80043d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b0:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d05c      	beq.n	8004376 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d141      	bne.n	8004348 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b48      	ldr	r3, [pc, #288]	; (80043e8 <HAL_RCC_OscConfig+0x4dc>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fe fcb7 	bl	8002c3c <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fe fcb3 	bl	8002c3c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e078      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e4:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	019b      	lsls	r3, r3, #6
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	3b01      	subs	r3, #1
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	4933      	ldr	r1, [pc, #204]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431a:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <HAL_RCC_OscConfig+0x4dc>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe fc8c 	bl	8002c3c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe fc88 	bl	8002c3c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e04d      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0x41c>
 8004346:	e045      	b.n	80043d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <HAL_RCC_OscConfig+0x4dc>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fe fc75 	bl	8002c3c <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004356:	f7fe fc71 	bl	8002c3c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e036      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004368:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x44a>
 8004374:	e02e      	b.n	80043d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e029      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_RCC_OscConfig+0x4d8>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	429a      	cmp	r2, r3
 8004394:	d11c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d115      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043aa:	4013      	ands	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10d      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d106      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40007000 	.word	0x40007000
 80043e4:	40023800 	.word	0x40023800
 80043e8:	42470060 	.word	0x42470060

080043ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0cc      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004400:	4b68      	ldr	r3, [pc, #416]	; (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d90c      	bls.n	8004428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b65      	ldr	r3, [pc, #404]	; (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b8      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004440:	4b59      	ldr	r3, [pc, #356]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a58      	ldr	r2, [pc, #352]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800444a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004458:	4b53      	ldr	r3, [pc, #332]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a52      	ldr	r2, [pc, #328]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004464:	4b50      	ldr	r3, [pc, #320]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	494d      	ldr	r1, [pc, #308]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d044      	beq.n	800450c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d119      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b3f      	ldr	r3, [pc, #252]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	4b3b      	ldr	r3, [pc, #236]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e067      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b37      	ldr	r3, [pc, #220]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4934      	ldr	r1, [pc, #208]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fe fbae 	bl	8002c3c <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fe fbaa 	bl	8002c3c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e04f      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 020c 	and.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1eb      	bne.n	80044e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d20c      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e032      	b.n	800459a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4916      	ldr	r1, [pc, #88]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455e:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490e      	ldr	r1, [pc, #56]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004572:	f000 f821 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004576:	4601      	mov	r1, r0
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	fa21 f303 	lsr.w	r3, r1, r3
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fb0e 	bl	8002bb4 <HAL_InitTick>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023c00 	.word	0x40023c00
 80045a8:	40023800 	.word	0x40023800
 80045ac:	080069c0 	.word	0x080069c0
 80045b0:	20000008 	.word	0x20000008
 80045b4:	2000000c 	.word	0x2000000c

080045b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	2300      	movs	r3, #0
 80045c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ce:	4b63      	ldr	r3, [pc, #396]	; (800475c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d007      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x32>
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d008      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x38>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 80b4 	bne.w	800474c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e4:	4b5e      	ldr	r3, [pc, #376]	; (8004760 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045e6:	60bb      	str	r3, [r7, #8]
       break;
 80045e8:	e0b3      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ea:	4b5e      	ldr	r3, [pc, #376]	; (8004764 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80045ec:	60bb      	str	r3, [r7, #8]
      break;
 80045ee:	e0b0      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f0:	4b5a      	ldr	r3, [pc, #360]	; (800475c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045fa:	4b58      	ldr	r3, [pc, #352]	; (800475c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04a      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004606:	4b55      	ldr	r3, [pc, #340]	; (800475c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	ea03 0501 	and.w	r5, r3, r1
 800461c:	ea04 0602 	and.w	r6, r4, r2
 8004620:	4629      	mov	r1, r5
 8004622:	4632      	mov	r2, r6
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	0154      	lsls	r4, r2, #5
 800462e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004632:	014b      	lsls	r3, r1, #5
 8004634:	4619      	mov	r1, r3
 8004636:	4622      	mov	r2, r4
 8004638:	1b49      	subs	r1, r1, r5
 800463a:	eb62 0206 	sbc.w	r2, r2, r6
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f04f 0400 	mov.w	r4, #0
 8004646:	0194      	lsls	r4, r2, #6
 8004648:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800464c:	018b      	lsls	r3, r1, #6
 800464e:	1a5b      	subs	r3, r3, r1
 8004650:	eb64 0402 	sbc.w	r4, r4, r2
 8004654:	f04f 0100 	mov.w	r1, #0
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	00e2      	lsls	r2, r4, #3
 800465e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004662:	00d9      	lsls	r1, r3, #3
 8004664:	460b      	mov	r3, r1
 8004666:	4614      	mov	r4, r2
 8004668:	195b      	adds	r3, r3, r5
 800466a:	eb44 0406 	adc.w	r4, r4, r6
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	0262      	lsls	r2, r4, #9
 8004678:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800467c:	0259      	lsls	r1, r3, #9
 800467e:	460b      	mov	r3, r1
 8004680:	4614      	mov	r4, r2
 8004682:	4618      	mov	r0, r3
 8004684:	4621      	mov	r1, r4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	461a      	mov	r2, r3
 800468e:	4623      	mov	r3, r4
 8004690:	f7fc faa4 	bl	8000bdc <__aeabi_uldivmod>
 8004694:	4603      	mov	r3, r0
 8004696:	460c      	mov	r4, r1
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e049      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469c:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	f04f 0400 	mov.w	r4, #0
 80046a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	ea03 0501 	and.w	r5, r3, r1
 80046b2:	ea04 0602 	and.w	r6, r4, r2
 80046b6:	4629      	mov	r1, r5
 80046b8:	4632      	mov	r2, r6
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	f04f 0400 	mov.w	r4, #0
 80046c2:	0154      	lsls	r4, r2, #5
 80046c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046c8:	014b      	lsls	r3, r1, #5
 80046ca:	4619      	mov	r1, r3
 80046cc:	4622      	mov	r2, r4
 80046ce:	1b49      	subs	r1, r1, r5
 80046d0:	eb62 0206 	sbc.w	r2, r2, r6
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	0194      	lsls	r4, r2, #6
 80046de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046e2:	018b      	lsls	r3, r1, #6
 80046e4:	1a5b      	subs	r3, r3, r1
 80046e6:	eb64 0402 	sbc.w	r4, r4, r2
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	00e2      	lsls	r2, r4, #3
 80046f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046f8:	00d9      	lsls	r1, r3, #3
 80046fa:	460b      	mov	r3, r1
 80046fc:	4614      	mov	r4, r2
 80046fe:	195b      	adds	r3, r3, r5
 8004700:	eb44 0406 	adc.w	r4, r4, r6
 8004704:	f04f 0100 	mov.w	r1, #0
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	02a2      	lsls	r2, r4, #10
 800470e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004712:	0299      	lsls	r1, r3, #10
 8004714:	460b      	mov	r3, r1
 8004716:	4614      	mov	r4, r2
 8004718:	4618      	mov	r0, r3
 800471a:	4621      	mov	r1, r4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f04f 0400 	mov.w	r4, #0
 8004722:	461a      	mov	r2, r3
 8004724:	4623      	mov	r3, r4
 8004726:	f7fc fa59 	bl	8000bdc <__aeabi_uldivmod>
 800472a:	4603      	mov	r3, r0
 800472c:	460c      	mov	r4, r1
 800472e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	60bb      	str	r3, [r7, #8]
      break;
 800474a:	e002      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4b04      	ldr	r3, [pc, #16]	; (8004760 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800474e:	60bb      	str	r3, [r7, #8]
      break;
 8004750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004752:	68bb      	ldr	r3, [r7, #8]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	00f42400 	.word	0x00f42400
 8004764:	007a1200 	.word	0x007a1200

08004768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e01d      	b.n	80047b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe f8ba 	bl	8002908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 fa40 	bl	8004c2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d007      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	f241 1311 	movw	r3, #4369	; 0x1111
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <HAL_TIM_Base_Stop_IT+0x48>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a1a      	ldr	r2, [r3, #32]
 8004834:	f240 4344 	movw	r3, #1092	; 0x444
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <HAL_TIM_Base_Stop_IT+0x48>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b02      	cmp	r3, #2
 8004870:	d122      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11b      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0202 	mvn.w	r2, #2
 8004888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f9a5 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f997 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f9a8 	bl	8004c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d122      	bne.n	800490c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d11b      	bne.n	800490c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0204 	mvn.w	r2, #4
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f97b 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f96d 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f97e 	bl	8004c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b08      	cmp	r3, #8
 8004918:	d122      	bne.n	8004960 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b08      	cmp	r3, #8
 8004926:	d11b      	bne.n	8004960 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0208 	mvn.w	r2, #8
 8004930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2204      	movs	r2, #4
 8004936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f951 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f943 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f954 	bl	8004c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d122      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b10      	cmp	r3, #16
 800497a:	d11b      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0210 	mvn.w	r2, #16
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2208      	movs	r2, #8
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f927 	bl	8004bee <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f919 	bl	8004bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f92a 	bl	8004c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d10e      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f06f 0201 	mvn.w	r2, #1
 80049d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fc fed8 	bl	8001790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	d10e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b80      	cmp	r3, #128	; 0x80
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fad0 	bl	8004fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8ef 	bl	8004c16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b20      	cmp	r3, #32
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0220 	mvn.w	r2, #32
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa9a 	bl	8004f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_TIM_ConfigClockSource+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e0a6      	b.n	8004bd2 <HAL_TIM_ConfigClockSource+0x166>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d067      	beq.n	8004b8c <HAL_TIM_ConfigClockSource+0x120>
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d80b      	bhi.n	8004ad8 <HAL_TIM_ConfigClockSource+0x6c>
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d073      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0x140>
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d802      	bhi.n	8004ace <HAL_TIM_ConfigClockSource+0x62>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d06f      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004acc:	e078      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d06c      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0x140>
 8004ad2:	2b30      	cmp	r3, #48	; 0x30
 8004ad4:	d06a      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ad6:	e073      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ad8:	2b70      	cmp	r3, #112	; 0x70
 8004ada:	d00d      	beq.n	8004af8 <HAL_TIM_ConfigClockSource+0x8c>
 8004adc:	2b70      	cmp	r3, #112	; 0x70
 8004ade:	d804      	bhi.n	8004aea <HAL_TIM_ConfigClockSource+0x7e>
 8004ae0:	2b50      	cmp	r3, #80	; 0x50
 8004ae2:	d033      	beq.n	8004b4c <HAL_TIM_ConfigClockSource+0xe0>
 8004ae4:	2b60      	cmp	r3, #96	; 0x60
 8004ae6:	d041      	beq.n	8004b6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ae8:	e06a      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	d066      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x152>
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af4:	d017      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004af6:	e063      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6899      	ldr	r1, [r3, #8]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f000 f9aa 	bl	8004e60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	609a      	str	r2, [r3, #8]
      break;
 8004b24:	e04c      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f000 f993 	bl	8004e60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b48:	609a      	str	r2, [r3, #8]
      break;
 8004b4a:	e039      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	6859      	ldr	r1, [r3, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f000 f907 	bl	8004d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2150      	movs	r1, #80	; 0x50
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f960 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 8004b6a:	e029      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f000 f926 	bl	8004dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2160      	movs	r1, #96	; 0x60
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f950 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 8004b8a:	e019      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f000 f8e7 	bl	8004d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2140      	movs	r1, #64	; 0x40
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f940 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 8004baa:	e009      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f000 f937 	bl	8004e2a <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e000      	b.n	8004bc0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a40      	ldr	r2, [pc, #256]	; (8004d40 <TIM_Base_SetConfig+0x114>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <TIM_Base_SetConfig+0x40>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d00f      	beq.n	8004c6c <TIM_Base_SetConfig+0x40>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a3d      	ldr	r2, [pc, #244]	; (8004d44 <TIM_Base_SetConfig+0x118>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <TIM_Base_SetConfig+0x40>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a3c      	ldr	r2, [pc, #240]	; (8004d48 <TIM_Base_SetConfig+0x11c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d007      	beq.n	8004c6c <TIM_Base_SetConfig+0x40>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a3b      	ldr	r2, [pc, #236]	; (8004d4c <TIM_Base_SetConfig+0x120>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0x40>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a3a      	ldr	r2, [pc, #232]	; (8004d50 <TIM_Base_SetConfig+0x124>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d108      	bne.n	8004c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2f      	ldr	r2, [pc, #188]	; (8004d40 <TIM_Base_SetConfig+0x114>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d02b      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8c:	d027      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <TIM_Base_SetConfig+0x118>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d023      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <TIM_Base_SetConfig+0x11c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01f      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <TIM_Base_SetConfig+0x120>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01b      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a29      	ldr	r2, [pc, #164]	; (8004d50 <TIM_Base_SetConfig+0x124>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d017      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a28      	ldr	r2, [pc, #160]	; (8004d54 <TIM_Base_SetConfig+0x128>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a27      	ldr	r2, [pc, #156]	; (8004d58 <TIM_Base_SetConfig+0x12c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00f      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <TIM_Base_SetConfig+0x130>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <TIM_Base_SetConfig+0x134>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <TIM_Base_SetConfig+0x138>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <TIM_Base_SetConfig+0x13c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d108      	bne.n	8004cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <TIM_Base_SetConfig+0x114>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_Base_SetConfig+0xf8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <TIM_Base_SetConfig+0x124>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d103      	bne.n	8004d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	615a      	str	r2, [r3, #20]
}
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800
 8004d60:	40001800 	.word	0x40001800
 8004d64:	40001c00 	.word	0x40001c00
 8004d68:	40002000 	.word	0x40002000

08004d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f023 0201 	bic.w	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 030a 	bic.w	r3, r3, #10
 8004da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	bf00      	nop
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0210 	bic.w	r2, r3, #16
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f043 0307 	orr.w	r3, r3, #7
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	021a      	lsls	r2, r3, #8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e05a      	b.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d01d      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10c      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40001800 	.word	0x40001800

08004f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	; (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000014 	.word	0x20000014

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4e0d      	ldr	r6, [pc, #52]	; (8005004 <__libc_init_array+0x38>)
 8004fd0:	4c0d      	ldr	r4, [pc, #52]	; (8005008 <__libc_init_array+0x3c>)
 8004fd2:	1ba4      	subs	r4, r4, r6
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	2500      	movs	r5, #0
 8004fd8:	42a5      	cmp	r5, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	4e0b      	ldr	r6, [pc, #44]	; (800500c <__libc_init_array+0x40>)
 8004fde:	4c0c      	ldr	r4, [pc, #48]	; (8005010 <__libc_init_array+0x44>)
 8004fe0:	f001 fc48 	bl	8006874 <_init>
 8004fe4:	1ba4      	subs	r4, r4, r6
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	2500      	movs	r5, #0
 8004fea:	42a5      	cmp	r5, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff4:	4798      	blx	r3
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ffe:	4798      	blx	r3
 8005000:	3501      	adds	r5, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08006bf0 	.word	0x08006bf0
 8005008:	08006bf0 	.word	0x08006bf0
 800500c:	08006bf0 	.word	0x08006bf0
 8005010:	08006bf4 	.word	0x08006bf4

08005014 <memset>:
 8005014:	4402      	add	r2, r0
 8005016:	4603      	mov	r3, r0
 8005018:	4293      	cmp	r3, r2
 800501a:	d100      	bne.n	800501e <memset+0xa>
 800501c:	4770      	bx	lr
 800501e:	f803 1b01 	strb.w	r1, [r3], #1
 8005022:	e7f9      	b.n	8005018 <memset+0x4>

08005024 <siprintf>:
 8005024:	b40e      	push	{r1, r2, r3}
 8005026:	b500      	push	{lr}
 8005028:	b09c      	sub	sp, #112	; 0x70
 800502a:	ab1d      	add	r3, sp, #116	; 0x74
 800502c:	9002      	str	r0, [sp, #8]
 800502e:	9006      	str	r0, [sp, #24]
 8005030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005034:	4809      	ldr	r0, [pc, #36]	; (800505c <siprintf+0x38>)
 8005036:	9107      	str	r1, [sp, #28]
 8005038:	9104      	str	r1, [sp, #16]
 800503a:	4909      	ldr	r1, [pc, #36]	; (8005060 <siprintf+0x3c>)
 800503c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005040:	9105      	str	r1, [sp, #20]
 8005042:	6800      	ldr	r0, [r0, #0]
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	a902      	add	r1, sp, #8
 8005048:	f000 f876 	bl	8005138 <_svfiprintf_r>
 800504c:	9b02      	ldr	r3, [sp, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	b01c      	add	sp, #112	; 0x70
 8005054:	f85d eb04 	ldr.w	lr, [sp], #4
 8005058:	b003      	add	sp, #12
 800505a:	4770      	bx	lr
 800505c:	20000014 	.word	0x20000014
 8005060:	ffff0208 	.word	0xffff0208

08005064 <strcat>:
 8005064:	b510      	push	{r4, lr}
 8005066:	4603      	mov	r3, r0
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	1c5c      	adds	r4, r3, #1
 800506c:	b93a      	cbnz	r2, 800507e <strcat+0x1a>
 800506e:	3b01      	subs	r3, #1
 8005070:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005074:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005078:	2a00      	cmp	r2, #0
 800507a:	d1f9      	bne.n	8005070 <strcat+0xc>
 800507c:	bd10      	pop	{r4, pc}
 800507e:	4623      	mov	r3, r4
 8005080:	e7f2      	b.n	8005068 <strcat+0x4>

08005082 <__ssputs_r>:
 8005082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005086:	688e      	ldr	r6, [r1, #8]
 8005088:	429e      	cmp	r6, r3
 800508a:	4682      	mov	sl, r0
 800508c:	460c      	mov	r4, r1
 800508e:	4690      	mov	r8, r2
 8005090:	4699      	mov	r9, r3
 8005092:	d837      	bhi.n	8005104 <__ssputs_r+0x82>
 8005094:	898a      	ldrh	r2, [r1, #12]
 8005096:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800509a:	d031      	beq.n	8005100 <__ssputs_r+0x7e>
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	6909      	ldr	r1, [r1, #16]
 80050a0:	1a6f      	subs	r7, r5, r1
 80050a2:	6965      	ldr	r5, [r4, #20]
 80050a4:	2302      	movs	r3, #2
 80050a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050aa:	fb95 f5f3 	sdiv	r5, r5, r3
 80050ae:	f109 0301 	add.w	r3, r9, #1
 80050b2:	443b      	add	r3, r7
 80050b4:	429d      	cmp	r5, r3
 80050b6:	bf38      	it	cc
 80050b8:	461d      	movcc	r5, r3
 80050ba:	0553      	lsls	r3, r2, #21
 80050bc:	d530      	bpl.n	8005120 <__ssputs_r+0x9e>
 80050be:	4629      	mov	r1, r5
 80050c0:	f000 fb2c 	bl	800571c <_malloc_r>
 80050c4:	4606      	mov	r6, r0
 80050c6:	b950      	cbnz	r0, 80050de <__ssputs_r+0x5c>
 80050c8:	230c      	movs	r3, #12
 80050ca:	f8ca 3000 	str.w	r3, [sl]
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	f04f 30ff 	mov.w	r0, #4294967295
 80050da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050de:	463a      	mov	r2, r7
 80050e0:	6921      	ldr	r1, [r4, #16]
 80050e2:	f000 faa9 	bl	8005638 <memcpy>
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	6126      	str	r6, [r4, #16]
 80050f4:	6165      	str	r5, [r4, #20]
 80050f6:	443e      	add	r6, r7
 80050f8:	1bed      	subs	r5, r5, r7
 80050fa:	6026      	str	r6, [r4, #0]
 80050fc:	60a5      	str	r5, [r4, #8]
 80050fe:	464e      	mov	r6, r9
 8005100:	454e      	cmp	r6, r9
 8005102:	d900      	bls.n	8005106 <__ssputs_r+0x84>
 8005104:	464e      	mov	r6, r9
 8005106:	4632      	mov	r2, r6
 8005108:	4641      	mov	r1, r8
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	f000 fa9f 	bl	800564e <memmove>
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	1b9b      	subs	r3, r3, r6
 8005114:	60a3      	str	r3, [r4, #8]
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	441e      	add	r6, r3
 800511a:	6026      	str	r6, [r4, #0]
 800511c:	2000      	movs	r0, #0
 800511e:	e7dc      	b.n	80050da <__ssputs_r+0x58>
 8005120:	462a      	mov	r2, r5
 8005122:	f000 fb55 	bl	80057d0 <_realloc_r>
 8005126:	4606      	mov	r6, r0
 8005128:	2800      	cmp	r0, #0
 800512a:	d1e2      	bne.n	80050f2 <__ssputs_r+0x70>
 800512c:	6921      	ldr	r1, [r4, #16]
 800512e:	4650      	mov	r0, sl
 8005130:	f000 faa6 	bl	8005680 <_free_r>
 8005134:	e7c8      	b.n	80050c8 <__ssputs_r+0x46>
	...

08005138 <_svfiprintf_r>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	461d      	mov	r5, r3
 800513e:	898b      	ldrh	r3, [r1, #12]
 8005140:	061f      	lsls	r7, r3, #24
 8005142:	b09d      	sub	sp, #116	; 0x74
 8005144:	4680      	mov	r8, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4616      	mov	r6, r2
 800514a:	d50f      	bpl.n	800516c <_svfiprintf_r+0x34>
 800514c:	690b      	ldr	r3, [r1, #16]
 800514e:	b96b      	cbnz	r3, 800516c <_svfiprintf_r+0x34>
 8005150:	2140      	movs	r1, #64	; 0x40
 8005152:	f000 fae3 	bl	800571c <_malloc_r>
 8005156:	6020      	str	r0, [r4, #0]
 8005158:	6120      	str	r0, [r4, #16]
 800515a:	b928      	cbnz	r0, 8005168 <_svfiprintf_r+0x30>
 800515c:	230c      	movs	r3, #12
 800515e:	f8c8 3000 	str.w	r3, [r8]
 8005162:	f04f 30ff 	mov.w	r0, #4294967295
 8005166:	e0c8      	b.n	80052fa <_svfiprintf_r+0x1c2>
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	6163      	str	r3, [r4, #20]
 800516c:	2300      	movs	r3, #0
 800516e:	9309      	str	r3, [sp, #36]	; 0x24
 8005170:	2320      	movs	r3, #32
 8005172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005176:	2330      	movs	r3, #48	; 0x30
 8005178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800517c:	9503      	str	r5, [sp, #12]
 800517e:	f04f 0b01 	mov.w	fp, #1
 8005182:	4637      	mov	r7, r6
 8005184:	463d      	mov	r5, r7
 8005186:	f815 3b01 	ldrb.w	r3, [r5], #1
 800518a:	b10b      	cbz	r3, 8005190 <_svfiprintf_r+0x58>
 800518c:	2b25      	cmp	r3, #37	; 0x25
 800518e:	d13e      	bne.n	800520e <_svfiprintf_r+0xd6>
 8005190:	ebb7 0a06 	subs.w	sl, r7, r6
 8005194:	d00b      	beq.n	80051ae <_svfiprintf_r+0x76>
 8005196:	4653      	mov	r3, sl
 8005198:	4632      	mov	r2, r6
 800519a:	4621      	mov	r1, r4
 800519c:	4640      	mov	r0, r8
 800519e:	f7ff ff70 	bl	8005082 <__ssputs_r>
 80051a2:	3001      	adds	r0, #1
 80051a4:	f000 80a4 	beq.w	80052f0 <_svfiprintf_r+0x1b8>
 80051a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051aa:	4453      	add	r3, sl
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	783b      	ldrb	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 809d 	beq.w	80052f0 <_svfiprintf_r+0x1b8>
 80051b6:	2300      	movs	r3, #0
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051c0:	9304      	str	r3, [sp, #16]
 80051c2:	9307      	str	r3, [sp, #28]
 80051c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051c8:	931a      	str	r3, [sp, #104]	; 0x68
 80051ca:	462f      	mov	r7, r5
 80051cc:	2205      	movs	r2, #5
 80051ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051d2:	4850      	ldr	r0, [pc, #320]	; (8005314 <_svfiprintf_r+0x1dc>)
 80051d4:	f7fb f814 	bl	8000200 <memchr>
 80051d8:	9b04      	ldr	r3, [sp, #16]
 80051da:	b9d0      	cbnz	r0, 8005212 <_svfiprintf_r+0xda>
 80051dc:	06d9      	lsls	r1, r3, #27
 80051de:	bf44      	itt	mi
 80051e0:	2220      	movmi	r2, #32
 80051e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051e6:	071a      	lsls	r2, r3, #28
 80051e8:	bf44      	itt	mi
 80051ea:	222b      	movmi	r2, #43	; 0x2b
 80051ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051f0:	782a      	ldrb	r2, [r5, #0]
 80051f2:	2a2a      	cmp	r2, #42	; 0x2a
 80051f4:	d015      	beq.n	8005222 <_svfiprintf_r+0xea>
 80051f6:	9a07      	ldr	r2, [sp, #28]
 80051f8:	462f      	mov	r7, r5
 80051fa:	2000      	movs	r0, #0
 80051fc:	250a      	movs	r5, #10
 80051fe:	4639      	mov	r1, r7
 8005200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005204:	3b30      	subs	r3, #48	; 0x30
 8005206:	2b09      	cmp	r3, #9
 8005208:	d94d      	bls.n	80052a6 <_svfiprintf_r+0x16e>
 800520a:	b1b8      	cbz	r0, 800523c <_svfiprintf_r+0x104>
 800520c:	e00f      	b.n	800522e <_svfiprintf_r+0xf6>
 800520e:	462f      	mov	r7, r5
 8005210:	e7b8      	b.n	8005184 <_svfiprintf_r+0x4c>
 8005212:	4a40      	ldr	r2, [pc, #256]	; (8005314 <_svfiprintf_r+0x1dc>)
 8005214:	1a80      	subs	r0, r0, r2
 8005216:	fa0b f000 	lsl.w	r0, fp, r0
 800521a:	4318      	orrs	r0, r3
 800521c:	9004      	str	r0, [sp, #16]
 800521e:	463d      	mov	r5, r7
 8005220:	e7d3      	b.n	80051ca <_svfiprintf_r+0x92>
 8005222:	9a03      	ldr	r2, [sp, #12]
 8005224:	1d11      	adds	r1, r2, #4
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	9103      	str	r1, [sp, #12]
 800522a:	2a00      	cmp	r2, #0
 800522c:	db01      	blt.n	8005232 <_svfiprintf_r+0xfa>
 800522e:	9207      	str	r2, [sp, #28]
 8005230:	e004      	b.n	800523c <_svfiprintf_r+0x104>
 8005232:	4252      	negs	r2, r2
 8005234:	f043 0302 	orr.w	r3, r3, #2
 8005238:	9207      	str	r2, [sp, #28]
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	783b      	ldrb	r3, [r7, #0]
 800523e:	2b2e      	cmp	r3, #46	; 0x2e
 8005240:	d10c      	bne.n	800525c <_svfiprintf_r+0x124>
 8005242:	787b      	ldrb	r3, [r7, #1]
 8005244:	2b2a      	cmp	r3, #42	; 0x2a
 8005246:	d133      	bne.n	80052b0 <_svfiprintf_r+0x178>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	1d1a      	adds	r2, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9203      	str	r2, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfb8      	it	lt
 8005254:	f04f 33ff 	movlt.w	r3, #4294967295
 8005258:	3702      	adds	r7, #2
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	4d2e      	ldr	r5, [pc, #184]	; (8005318 <_svfiprintf_r+0x1e0>)
 800525e:	7839      	ldrb	r1, [r7, #0]
 8005260:	2203      	movs	r2, #3
 8005262:	4628      	mov	r0, r5
 8005264:	f7fa ffcc 	bl	8000200 <memchr>
 8005268:	b138      	cbz	r0, 800527a <_svfiprintf_r+0x142>
 800526a:	2340      	movs	r3, #64	; 0x40
 800526c:	1b40      	subs	r0, r0, r5
 800526e:	fa03 f000 	lsl.w	r0, r3, r0
 8005272:	9b04      	ldr	r3, [sp, #16]
 8005274:	4303      	orrs	r3, r0
 8005276:	3701      	adds	r7, #1
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	7839      	ldrb	r1, [r7, #0]
 800527c:	4827      	ldr	r0, [pc, #156]	; (800531c <_svfiprintf_r+0x1e4>)
 800527e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005282:	2206      	movs	r2, #6
 8005284:	1c7e      	adds	r6, r7, #1
 8005286:	f7fa ffbb 	bl	8000200 <memchr>
 800528a:	2800      	cmp	r0, #0
 800528c:	d038      	beq.n	8005300 <_svfiprintf_r+0x1c8>
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <_svfiprintf_r+0x1e8>)
 8005290:	bb13      	cbnz	r3, 80052d8 <_svfiprintf_r+0x1a0>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	3307      	adds	r3, #7
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	3308      	adds	r3, #8
 800529c:	9303      	str	r3, [sp, #12]
 800529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a0:	444b      	add	r3, r9
 80052a2:	9309      	str	r3, [sp, #36]	; 0x24
 80052a4:	e76d      	b.n	8005182 <_svfiprintf_r+0x4a>
 80052a6:	fb05 3202 	mla	r2, r5, r2, r3
 80052aa:	2001      	movs	r0, #1
 80052ac:	460f      	mov	r7, r1
 80052ae:	e7a6      	b.n	80051fe <_svfiprintf_r+0xc6>
 80052b0:	2300      	movs	r3, #0
 80052b2:	3701      	adds	r7, #1
 80052b4:	9305      	str	r3, [sp, #20]
 80052b6:	4619      	mov	r1, r3
 80052b8:	250a      	movs	r5, #10
 80052ba:	4638      	mov	r0, r7
 80052bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c0:	3a30      	subs	r2, #48	; 0x30
 80052c2:	2a09      	cmp	r2, #9
 80052c4:	d903      	bls.n	80052ce <_svfiprintf_r+0x196>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0c8      	beq.n	800525c <_svfiprintf_r+0x124>
 80052ca:	9105      	str	r1, [sp, #20]
 80052cc:	e7c6      	b.n	800525c <_svfiprintf_r+0x124>
 80052ce:	fb05 2101 	mla	r1, r5, r1, r2
 80052d2:	2301      	movs	r3, #1
 80052d4:	4607      	mov	r7, r0
 80052d6:	e7f0      	b.n	80052ba <_svfiprintf_r+0x182>
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	4622      	mov	r2, r4
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <_svfiprintf_r+0x1ec>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4640      	mov	r0, r8
 80052e4:	f3af 8000 	nop.w
 80052e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80052ec:	4681      	mov	r9, r0
 80052ee:	d1d6      	bne.n	800529e <_svfiprintf_r+0x166>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	065b      	lsls	r3, r3, #25
 80052f4:	f53f af35 	bmi.w	8005162 <_svfiprintf_r+0x2a>
 80052f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052fa:	b01d      	add	sp, #116	; 0x74
 80052fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005300:	ab03      	add	r3, sp, #12
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	4622      	mov	r2, r4
 8005306:	4b07      	ldr	r3, [pc, #28]	; (8005324 <_svfiprintf_r+0x1ec>)
 8005308:	a904      	add	r1, sp, #16
 800530a:	4640      	mov	r0, r8
 800530c:	f000 f882 	bl	8005414 <_printf_i>
 8005310:	e7ea      	b.n	80052e8 <_svfiprintf_r+0x1b0>
 8005312:	bf00      	nop
 8005314:	080069d8 	.word	0x080069d8
 8005318:	080069de 	.word	0x080069de
 800531c:	080069e2 	.word	0x080069e2
 8005320:	00000000 	.word	0x00000000
 8005324:	08005083 	.word	0x08005083

08005328 <_printf_common>:
 8005328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	4691      	mov	r9, r2
 800532e:	461f      	mov	r7, r3
 8005330:	688a      	ldr	r2, [r1, #8]
 8005332:	690b      	ldr	r3, [r1, #16]
 8005334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005338:	4293      	cmp	r3, r2
 800533a:	bfb8      	it	lt
 800533c:	4613      	movlt	r3, r2
 800533e:	f8c9 3000 	str.w	r3, [r9]
 8005342:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005346:	4606      	mov	r6, r0
 8005348:	460c      	mov	r4, r1
 800534a:	b112      	cbz	r2, 8005352 <_printf_common+0x2a>
 800534c:	3301      	adds	r3, #1
 800534e:	f8c9 3000 	str.w	r3, [r9]
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	0699      	lsls	r1, r3, #26
 8005356:	bf42      	ittt	mi
 8005358:	f8d9 3000 	ldrmi.w	r3, [r9]
 800535c:	3302      	addmi	r3, #2
 800535e:	f8c9 3000 	strmi.w	r3, [r9]
 8005362:	6825      	ldr	r5, [r4, #0]
 8005364:	f015 0506 	ands.w	r5, r5, #6
 8005368:	d107      	bne.n	800537a <_printf_common+0x52>
 800536a:	f104 0a19 	add.w	sl, r4, #25
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	f8d9 2000 	ldr.w	r2, [r9]
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	42ab      	cmp	r3, r5
 8005378:	dc28      	bgt.n	80053cc <_printf_common+0xa4>
 800537a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	3300      	adds	r3, #0
 8005382:	bf18      	it	ne
 8005384:	2301      	movne	r3, #1
 8005386:	0692      	lsls	r2, r2, #26
 8005388:	d42d      	bmi.n	80053e6 <_printf_common+0xbe>
 800538a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800538e:	4639      	mov	r1, r7
 8005390:	4630      	mov	r0, r6
 8005392:	47c0      	blx	r8
 8005394:	3001      	adds	r0, #1
 8005396:	d020      	beq.n	80053da <_printf_common+0xb2>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	68e5      	ldr	r5, [r4, #12]
 800539c:	f8d9 2000 	ldr.w	r2, [r9]
 80053a0:	f003 0306 	and.w	r3, r3, #6
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	bf08      	it	eq
 80053a8:	1aad      	subeq	r5, r5, r2
 80053aa:	68a3      	ldr	r3, [r4, #8]
 80053ac:	6922      	ldr	r2, [r4, #16]
 80053ae:	bf0c      	ite	eq
 80053b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053b4:	2500      	movne	r5, #0
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bfc4      	itt	gt
 80053ba:	1a9b      	subgt	r3, r3, r2
 80053bc:	18ed      	addgt	r5, r5, r3
 80053be:	f04f 0900 	mov.w	r9, #0
 80053c2:	341a      	adds	r4, #26
 80053c4:	454d      	cmp	r5, r9
 80053c6:	d11a      	bne.n	80053fe <_printf_common+0xd6>
 80053c8:	2000      	movs	r0, #0
 80053ca:	e008      	b.n	80053de <_printf_common+0xb6>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4652      	mov	r2, sl
 80053d0:	4639      	mov	r1, r7
 80053d2:	4630      	mov	r0, r6
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d103      	bne.n	80053e2 <_printf_common+0xba>
 80053da:	f04f 30ff 	mov.w	r0, #4294967295
 80053de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e2:	3501      	adds	r5, #1
 80053e4:	e7c3      	b.n	800536e <_printf_common+0x46>
 80053e6:	18e1      	adds	r1, r4, r3
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	2030      	movs	r0, #48	; 0x30
 80053ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f0:	4422      	add	r2, r4
 80053f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053fa:	3302      	adds	r3, #2
 80053fc:	e7c5      	b.n	800538a <_printf_common+0x62>
 80053fe:	2301      	movs	r3, #1
 8005400:	4622      	mov	r2, r4
 8005402:	4639      	mov	r1, r7
 8005404:	4630      	mov	r0, r6
 8005406:	47c0      	blx	r8
 8005408:	3001      	adds	r0, #1
 800540a:	d0e6      	beq.n	80053da <_printf_common+0xb2>
 800540c:	f109 0901 	add.w	r9, r9, #1
 8005410:	e7d8      	b.n	80053c4 <_printf_common+0x9c>
	...

08005414 <_printf_i>:
 8005414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005418:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800541c:	460c      	mov	r4, r1
 800541e:	7e09      	ldrb	r1, [r1, #24]
 8005420:	b085      	sub	sp, #20
 8005422:	296e      	cmp	r1, #110	; 0x6e
 8005424:	4617      	mov	r7, r2
 8005426:	4606      	mov	r6, r0
 8005428:	4698      	mov	r8, r3
 800542a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800542c:	f000 80b3 	beq.w	8005596 <_printf_i+0x182>
 8005430:	d822      	bhi.n	8005478 <_printf_i+0x64>
 8005432:	2963      	cmp	r1, #99	; 0x63
 8005434:	d036      	beq.n	80054a4 <_printf_i+0x90>
 8005436:	d80a      	bhi.n	800544e <_printf_i+0x3a>
 8005438:	2900      	cmp	r1, #0
 800543a:	f000 80b9 	beq.w	80055b0 <_printf_i+0x19c>
 800543e:	2958      	cmp	r1, #88	; 0x58
 8005440:	f000 8083 	beq.w	800554a <_printf_i+0x136>
 8005444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005448:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800544c:	e032      	b.n	80054b4 <_printf_i+0xa0>
 800544e:	2964      	cmp	r1, #100	; 0x64
 8005450:	d001      	beq.n	8005456 <_printf_i+0x42>
 8005452:	2969      	cmp	r1, #105	; 0x69
 8005454:	d1f6      	bne.n	8005444 <_printf_i+0x30>
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	6813      	ldr	r3, [r2, #0]
 800545a:	0605      	lsls	r5, r0, #24
 800545c:	f103 0104 	add.w	r1, r3, #4
 8005460:	d52a      	bpl.n	80054b8 <_printf_i+0xa4>
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	da03      	bge.n	8005472 <_printf_i+0x5e>
 800546a:	222d      	movs	r2, #45	; 0x2d
 800546c:	425b      	negs	r3, r3
 800546e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005472:	486f      	ldr	r0, [pc, #444]	; (8005630 <_printf_i+0x21c>)
 8005474:	220a      	movs	r2, #10
 8005476:	e039      	b.n	80054ec <_printf_i+0xd8>
 8005478:	2973      	cmp	r1, #115	; 0x73
 800547a:	f000 809d 	beq.w	80055b8 <_printf_i+0x1a4>
 800547e:	d808      	bhi.n	8005492 <_printf_i+0x7e>
 8005480:	296f      	cmp	r1, #111	; 0x6f
 8005482:	d020      	beq.n	80054c6 <_printf_i+0xb2>
 8005484:	2970      	cmp	r1, #112	; 0x70
 8005486:	d1dd      	bne.n	8005444 <_printf_i+0x30>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	f043 0320 	orr.w	r3, r3, #32
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	e003      	b.n	800549a <_printf_i+0x86>
 8005492:	2975      	cmp	r1, #117	; 0x75
 8005494:	d017      	beq.n	80054c6 <_printf_i+0xb2>
 8005496:	2978      	cmp	r1, #120	; 0x78
 8005498:	d1d4      	bne.n	8005444 <_printf_i+0x30>
 800549a:	2378      	movs	r3, #120	; 0x78
 800549c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054a0:	4864      	ldr	r0, [pc, #400]	; (8005634 <_printf_i+0x220>)
 80054a2:	e055      	b.n	8005550 <_printf_i+0x13c>
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	1d19      	adds	r1, r3, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6011      	str	r1, [r2, #0]
 80054ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054b4:	2301      	movs	r3, #1
 80054b6:	e08c      	b.n	80055d2 <_printf_i+0x1be>
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6011      	str	r1, [r2, #0]
 80054bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054c0:	bf18      	it	ne
 80054c2:	b21b      	sxthne	r3, r3
 80054c4:	e7cf      	b.n	8005466 <_printf_i+0x52>
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	6825      	ldr	r5, [r4, #0]
 80054ca:	1d18      	adds	r0, r3, #4
 80054cc:	6010      	str	r0, [r2, #0]
 80054ce:	0628      	lsls	r0, r5, #24
 80054d0:	d501      	bpl.n	80054d6 <_printf_i+0xc2>
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	e002      	b.n	80054dc <_printf_i+0xc8>
 80054d6:	0668      	lsls	r0, r5, #25
 80054d8:	d5fb      	bpl.n	80054d2 <_printf_i+0xbe>
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	4854      	ldr	r0, [pc, #336]	; (8005630 <_printf_i+0x21c>)
 80054de:	296f      	cmp	r1, #111	; 0x6f
 80054e0:	bf14      	ite	ne
 80054e2:	220a      	movne	r2, #10
 80054e4:	2208      	moveq	r2, #8
 80054e6:	2100      	movs	r1, #0
 80054e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ec:	6865      	ldr	r5, [r4, #4]
 80054ee:	60a5      	str	r5, [r4, #8]
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	f2c0 8095 	blt.w	8005620 <_printf_i+0x20c>
 80054f6:	6821      	ldr	r1, [r4, #0]
 80054f8:	f021 0104 	bic.w	r1, r1, #4
 80054fc:	6021      	str	r1, [r4, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d13d      	bne.n	800557e <_printf_i+0x16a>
 8005502:	2d00      	cmp	r5, #0
 8005504:	f040 808e 	bne.w	8005624 <_printf_i+0x210>
 8005508:	4665      	mov	r5, ip
 800550a:	2a08      	cmp	r2, #8
 800550c:	d10b      	bne.n	8005526 <_printf_i+0x112>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	07db      	lsls	r3, r3, #31
 8005512:	d508      	bpl.n	8005526 <_printf_i+0x112>
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	6862      	ldr	r2, [r4, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	bfde      	ittt	le
 800551c:	2330      	movle	r3, #48	; 0x30
 800551e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005526:	ebac 0305 	sub.w	r3, ip, r5
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	f8cd 8000 	str.w	r8, [sp]
 8005530:	463b      	mov	r3, r7
 8005532:	aa03      	add	r2, sp, #12
 8005534:	4621      	mov	r1, r4
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff fef6 	bl	8005328 <_printf_common>
 800553c:	3001      	adds	r0, #1
 800553e:	d14d      	bne.n	80055dc <_printf_i+0x1c8>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	b005      	add	sp, #20
 8005546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800554a:	4839      	ldr	r0, [pc, #228]	; (8005630 <_printf_i+0x21c>)
 800554c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	6821      	ldr	r1, [r4, #0]
 8005554:	1d1d      	adds	r5, r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6015      	str	r5, [r2, #0]
 800555a:	060a      	lsls	r2, r1, #24
 800555c:	d50b      	bpl.n	8005576 <_printf_i+0x162>
 800555e:	07ca      	lsls	r2, r1, #31
 8005560:	bf44      	itt	mi
 8005562:	f041 0120 	orrmi.w	r1, r1, #32
 8005566:	6021      	strmi	r1, [r4, #0]
 8005568:	b91b      	cbnz	r3, 8005572 <_printf_i+0x15e>
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	f022 0220 	bic.w	r2, r2, #32
 8005570:	6022      	str	r2, [r4, #0]
 8005572:	2210      	movs	r2, #16
 8005574:	e7b7      	b.n	80054e6 <_printf_i+0xd2>
 8005576:	064d      	lsls	r5, r1, #25
 8005578:	bf48      	it	mi
 800557a:	b29b      	uxthmi	r3, r3
 800557c:	e7ef      	b.n	800555e <_printf_i+0x14a>
 800557e:	4665      	mov	r5, ip
 8005580:	fbb3 f1f2 	udiv	r1, r3, r2
 8005584:	fb02 3311 	mls	r3, r2, r1, r3
 8005588:	5cc3      	ldrb	r3, [r0, r3]
 800558a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800558e:	460b      	mov	r3, r1
 8005590:	2900      	cmp	r1, #0
 8005592:	d1f5      	bne.n	8005580 <_printf_i+0x16c>
 8005594:	e7b9      	b.n	800550a <_printf_i+0xf6>
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	6825      	ldr	r5, [r4, #0]
 800559a:	6961      	ldr	r1, [r4, #20]
 800559c:	1d18      	adds	r0, r3, #4
 800559e:	6010      	str	r0, [r2, #0]
 80055a0:	0628      	lsls	r0, r5, #24
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	d501      	bpl.n	80055aa <_printf_i+0x196>
 80055a6:	6019      	str	r1, [r3, #0]
 80055a8:	e002      	b.n	80055b0 <_printf_i+0x19c>
 80055aa:	066a      	lsls	r2, r5, #25
 80055ac:	d5fb      	bpl.n	80055a6 <_printf_i+0x192>
 80055ae:	8019      	strh	r1, [r3, #0]
 80055b0:	2300      	movs	r3, #0
 80055b2:	6123      	str	r3, [r4, #16]
 80055b4:	4665      	mov	r5, ip
 80055b6:	e7b9      	b.n	800552c <_printf_i+0x118>
 80055b8:	6813      	ldr	r3, [r2, #0]
 80055ba:	1d19      	adds	r1, r3, #4
 80055bc:	6011      	str	r1, [r2, #0]
 80055be:	681d      	ldr	r5, [r3, #0]
 80055c0:	6862      	ldr	r2, [r4, #4]
 80055c2:	2100      	movs	r1, #0
 80055c4:	4628      	mov	r0, r5
 80055c6:	f7fa fe1b 	bl	8000200 <memchr>
 80055ca:	b108      	cbz	r0, 80055d0 <_printf_i+0x1bc>
 80055cc:	1b40      	subs	r0, r0, r5
 80055ce:	6060      	str	r0, [r4, #4]
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	6123      	str	r3, [r4, #16]
 80055d4:	2300      	movs	r3, #0
 80055d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055da:	e7a7      	b.n	800552c <_printf_i+0x118>
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	462a      	mov	r2, r5
 80055e0:	4639      	mov	r1, r7
 80055e2:	4630      	mov	r0, r6
 80055e4:	47c0      	blx	r8
 80055e6:	3001      	adds	r0, #1
 80055e8:	d0aa      	beq.n	8005540 <_printf_i+0x12c>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	079b      	lsls	r3, r3, #30
 80055ee:	d413      	bmi.n	8005618 <_printf_i+0x204>
 80055f0:	68e0      	ldr	r0, [r4, #12]
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	4298      	cmp	r0, r3
 80055f6:	bfb8      	it	lt
 80055f8:	4618      	movlt	r0, r3
 80055fa:	e7a3      	b.n	8005544 <_printf_i+0x130>
 80055fc:	2301      	movs	r3, #1
 80055fe:	464a      	mov	r2, r9
 8005600:	4639      	mov	r1, r7
 8005602:	4630      	mov	r0, r6
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d09a      	beq.n	8005540 <_printf_i+0x12c>
 800560a:	3501      	adds	r5, #1
 800560c:	68e3      	ldr	r3, [r4, #12]
 800560e:	9a03      	ldr	r2, [sp, #12]
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	42ab      	cmp	r3, r5
 8005614:	dcf2      	bgt.n	80055fc <_printf_i+0x1e8>
 8005616:	e7eb      	b.n	80055f0 <_printf_i+0x1dc>
 8005618:	2500      	movs	r5, #0
 800561a:	f104 0919 	add.w	r9, r4, #25
 800561e:	e7f5      	b.n	800560c <_printf_i+0x1f8>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ac      	bne.n	800557e <_printf_i+0x16a>
 8005624:	7803      	ldrb	r3, [r0, #0]
 8005626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800562a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800562e:	e76c      	b.n	800550a <_printf_i+0xf6>
 8005630:	080069e9 	.word	0x080069e9
 8005634:	080069fa 	.word	0x080069fa

08005638 <memcpy>:
 8005638:	b510      	push	{r4, lr}
 800563a:	1e43      	subs	r3, r0, #1
 800563c:	440a      	add	r2, r1
 800563e:	4291      	cmp	r1, r2
 8005640:	d100      	bne.n	8005644 <memcpy+0xc>
 8005642:	bd10      	pop	{r4, pc}
 8005644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800564c:	e7f7      	b.n	800563e <memcpy+0x6>

0800564e <memmove>:
 800564e:	4288      	cmp	r0, r1
 8005650:	b510      	push	{r4, lr}
 8005652:	eb01 0302 	add.w	r3, r1, r2
 8005656:	d807      	bhi.n	8005668 <memmove+0x1a>
 8005658:	1e42      	subs	r2, r0, #1
 800565a:	4299      	cmp	r1, r3
 800565c:	d00a      	beq.n	8005674 <memmove+0x26>
 800565e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005662:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005666:	e7f8      	b.n	800565a <memmove+0xc>
 8005668:	4283      	cmp	r3, r0
 800566a:	d9f5      	bls.n	8005658 <memmove+0xa>
 800566c:	1881      	adds	r1, r0, r2
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	42d3      	cmn	r3, r2
 8005672:	d100      	bne.n	8005676 <memmove+0x28>
 8005674:	bd10      	pop	{r4, pc}
 8005676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800567a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800567e:	e7f7      	b.n	8005670 <memmove+0x22>

08005680 <_free_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	2900      	cmp	r1, #0
 8005686:	d045      	beq.n	8005714 <_free_r+0x94>
 8005688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568c:	1f0c      	subs	r4, r1, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfb8      	it	lt
 8005692:	18e4      	addlt	r4, r4, r3
 8005694:	f000 f8d2 	bl	800583c <__malloc_lock>
 8005698:	4a1f      	ldr	r2, [pc, #124]	; (8005718 <_free_r+0x98>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	4610      	mov	r0, r2
 800569e:	b933      	cbnz	r3, 80056ae <_free_r+0x2e>
 80056a0:	6063      	str	r3, [r4, #4]
 80056a2:	6014      	str	r4, [r2, #0]
 80056a4:	4628      	mov	r0, r5
 80056a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056aa:	f000 b8c8 	b.w	800583e <__malloc_unlock>
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d90c      	bls.n	80056cc <_free_r+0x4c>
 80056b2:	6821      	ldr	r1, [r4, #0]
 80056b4:	1862      	adds	r2, r4, r1
 80056b6:	4293      	cmp	r3, r2
 80056b8:	bf04      	itt	eq
 80056ba:	681a      	ldreq	r2, [r3, #0]
 80056bc:	685b      	ldreq	r3, [r3, #4]
 80056be:	6063      	str	r3, [r4, #4]
 80056c0:	bf04      	itt	eq
 80056c2:	1852      	addeq	r2, r2, r1
 80056c4:	6022      	streq	r2, [r4, #0]
 80056c6:	6004      	str	r4, [r0, #0]
 80056c8:	e7ec      	b.n	80056a4 <_free_r+0x24>
 80056ca:	4613      	mov	r3, r2
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	b10a      	cbz	r2, 80056d4 <_free_r+0x54>
 80056d0:	42a2      	cmp	r2, r4
 80056d2:	d9fa      	bls.n	80056ca <_free_r+0x4a>
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	1858      	adds	r0, r3, r1
 80056d8:	42a0      	cmp	r0, r4
 80056da:	d10b      	bne.n	80056f4 <_free_r+0x74>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	4401      	add	r1, r0
 80056e0:	1858      	adds	r0, r3, r1
 80056e2:	4282      	cmp	r2, r0
 80056e4:	6019      	str	r1, [r3, #0]
 80056e6:	d1dd      	bne.n	80056a4 <_free_r+0x24>
 80056e8:	6810      	ldr	r0, [r2, #0]
 80056ea:	6852      	ldr	r2, [r2, #4]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	4401      	add	r1, r0
 80056f0:	6019      	str	r1, [r3, #0]
 80056f2:	e7d7      	b.n	80056a4 <_free_r+0x24>
 80056f4:	d902      	bls.n	80056fc <_free_r+0x7c>
 80056f6:	230c      	movs	r3, #12
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	e7d3      	b.n	80056a4 <_free_r+0x24>
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	1821      	adds	r1, r4, r0
 8005700:	428a      	cmp	r2, r1
 8005702:	bf04      	itt	eq
 8005704:	6811      	ldreq	r1, [r2, #0]
 8005706:	6852      	ldreq	r2, [r2, #4]
 8005708:	6062      	str	r2, [r4, #4]
 800570a:	bf04      	itt	eq
 800570c:	1809      	addeq	r1, r1, r0
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	605c      	str	r4, [r3, #4]
 8005712:	e7c7      	b.n	80056a4 <_free_r+0x24>
 8005714:	bd38      	pop	{r3, r4, r5, pc}
 8005716:	bf00      	nop
 8005718:	2000009c 	.word	0x2000009c

0800571c <_malloc_r>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	1ccd      	adds	r5, r1, #3
 8005720:	f025 0503 	bic.w	r5, r5, #3
 8005724:	3508      	adds	r5, #8
 8005726:	2d0c      	cmp	r5, #12
 8005728:	bf38      	it	cc
 800572a:	250c      	movcc	r5, #12
 800572c:	2d00      	cmp	r5, #0
 800572e:	4606      	mov	r6, r0
 8005730:	db01      	blt.n	8005736 <_malloc_r+0x1a>
 8005732:	42a9      	cmp	r1, r5
 8005734:	d903      	bls.n	800573e <_malloc_r+0x22>
 8005736:	230c      	movs	r3, #12
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	2000      	movs	r0, #0
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	f000 f87d 	bl	800583c <__malloc_lock>
 8005742:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <_malloc_r+0xac>)
 8005744:	6814      	ldr	r4, [r2, #0]
 8005746:	4621      	mov	r1, r4
 8005748:	b991      	cbnz	r1, 8005770 <_malloc_r+0x54>
 800574a:	4c20      	ldr	r4, [pc, #128]	; (80057cc <_malloc_r+0xb0>)
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	b91b      	cbnz	r3, 8005758 <_malloc_r+0x3c>
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f863 	bl	800581c <_sbrk_r>
 8005756:	6020      	str	r0, [r4, #0]
 8005758:	4629      	mov	r1, r5
 800575a:	4630      	mov	r0, r6
 800575c:	f000 f85e 	bl	800581c <_sbrk_r>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d124      	bne.n	80057ae <_malloc_r+0x92>
 8005764:	230c      	movs	r3, #12
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	4630      	mov	r0, r6
 800576a:	f000 f868 	bl	800583e <__malloc_unlock>
 800576e:	e7e4      	b.n	800573a <_malloc_r+0x1e>
 8005770:	680b      	ldr	r3, [r1, #0]
 8005772:	1b5b      	subs	r3, r3, r5
 8005774:	d418      	bmi.n	80057a8 <_malloc_r+0x8c>
 8005776:	2b0b      	cmp	r3, #11
 8005778:	d90f      	bls.n	800579a <_malloc_r+0x7e>
 800577a:	600b      	str	r3, [r1, #0]
 800577c:	50cd      	str	r5, [r1, r3]
 800577e:	18cc      	adds	r4, r1, r3
 8005780:	4630      	mov	r0, r6
 8005782:	f000 f85c 	bl	800583e <__malloc_unlock>
 8005786:	f104 000b 	add.w	r0, r4, #11
 800578a:	1d23      	adds	r3, r4, #4
 800578c:	f020 0007 	bic.w	r0, r0, #7
 8005790:	1ac3      	subs	r3, r0, r3
 8005792:	d0d3      	beq.n	800573c <_malloc_r+0x20>
 8005794:	425a      	negs	r2, r3
 8005796:	50e2      	str	r2, [r4, r3]
 8005798:	e7d0      	b.n	800573c <_malloc_r+0x20>
 800579a:	428c      	cmp	r4, r1
 800579c:	684b      	ldr	r3, [r1, #4]
 800579e:	bf16      	itet	ne
 80057a0:	6063      	strne	r3, [r4, #4]
 80057a2:	6013      	streq	r3, [r2, #0]
 80057a4:	460c      	movne	r4, r1
 80057a6:	e7eb      	b.n	8005780 <_malloc_r+0x64>
 80057a8:	460c      	mov	r4, r1
 80057aa:	6849      	ldr	r1, [r1, #4]
 80057ac:	e7cc      	b.n	8005748 <_malloc_r+0x2c>
 80057ae:	1cc4      	adds	r4, r0, #3
 80057b0:	f024 0403 	bic.w	r4, r4, #3
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d005      	beq.n	80057c4 <_malloc_r+0xa8>
 80057b8:	1a21      	subs	r1, r4, r0
 80057ba:	4630      	mov	r0, r6
 80057bc:	f000 f82e 	bl	800581c <_sbrk_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d0cf      	beq.n	8005764 <_malloc_r+0x48>
 80057c4:	6025      	str	r5, [r4, #0]
 80057c6:	e7db      	b.n	8005780 <_malloc_r+0x64>
 80057c8:	2000009c 	.word	0x2000009c
 80057cc:	200000a0 	.word	0x200000a0

080057d0 <_realloc_r>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	4607      	mov	r7, r0
 80057d4:	4614      	mov	r4, r2
 80057d6:	460e      	mov	r6, r1
 80057d8:	b921      	cbnz	r1, 80057e4 <_realloc_r+0x14>
 80057da:	4611      	mov	r1, r2
 80057dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057e0:	f7ff bf9c 	b.w	800571c <_malloc_r>
 80057e4:	b922      	cbnz	r2, 80057f0 <_realloc_r+0x20>
 80057e6:	f7ff ff4b 	bl	8005680 <_free_r>
 80057ea:	4625      	mov	r5, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f0:	f000 f826 	bl	8005840 <_malloc_usable_size_r>
 80057f4:	42a0      	cmp	r0, r4
 80057f6:	d20f      	bcs.n	8005818 <_realloc_r+0x48>
 80057f8:	4621      	mov	r1, r4
 80057fa:	4638      	mov	r0, r7
 80057fc:	f7ff ff8e 	bl	800571c <_malloc_r>
 8005800:	4605      	mov	r5, r0
 8005802:	2800      	cmp	r0, #0
 8005804:	d0f2      	beq.n	80057ec <_realloc_r+0x1c>
 8005806:	4631      	mov	r1, r6
 8005808:	4622      	mov	r2, r4
 800580a:	f7ff ff15 	bl	8005638 <memcpy>
 800580e:	4631      	mov	r1, r6
 8005810:	4638      	mov	r0, r7
 8005812:	f7ff ff35 	bl	8005680 <_free_r>
 8005816:	e7e9      	b.n	80057ec <_realloc_r+0x1c>
 8005818:	4635      	mov	r5, r6
 800581a:	e7e7      	b.n	80057ec <_realloc_r+0x1c>

0800581c <_sbrk_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4c06      	ldr	r4, [pc, #24]	; (8005838 <_sbrk_r+0x1c>)
 8005820:	2300      	movs	r3, #0
 8005822:	4605      	mov	r5, r0
 8005824:	4608      	mov	r0, r1
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	f7fd f936 	bl	8002a98 <_sbrk>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_sbrk_r+0x1a>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	b103      	cbz	r3, 8005836 <_sbrk_r+0x1a>
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000bac 	.word	0x20000bac

0800583c <__malloc_lock>:
 800583c:	4770      	bx	lr

0800583e <__malloc_unlock>:
 800583e:	4770      	bx	lr

08005840 <_malloc_usable_size_r>:
 8005840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005844:	1f18      	subs	r0, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	bfbc      	itt	lt
 800584a:	580b      	ldrlt	r3, [r1, r0]
 800584c:	18c0      	addlt	r0, r0, r3
 800584e:	4770      	bx	lr

08005850 <sin>:
 8005850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005852:	ec51 0b10 	vmov	r0, r1, d0
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <sin+0x88>)
 8005858:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800585c:	4293      	cmp	r3, r2
 800585e:	dc07      	bgt.n	8005870 <sin+0x20>
 8005860:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80058d0 <sin+0x80>
 8005864:	2000      	movs	r0, #0
 8005866:	f000 fe37 	bl	80064d8 <__kernel_sin>
 800586a:	ec51 0b10 	vmov	r0, r1, d0
 800586e:	e007      	b.n	8005880 <sin+0x30>
 8005870:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <sin+0x8c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	dd09      	ble.n	800588a <sin+0x3a>
 8005876:	ee10 2a10 	vmov	r2, s0
 800587a:	460b      	mov	r3, r1
 800587c:	f7fa fd14 	bl	80002a8 <__aeabi_dsub>
 8005880:	ec41 0b10 	vmov	d0, r0, r1
 8005884:	b005      	add	sp, #20
 8005886:	f85d fb04 	ldr.w	pc, [sp], #4
 800588a:	4668      	mov	r0, sp
 800588c:	f000 f828 	bl	80058e0 <__ieee754_rem_pio2>
 8005890:	f000 0003 	and.w	r0, r0, #3
 8005894:	2801      	cmp	r0, #1
 8005896:	ed9d 1b02 	vldr	d1, [sp, #8]
 800589a:	ed9d 0b00 	vldr	d0, [sp]
 800589e:	d004      	beq.n	80058aa <sin+0x5a>
 80058a0:	2802      	cmp	r0, #2
 80058a2:	d005      	beq.n	80058b0 <sin+0x60>
 80058a4:	b970      	cbnz	r0, 80058c4 <sin+0x74>
 80058a6:	2001      	movs	r0, #1
 80058a8:	e7dd      	b.n	8005866 <sin+0x16>
 80058aa:	f000 fa0d 	bl	8005cc8 <__kernel_cos>
 80058ae:	e7dc      	b.n	800586a <sin+0x1a>
 80058b0:	2001      	movs	r0, #1
 80058b2:	f000 fe11 	bl	80064d8 <__kernel_sin>
 80058b6:	ec53 2b10 	vmov	r2, r3, d0
 80058ba:	ee10 0a10 	vmov	r0, s0
 80058be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80058c2:	e7dd      	b.n	8005880 <sin+0x30>
 80058c4:	f000 fa00 	bl	8005cc8 <__kernel_cos>
 80058c8:	e7f5      	b.n	80058b6 <sin+0x66>
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w
	...
 80058d8:	3fe921fb 	.word	0x3fe921fb
 80058dc:	7fefffff 	.word	0x7fefffff

080058e0 <__ieee754_rem_pio2>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	ec57 6b10 	vmov	r6, r7, d0
 80058e8:	4bc3      	ldr	r3, [pc, #780]	; (8005bf8 <__ieee754_rem_pio2+0x318>)
 80058ea:	b08d      	sub	sp, #52	; 0x34
 80058ec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80058f0:	4598      	cmp	r8, r3
 80058f2:	4604      	mov	r4, r0
 80058f4:	9704      	str	r7, [sp, #16]
 80058f6:	dc07      	bgt.n	8005908 <__ieee754_rem_pio2+0x28>
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	ed84 0b00 	vstr	d0, [r4]
 8005900:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005904:	2500      	movs	r5, #0
 8005906:	e027      	b.n	8005958 <__ieee754_rem_pio2+0x78>
 8005908:	4bbc      	ldr	r3, [pc, #752]	; (8005bfc <__ieee754_rem_pio2+0x31c>)
 800590a:	4598      	cmp	r8, r3
 800590c:	dc75      	bgt.n	80059fa <__ieee754_rem_pio2+0x11a>
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	4dbb      	ldr	r5, [pc, #748]	; (8005c00 <__ieee754_rem_pio2+0x320>)
 8005912:	2b00      	cmp	r3, #0
 8005914:	ee10 0a10 	vmov	r0, s0
 8005918:	a3a9      	add	r3, pc, #676	; (adr r3, 8005bc0 <__ieee754_rem_pio2+0x2e0>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	4639      	mov	r1, r7
 8005920:	dd36      	ble.n	8005990 <__ieee754_rem_pio2+0xb0>
 8005922:	f7fa fcc1 	bl	80002a8 <__aeabi_dsub>
 8005926:	45a8      	cmp	r8, r5
 8005928:	4606      	mov	r6, r0
 800592a:	460f      	mov	r7, r1
 800592c:	d018      	beq.n	8005960 <__ieee754_rem_pio2+0x80>
 800592e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2e8>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fa fcb8 	bl	80002a8 <__aeabi_dsub>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	e9c4 2300 	strd	r2, r3, [r4]
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fcb0 	bl	80002a8 <__aeabi_dsub>
 8005948:	a39f      	add	r3, pc, #636	; (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2e8>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fcab 	bl	80002a8 <__aeabi_dsub>
 8005952:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005956:	2501      	movs	r5, #1
 8005958:	4628      	mov	r0, r5
 800595a:	b00d      	add	sp, #52	; 0x34
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	a39b      	add	r3, pc, #620	; (adr r3, 8005bd0 <__ieee754_rem_pio2+0x2f0>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fc9f 	bl	80002a8 <__aeabi_dsub>
 800596a:	a39b      	add	r3, pc, #620	; (adr r3, 8005bd8 <__ieee754_rem_pio2+0x2f8>)
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	4606      	mov	r6, r0
 8005972:	460f      	mov	r7, r1
 8005974:	f7fa fc98 	bl	80002a8 <__aeabi_dsub>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	e9c4 2300 	strd	r2, r3, [r4]
 8005980:	4630      	mov	r0, r6
 8005982:	4639      	mov	r1, r7
 8005984:	f7fa fc90 	bl	80002a8 <__aeabi_dsub>
 8005988:	a393      	add	r3, pc, #588	; (adr r3, 8005bd8 <__ieee754_rem_pio2+0x2f8>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	e7de      	b.n	800594e <__ieee754_rem_pio2+0x6e>
 8005990:	f7fa fc8c 	bl	80002ac <__adddf3>
 8005994:	45a8      	cmp	r8, r5
 8005996:	4606      	mov	r6, r0
 8005998:	460f      	mov	r7, r1
 800599a:	d016      	beq.n	80059ca <__ieee754_rem_pio2+0xea>
 800599c:	a38a      	add	r3, pc, #552	; (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2e8>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fc83 	bl	80002ac <__adddf3>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	e9c4 2300 	strd	r2, r3, [r4]
 80059ae:	4630      	mov	r0, r6
 80059b0:	4639      	mov	r1, r7
 80059b2:	f7fa fc79 	bl	80002a8 <__aeabi_dsub>
 80059b6:	a384      	add	r3, pc, #528	; (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2e8>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f7fa fc76 	bl	80002ac <__adddf3>
 80059c0:	f04f 35ff 	mov.w	r5, #4294967295
 80059c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80059c8:	e7c6      	b.n	8005958 <__ieee754_rem_pio2+0x78>
 80059ca:	a381      	add	r3, pc, #516	; (adr r3, 8005bd0 <__ieee754_rem_pio2+0x2f0>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fc6c 	bl	80002ac <__adddf3>
 80059d4:	a380      	add	r3, pc, #512	; (adr r3, 8005bd8 <__ieee754_rem_pio2+0x2f8>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	4606      	mov	r6, r0
 80059dc:	460f      	mov	r7, r1
 80059de:	f7fa fc65 	bl	80002ac <__adddf3>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	e9c4 2300 	strd	r2, r3, [r4]
 80059ea:	4630      	mov	r0, r6
 80059ec:	4639      	mov	r1, r7
 80059ee:	f7fa fc5b 	bl	80002a8 <__aeabi_dsub>
 80059f2:	a379      	add	r3, pc, #484	; (adr r3, 8005bd8 <__ieee754_rem_pio2+0x2f8>)
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	e7e0      	b.n	80059bc <__ieee754_rem_pio2+0xdc>
 80059fa:	4b82      	ldr	r3, [pc, #520]	; (8005c04 <__ieee754_rem_pio2+0x324>)
 80059fc:	4598      	cmp	r8, r3
 80059fe:	f300 80d0 	bgt.w	8005ba2 <__ieee754_rem_pio2+0x2c2>
 8005a02:	f000 fe23 	bl	800664c <fabs>
 8005a06:	ec57 6b10 	vmov	r6, r7, d0
 8005a0a:	ee10 0a10 	vmov	r0, s0
 8005a0e:	a374      	add	r3, pc, #464	; (adr r3, 8005be0 <__ieee754_rem_pio2+0x300>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	4639      	mov	r1, r7
 8005a16:	f7fa fdff 	bl	8000618 <__aeabi_dmul>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4b7a      	ldr	r3, [pc, #488]	; (8005c08 <__ieee754_rem_pio2+0x328>)
 8005a1e:	f7fa fc45 	bl	80002ac <__adddf3>
 8005a22:	f7fb f893 	bl	8000b4c <__aeabi_d2iz>
 8005a26:	4605      	mov	r5, r0
 8005a28:	f7fa fd8c 	bl	8000544 <__aeabi_i2d>
 8005a2c:	a364      	add	r3, pc, #400	; (adr r3, 8005bc0 <__ieee754_rem_pio2+0x2e0>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a36:	f7fa fdef 	bl	8000618 <__aeabi_dmul>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa fc31 	bl	80002a8 <__aeabi_dsub>
 8005a46:	a360      	add	r3, pc, #384	; (adr r3, 8005bc8 <__ieee754_rem_pio2+0x2e8>)
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	468b      	mov	fp, r1
 8005a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a54:	f7fa fde0 	bl	8000618 <__aeabi_dmul>
 8005a58:	2d1f      	cmp	r5, #31
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	dc0c      	bgt.n	8005a7a <__ieee754_rem_pio2+0x19a>
 8005a60:	1e6a      	subs	r2, r5, #1
 8005a62:	4b6a      	ldr	r3, [pc, #424]	; (8005c0c <__ieee754_rem_pio2+0x32c>)
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	4543      	cmp	r3, r8
 8005a6a:	d006      	beq.n	8005a7a <__ieee754_rem_pio2+0x19a>
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	463b      	mov	r3, r7
 8005a70:	4650      	mov	r0, sl
 8005a72:	4659      	mov	r1, fp
 8005a74:	f7fa fc18 	bl	80002a8 <__aeabi_dsub>
 8005a78:	e00e      	b.n	8005a98 <__ieee754_rem_pio2+0x1b8>
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	4650      	mov	r0, sl
 8005a80:	4659      	mov	r1, fp
 8005a82:	f7fa fc11 	bl	80002a8 <__aeabi_dsub>
 8005a86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	9a05      	ldr	r2, [sp, #20]
 8005a8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	dc02      	bgt.n	8005a9e <__ieee754_rem_pio2+0x1be>
 8005a98:	e9c4 0100 	strd	r0, r1, [r4]
 8005a9c:	e039      	b.n	8005b12 <__ieee754_rem_pio2+0x232>
 8005a9e:	a34c      	add	r3, pc, #304	; (adr r3, 8005bd0 <__ieee754_rem_pio2+0x2f0>)
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa8:	f7fa fdb6 	bl	8000618 <__aeabi_dmul>
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	f7fa fbf6 	bl	80002a8 <__aeabi_dsub>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	4689      	mov	r9, r1
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	f7fa fbee 	bl	80002a8 <__aeabi_dsub>
 8005acc:	4632      	mov	r2, r6
 8005ace:	463b      	mov	r3, r7
 8005ad0:	f7fa fbea 	bl	80002a8 <__aeabi_dsub>
 8005ad4:	a340      	add	r3, pc, #256	; (adr r3, 8005bd8 <__ieee754_rem_pio2+0x2f8>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	4606      	mov	r6, r0
 8005adc:	460f      	mov	r7, r1
 8005ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ae2:	f7fa fd99 	bl	8000618 <__aeabi_dmul>
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	463b      	mov	r3, r7
 8005aea:	f7fa fbdd 	bl	80002a8 <__aeabi_dsub>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4606      	mov	r6, r0
 8005af4:	460f      	mov	r7, r1
 8005af6:	4640      	mov	r0, r8
 8005af8:	4649      	mov	r1, r9
 8005afa:	f7fa fbd5 	bl	80002a8 <__aeabi_dsub>
 8005afe:	9a05      	ldr	r2, [sp, #20]
 8005b00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b31      	cmp	r3, #49	; 0x31
 8005b08:	dc20      	bgt.n	8005b4c <__ieee754_rem_pio2+0x26c>
 8005b0a:	e9c4 0100 	strd	r0, r1, [r4]
 8005b0e:	46c2      	mov	sl, r8
 8005b10:	46cb      	mov	fp, r9
 8005b12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005b16:	4650      	mov	r0, sl
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	f7fa fbc3 	bl	80002a8 <__aeabi_dsub>
 8005b22:	463b      	mov	r3, r7
 8005b24:	4632      	mov	r2, r6
 8005b26:	f7fa fbbf 	bl	80002a8 <__aeabi_dsub>
 8005b2a:	9b04      	ldr	r3, [sp, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b32:	f6bf af11 	bge.w	8005958 <__ieee754_rem_pio2+0x78>
 8005b36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	f8c4 8000 	str.w	r8, [r4]
 8005b40:	60a0      	str	r0, [r4, #8]
 8005b42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b46:	60e3      	str	r3, [r4, #12]
 8005b48:	426d      	negs	r5, r5
 8005b4a:	e705      	b.n	8005958 <__ieee754_rem_pio2+0x78>
 8005b4c:	a326      	add	r3, pc, #152	; (adr r3, 8005be8 <__ieee754_rem_pio2+0x308>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b56:	f7fa fd5f 	bl	8000618 <__aeabi_dmul>
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460f      	mov	r7, r1
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4640      	mov	r0, r8
 8005b64:	4649      	mov	r1, r9
 8005b66:	f7fa fb9f 	bl	80002a8 <__aeabi_dsub>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4682      	mov	sl, r0
 8005b70:	468b      	mov	fp, r1
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fa fb97 	bl	80002a8 <__aeabi_dsub>
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	f7fa fb93 	bl	80002a8 <__aeabi_dsub>
 8005b82:	a31b      	add	r3, pc, #108	; (adr r3, 8005bf0 <__ieee754_rem_pio2+0x310>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	4606      	mov	r6, r0
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b90:	f7fa fd42 	bl	8000618 <__aeabi_dmul>
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	f7fa fb86 	bl	80002a8 <__aeabi_dsub>
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	460f      	mov	r7, r1
 8005ba0:	e764      	b.n	8005a6c <__ieee754_rem_pio2+0x18c>
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <__ieee754_rem_pio2+0x330>)
 8005ba4:	4598      	cmp	r8, r3
 8005ba6:	dd35      	ble.n	8005c14 <__ieee754_rem_pio2+0x334>
 8005ba8:	ee10 2a10 	vmov	r2, s0
 8005bac:	463b      	mov	r3, r7
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	f7fa fb79 	bl	80002a8 <__aeabi_dsub>
 8005bb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bba:	e9c4 0100 	strd	r0, r1, [r4]
 8005bbe:	e6a1      	b.n	8005904 <__ieee754_rem_pio2+0x24>
 8005bc0:	54400000 	.word	0x54400000
 8005bc4:	3ff921fb 	.word	0x3ff921fb
 8005bc8:	1a626331 	.word	0x1a626331
 8005bcc:	3dd0b461 	.word	0x3dd0b461
 8005bd0:	1a600000 	.word	0x1a600000
 8005bd4:	3dd0b461 	.word	0x3dd0b461
 8005bd8:	2e037073 	.word	0x2e037073
 8005bdc:	3ba3198a 	.word	0x3ba3198a
 8005be0:	6dc9c883 	.word	0x6dc9c883
 8005be4:	3fe45f30 	.word	0x3fe45f30
 8005be8:	2e000000 	.word	0x2e000000
 8005bec:	3ba3198a 	.word	0x3ba3198a
 8005bf0:	252049c1 	.word	0x252049c1
 8005bf4:	397b839a 	.word	0x397b839a
 8005bf8:	3fe921fb 	.word	0x3fe921fb
 8005bfc:	4002d97b 	.word	0x4002d97b
 8005c00:	3ff921fb 	.word	0x3ff921fb
 8005c04:	413921fb 	.word	0x413921fb
 8005c08:	3fe00000 	.word	0x3fe00000
 8005c0c:	08006a0c 	.word	0x08006a0c
 8005c10:	7fefffff 	.word	0x7fefffff
 8005c14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005c18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005c1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005c20:	4630      	mov	r0, r6
 8005c22:	460f      	mov	r7, r1
 8005c24:	f7fa ff92 	bl	8000b4c <__aeabi_d2iz>
 8005c28:	f7fa fc8c 	bl	8000544 <__aeabi_i2d>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c38:	f7fa fb36 	bl	80002a8 <__aeabi_dsub>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <__ieee754_rem_pio2+0x3dc>)
 8005c40:	f7fa fcea 	bl	8000618 <__aeabi_dmul>
 8005c44:	460f      	mov	r7, r1
 8005c46:	4606      	mov	r6, r0
 8005c48:	f7fa ff80 	bl	8000b4c <__aeabi_d2iz>
 8005c4c:	f7fa fc7a 	bl	8000544 <__aeabi_i2d>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c5c:	f7fa fb24 	bl	80002a8 <__aeabi_dsub>
 8005c60:	2200      	movs	r2, #0
 8005c62:	4b16      	ldr	r3, [pc, #88]	; (8005cbc <__ieee754_rem_pio2+0x3dc>)
 8005c64:	f7fa fcd8 	bl	8000618 <__aeabi_dmul>
 8005c68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005c70:	f04f 0803 	mov.w	r8, #3
 8005c74:	2600      	movs	r6, #0
 8005c76:	2700      	movs	r7, #0
 8005c78:	4632      	mov	r2, r6
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8005c84:	f7fa ff30 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c88:	b9b0      	cbnz	r0, 8005cb8 <__ieee754_rem_pio2+0x3d8>
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <__ieee754_rem_pio2+0x3e0>)
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	2302      	movs	r3, #2
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	462a      	mov	r2, r5
 8005c94:	4643      	mov	r3, r8
 8005c96:	4621      	mov	r1, r4
 8005c98:	a806      	add	r0, sp, #24
 8005c9a:	f000 f8dd 	bl	8005e58 <__kernel_rem_pio2>
 8005c9e:	9b04      	ldr	r3, [sp, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	f6bf ae58 	bge.w	8005958 <__ieee754_rem_pio2+0x78>
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005cb6:	e746      	b.n	8005b46 <__ieee754_rem_pio2+0x266>
 8005cb8:	46d0      	mov	r8, sl
 8005cba:	e7dd      	b.n	8005c78 <__ieee754_rem_pio2+0x398>
 8005cbc:	41700000 	.word	0x41700000
 8005cc0:	08006a8c 	.word	0x08006a8c
 8005cc4:	00000000 	.word	0x00000000

08005cc8 <__kernel_cos>:
 8005cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	ec59 8b10 	vmov	r8, r9, d0
 8005cd0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005cd4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005cd8:	ed2d 8b02 	vpush	{d8}
 8005cdc:	eeb0 8a41 	vmov.f32	s16, s2
 8005ce0:	eef0 8a61 	vmov.f32	s17, s3
 8005ce4:	da07      	bge.n	8005cf6 <__kernel_cos+0x2e>
 8005ce6:	ee10 0a10 	vmov	r0, s0
 8005cea:	4649      	mov	r1, r9
 8005cec:	f7fa ff2e 	bl	8000b4c <__aeabi_d2iz>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f000 8089 	beq.w	8005e08 <__kernel_cos+0x140>
 8005cf6:	4642      	mov	r2, r8
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fc8b 	bl	8000618 <__aeabi_dmul>
 8005d02:	2200      	movs	r2, #0
 8005d04:	4b4e      	ldr	r3, [pc, #312]	; (8005e40 <__kernel_cos+0x178>)
 8005d06:	4604      	mov	r4, r0
 8005d08:	460d      	mov	r5, r1
 8005d0a:	f7fa fc85 	bl	8000618 <__aeabi_dmul>
 8005d0e:	a340      	add	r3, pc, #256	; (adr r3, 8005e10 <__kernel_cos+0x148>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	4682      	mov	sl, r0
 8005d16:	468b      	mov	fp, r1
 8005d18:	4620      	mov	r0, r4
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f7fa fc7c 	bl	8000618 <__aeabi_dmul>
 8005d20:	a33d      	add	r3, pc, #244	; (adr r3, 8005e18 <__kernel_cos+0x150>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f7fa fac1 	bl	80002ac <__adddf3>
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	f7fa fc73 	bl	8000618 <__aeabi_dmul>
 8005d32:	a33b      	add	r3, pc, #236	; (adr r3, 8005e20 <__kernel_cos+0x158>)
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f7fa fab6 	bl	80002a8 <__aeabi_dsub>
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	462b      	mov	r3, r5
 8005d40:	f7fa fc6a 	bl	8000618 <__aeabi_dmul>
 8005d44:	a338      	add	r3, pc, #224	; (adr r3, 8005e28 <__kernel_cos+0x160>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa faaf 	bl	80002ac <__adddf3>
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	f7fa fc61 	bl	8000618 <__aeabi_dmul>
 8005d56:	a336      	add	r3, pc, #216	; (adr r3, 8005e30 <__kernel_cos+0x168>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f7fa faa4 	bl	80002a8 <__aeabi_dsub>
 8005d60:	4622      	mov	r2, r4
 8005d62:	462b      	mov	r3, r5
 8005d64:	f7fa fc58 	bl	8000618 <__aeabi_dmul>
 8005d68:	a333      	add	r3, pc, #204	; (adr r3, 8005e38 <__kernel_cos+0x170>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fa9d 	bl	80002ac <__adddf3>
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	f7fa fc4f 	bl	8000618 <__aeabi_dmul>
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	462b      	mov	r3, r5
 8005d7e:	f7fa fc4b 	bl	8000618 <__aeabi_dmul>
 8005d82:	ec53 2b18 	vmov	r2, r3, d8
 8005d86:	4604      	mov	r4, r0
 8005d88:	460d      	mov	r5, r1
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	f7fa fc43 	bl	8000618 <__aeabi_dmul>
 8005d92:	460b      	mov	r3, r1
 8005d94:	4602      	mov	r2, r0
 8005d96:	4629      	mov	r1, r5
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f7fa fa85 	bl	80002a8 <__aeabi_dsub>
 8005d9e:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <__kernel_cos+0x17c>)
 8005da0:	429e      	cmp	r6, r3
 8005da2:	4680      	mov	r8, r0
 8005da4:	4689      	mov	r9, r1
 8005da6:	dc11      	bgt.n	8005dcc <__kernel_cos+0x104>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4650      	mov	r0, sl
 8005dae:	4659      	mov	r1, fp
 8005db0:	f7fa fa7a 	bl	80002a8 <__aeabi_dsub>
 8005db4:	460b      	mov	r3, r1
 8005db6:	4924      	ldr	r1, [pc, #144]	; (8005e48 <__kernel_cos+0x180>)
 8005db8:	4602      	mov	r2, r0
 8005dba:	2000      	movs	r0, #0
 8005dbc:	f7fa fa74 	bl	80002a8 <__aeabi_dsub>
 8005dc0:	ecbd 8b02 	vpop	{d8}
 8005dc4:	ec41 0b10 	vmov	d0, r0, r1
 8005dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dcc:	4b1f      	ldr	r3, [pc, #124]	; (8005e4c <__kernel_cos+0x184>)
 8005dce:	491e      	ldr	r1, [pc, #120]	; (8005e48 <__kernel_cos+0x180>)
 8005dd0:	429e      	cmp	r6, r3
 8005dd2:	bfcc      	ite	gt
 8005dd4:	4d1e      	ldrgt	r5, [pc, #120]	; (8005e50 <__kernel_cos+0x188>)
 8005dd6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005dda:	2400      	movs	r4, #0
 8005ddc:	4622      	mov	r2, r4
 8005dde:	462b      	mov	r3, r5
 8005de0:	2000      	movs	r0, #0
 8005de2:	f7fa fa61 	bl	80002a8 <__aeabi_dsub>
 8005de6:	4622      	mov	r2, r4
 8005de8:	4606      	mov	r6, r0
 8005dea:	460f      	mov	r7, r1
 8005dec:	462b      	mov	r3, r5
 8005dee:	4650      	mov	r0, sl
 8005df0:	4659      	mov	r1, fp
 8005df2:	f7fa fa59 	bl	80002a8 <__aeabi_dsub>
 8005df6:	4642      	mov	r2, r8
 8005df8:	464b      	mov	r3, r9
 8005dfa:	f7fa fa55 	bl	80002a8 <__aeabi_dsub>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4630      	mov	r0, r6
 8005e04:	4639      	mov	r1, r7
 8005e06:	e7d9      	b.n	8005dbc <__kernel_cos+0xf4>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	490f      	ldr	r1, [pc, #60]	; (8005e48 <__kernel_cos+0x180>)
 8005e0c:	e7d8      	b.n	8005dc0 <__kernel_cos+0xf8>
 8005e0e:	bf00      	nop
 8005e10:	be8838d4 	.word	0xbe8838d4
 8005e14:	bda8fae9 	.word	0xbda8fae9
 8005e18:	bdb4b1c4 	.word	0xbdb4b1c4
 8005e1c:	3e21ee9e 	.word	0x3e21ee9e
 8005e20:	809c52ad 	.word	0x809c52ad
 8005e24:	3e927e4f 	.word	0x3e927e4f
 8005e28:	19cb1590 	.word	0x19cb1590
 8005e2c:	3efa01a0 	.word	0x3efa01a0
 8005e30:	16c15177 	.word	0x16c15177
 8005e34:	3f56c16c 	.word	0x3f56c16c
 8005e38:	5555554c 	.word	0x5555554c
 8005e3c:	3fa55555 	.word	0x3fa55555
 8005e40:	3fe00000 	.word	0x3fe00000
 8005e44:	3fd33332 	.word	0x3fd33332
 8005e48:	3ff00000 	.word	0x3ff00000
 8005e4c:	3fe90000 	.word	0x3fe90000
 8005e50:	3fd20000 	.word	0x3fd20000
 8005e54:	00000000 	.word	0x00000000

08005e58 <__kernel_rem_pio2>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	ed2d 8b02 	vpush	{d8}
 8005e60:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005e64:	1ed4      	subs	r4, r2, #3
 8005e66:	9308      	str	r3, [sp, #32]
 8005e68:	9101      	str	r1, [sp, #4]
 8005e6a:	4bc5      	ldr	r3, [pc, #788]	; (8006180 <__kernel_rem_pio2+0x328>)
 8005e6c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005e6e:	9009      	str	r0, [sp, #36]	; 0x24
 8005e70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	9b08      	ldr	r3, [sp, #32]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	9307      	str	r3, [sp, #28]
 8005e7c:	2318      	movs	r3, #24
 8005e7e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005e82:	f06f 0317 	mvn.w	r3, #23
 8005e86:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005e8a:	fb04 3303 	mla	r3, r4, r3, r3
 8005e8e:	eb03 0a02 	add.w	sl, r3, r2
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	9a07      	ldr	r2, [sp, #28]
 8005e96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006170 <__kernel_rem_pio2+0x318>
 8005e9a:	eb03 0802 	add.w	r8, r3, r2
 8005e9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005ea0:	1aa7      	subs	r7, r4, r2
 8005ea2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005ea6:	ae22      	add	r6, sp, #136	; 0x88
 8005ea8:	2500      	movs	r5, #0
 8005eaa:	4545      	cmp	r5, r8
 8005eac:	dd13      	ble.n	8005ed6 <__kernel_rem_pio2+0x7e>
 8005eae:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006170 <__kernel_rem_pio2+0x318>
 8005eb2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	9b04      	ldr	r3, [sp, #16]
 8005eba:	429e      	cmp	r6, r3
 8005ebc:	dc32      	bgt.n	8005f24 <__kernel_rem_pio2+0xcc>
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	9302      	str	r3, [sp, #8]
 8005ec2:	9b08      	ldr	r3, [sp, #32]
 8005ec4:	199d      	adds	r5, r3, r6
 8005ec6:	ab22      	add	r3, sp, #136	; 0x88
 8005ec8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005ecc:	9306      	str	r3, [sp, #24]
 8005ece:	ec59 8b18 	vmov	r8, r9, d8
 8005ed2:	2700      	movs	r7, #0
 8005ed4:	e01f      	b.n	8005f16 <__kernel_rem_pio2+0xbe>
 8005ed6:	42ef      	cmn	r7, r5
 8005ed8:	d407      	bmi.n	8005eea <__kernel_rem_pio2+0x92>
 8005eda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005ede:	f7fa fb31 	bl	8000544 <__aeabi_i2d>
 8005ee2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	e7df      	b.n	8005eaa <__kernel_rem_pio2+0x52>
 8005eea:	ec51 0b18 	vmov	r0, r1, d8
 8005eee:	e7f8      	b.n	8005ee2 <__kernel_rem_pio2+0x8a>
 8005ef0:	9906      	ldr	r1, [sp, #24]
 8005ef2:	9d02      	ldr	r5, [sp, #8]
 8005ef4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005ef8:	9106      	str	r1, [sp, #24]
 8005efa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005efe:	9502      	str	r5, [sp, #8]
 8005f00:	f7fa fb8a 	bl	8000618 <__aeabi_dmul>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4640      	mov	r0, r8
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	f7fa f9ce 	bl	80002ac <__adddf3>
 8005f10:	3701      	adds	r7, #1
 8005f12:	4680      	mov	r8, r0
 8005f14:	4689      	mov	r9, r1
 8005f16:	9b07      	ldr	r3, [sp, #28]
 8005f18:	429f      	cmp	r7, r3
 8005f1a:	dde9      	ble.n	8005ef0 <__kernel_rem_pio2+0x98>
 8005f1c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005f20:	3601      	adds	r6, #1
 8005f22:	e7c9      	b.n	8005eb8 <__kernel_rem_pio2+0x60>
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	aa0e      	add	r2, sp, #56	; 0x38
 8005f28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f2c:	930c      	str	r3, [sp, #48]	; 0x30
 8005f2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005f30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f34:	9c04      	ldr	r4, [sp, #16]
 8005f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f38:	ab9a      	add	r3, sp, #616	; 0x268
 8005f3a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005f3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f46:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005f4a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005f4e:	ab9a      	add	r3, sp, #616	; 0x268
 8005f50:	445b      	add	r3, fp
 8005f52:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005f56:	2500      	movs	r5, #0
 8005f58:	1b63      	subs	r3, r4, r5
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dc78      	bgt.n	8006050 <__kernel_rem_pio2+0x1f8>
 8005f5e:	4650      	mov	r0, sl
 8005f60:	ec49 8b10 	vmov	d0, r8, r9
 8005f64:	f000 fc00 	bl	8006768 <scalbn>
 8005f68:	ec57 6b10 	vmov	r6, r7, d0
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005f72:	ee10 0a10 	vmov	r0, s0
 8005f76:	4639      	mov	r1, r7
 8005f78:	f7fa fb4e 	bl	8000618 <__aeabi_dmul>
 8005f7c:	ec41 0b10 	vmov	d0, r0, r1
 8005f80:	f000 fb6e 	bl	8006660 <floor>
 8005f84:	2200      	movs	r2, #0
 8005f86:	ec51 0b10 	vmov	r0, r1, d0
 8005f8a:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <__kernel_rem_pio2+0x32c>)
 8005f8c:	f7fa fb44 	bl	8000618 <__aeabi_dmul>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4630      	mov	r0, r6
 8005f96:	4639      	mov	r1, r7
 8005f98:	f7fa f986 	bl	80002a8 <__aeabi_dsub>
 8005f9c:	460f      	mov	r7, r1
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	f7fa fdd4 	bl	8000b4c <__aeabi_d2iz>
 8005fa4:	9006      	str	r0, [sp, #24]
 8005fa6:	f7fa facd 	bl	8000544 <__aeabi_i2d>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	f7fa f979 	bl	80002a8 <__aeabi_dsub>
 8005fb6:	f1ba 0f00 	cmp.w	sl, #0
 8005fba:	4606      	mov	r6, r0
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	dd6c      	ble.n	800609a <__kernel_rem_pio2+0x242>
 8005fc0:	1e62      	subs	r2, r4, #1
 8005fc2:	ab0e      	add	r3, sp, #56	; 0x38
 8005fc4:	f1ca 0118 	rsb	r1, sl, #24
 8005fc8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005fcc:	9d06      	ldr	r5, [sp, #24]
 8005fce:	fa40 f301 	asr.w	r3, r0, r1
 8005fd2:	441d      	add	r5, r3
 8005fd4:	408b      	lsls	r3, r1
 8005fd6:	1ac0      	subs	r0, r0, r3
 8005fd8:	ab0e      	add	r3, sp, #56	; 0x38
 8005fda:	9506      	str	r5, [sp, #24]
 8005fdc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005fe0:	f1ca 0317 	rsb	r3, sl, #23
 8005fe4:	fa40 f303 	asr.w	r3, r0, r3
 8005fe8:	9302      	str	r3, [sp, #8]
 8005fea:	9b02      	ldr	r3, [sp, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dd62      	ble.n	80060b6 <__kernel_rem_pio2+0x25e>
 8005ff0:	9b06      	ldr	r3, [sp, #24]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	9306      	str	r3, [sp, #24]
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005ffe:	4294      	cmp	r4, r2
 8006000:	f300 8095 	bgt.w	800612e <__kernel_rem_pio2+0x2d6>
 8006004:	f1ba 0f00 	cmp.w	sl, #0
 8006008:	dd07      	ble.n	800601a <__kernel_rem_pio2+0x1c2>
 800600a:	f1ba 0f01 	cmp.w	sl, #1
 800600e:	f000 80a2 	beq.w	8006156 <__kernel_rem_pio2+0x2fe>
 8006012:	f1ba 0f02 	cmp.w	sl, #2
 8006016:	f000 80c1 	beq.w	800619c <__kernel_rem_pio2+0x344>
 800601a:	9b02      	ldr	r3, [sp, #8]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d14a      	bne.n	80060b6 <__kernel_rem_pio2+0x25e>
 8006020:	4632      	mov	r2, r6
 8006022:	463b      	mov	r3, r7
 8006024:	2000      	movs	r0, #0
 8006026:	4958      	ldr	r1, [pc, #352]	; (8006188 <__kernel_rem_pio2+0x330>)
 8006028:	f7fa f93e 	bl	80002a8 <__aeabi_dsub>
 800602c:	4606      	mov	r6, r0
 800602e:	460f      	mov	r7, r1
 8006030:	2d00      	cmp	r5, #0
 8006032:	d040      	beq.n	80060b6 <__kernel_rem_pio2+0x25e>
 8006034:	4650      	mov	r0, sl
 8006036:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006178 <__kernel_rem_pio2+0x320>
 800603a:	f000 fb95 	bl	8006768 <scalbn>
 800603e:	4630      	mov	r0, r6
 8006040:	4639      	mov	r1, r7
 8006042:	ec53 2b10 	vmov	r2, r3, d0
 8006046:	f7fa f92f 	bl	80002a8 <__aeabi_dsub>
 800604a:	4606      	mov	r6, r0
 800604c:	460f      	mov	r7, r1
 800604e:	e032      	b.n	80060b6 <__kernel_rem_pio2+0x25e>
 8006050:	2200      	movs	r2, #0
 8006052:	4b4e      	ldr	r3, [pc, #312]	; (800618c <__kernel_rem_pio2+0x334>)
 8006054:	4640      	mov	r0, r8
 8006056:	4649      	mov	r1, r9
 8006058:	f7fa fade 	bl	8000618 <__aeabi_dmul>
 800605c:	f7fa fd76 	bl	8000b4c <__aeabi_d2iz>
 8006060:	f7fa fa70 	bl	8000544 <__aeabi_i2d>
 8006064:	2200      	movs	r2, #0
 8006066:	4b4a      	ldr	r3, [pc, #296]	; (8006190 <__kernel_rem_pio2+0x338>)
 8006068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800606c:	f7fa fad4 	bl	8000618 <__aeabi_dmul>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4640      	mov	r0, r8
 8006076:	4649      	mov	r1, r9
 8006078:	f7fa f916 	bl	80002a8 <__aeabi_dsub>
 800607c:	f7fa fd66 	bl	8000b4c <__aeabi_d2iz>
 8006080:	ab0e      	add	r3, sp, #56	; 0x38
 8006082:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8006086:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800608a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800608e:	f7fa f90d 	bl	80002ac <__adddf3>
 8006092:	3501      	adds	r5, #1
 8006094:	4680      	mov	r8, r0
 8006096:	4689      	mov	r9, r1
 8006098:	e75e      	b.n	8005f58 <__kernel_rem_pio2+0x100>
 800609a:	d105      	bne.n	80060a8 <__kernel_rem_pio2+0x250>
 800609c:	1e63      	subs	r3, r4, #1
 800609e:	aa0e      	add	r2, sp, #56	; 0x38
 80060a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80060a4:	15c3      	asrs	r3, r0, #23
 80060a6:	e79f      	b.n	8005fe8 <__kernel_rem_pio2+0x190>
 80060a8:	2200      	movs	r2, #0
 80060aa:	4b3a      	ldr	r3, [pc, #232]	; (8006194 <__kernel_rem_pio2+0x33c>)
 80060ac:	f7fa fd3a 	bl	8000b24 <__aeabi_dcmpge>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d139      	bne.n	8006128 <__kernel_rem_pio2+0x2d0>
 80060b4:	9002      	str	r0, [sp, #8]
 80060b6:	2200      	movs	r2, #0
 80060b8:	2300      	movs	r3, #0
 80060ba:	4630      	mov	r0, r6
 80060bc:	4639      	mov	r1, r7
 80060be:	f7fa fd13 	bl	8000ae8 <__aeabi_dcmpeq>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f000 80c7 	beq.w	8006256 <__kernel_rem_pio2+0x3fe>
 80060c8:	1e65      	subs	r5, r4, #1
 80060ca:	462b      	mov	r3, r5
 80060cc:	2200      	movs	r2, #0
 80060ce:	9904      	ldr	r1, [sp, #16]
 80060d0:	428b      	cmp	r3, r1
 80060d2:	da6a      	bge.n	80061aa <__kernel_rem_pio2+0x352>
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	f000 8088 	beq.w	80061ea <__kernel_rem_pio2+0x392>
 80060da:	ab0e      	add	r3, sp, #56	; 0x38
 80060dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80060e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80b4 	beq.w	8006252 <__kernel_rem_pio2+0x3fa>
 80060ea:	4650      	mov	r0, sl
 80060ec:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006178 <__kernel_rem_pio2+0x320>
 80060f0:	f000 fb3a 	bl	8006768 <scalbn>
 80060f4:	00ec      	lsls	r4, r5, #3
 80060f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80060f8:	191e      	adds	r6, r3, r4
 80060fa:	ec59 8b10 	vmov	r8, r9, d0
 80060fe:	f106 0a08 	add.w	sl, r6, #8
 8006102:	462f      	mov	r7, r5
 8006104:	2f00      	cmp	r7, #0
 8006106:	f280 80df 	bge.w	80062c8 <__kernel_rem_pio2+0x470>
 800610a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006170 <__kernel_rem_pio2+0x318>
 800610e:	f04f 0a00 	mov.w	sl, #0
 8006112:	eba5 030a 	sub.w	r3, r5, sl
 8006116:	2b00      	cmp	r3, #0
 8006118:	f2c0 810a 	blt.w	8006330 <__kernel_rem_pio2+0x4d8>
 800611c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006198 <__kernel_rem_pio2+0x340>
 8006120:	ec59 8b18 	vmov	r8, r9, d8
 8006124:	2700      	movs	r7, #0
 8006126:	e0f5      	b.n	8006314 <__kernel_rem_pio2+0x4bc>
 8006128:	2302      	movs	r3, #2
 800612a:	9302      	str	r3, [sp, #8]
 800612c:	e760      	b.n	8005ff0 <__kernel_rem_pio2+0x198>
 800612e:	ab0e      	add	r3, sp, #56	; 0x38
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	b94d      	cbnz	r5, 800614a <__kernel_rem_pio2+0x2f2>
 8006136:	b12b      	cbz	r3, 8006144 <__kernel_rem_pio2+0x2ec>
 8006138:	a80e      	add	r0, sp, #56	; 0x38
 800613a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800613e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006142:	2301      	movs	r3, #1
 8006144:	3201      	adds	r2, #1
 8006146:	461d      	mov	r5, r3
 8006148:	e759      	b.n	8005ffe <__kernel_rem_pio2+0x1a6>
 800614a:	a80e      	add	r0, sp, #56	; 0x38
 800614c:	1acb      	subs	r3, r1, r3
 800614e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8006152:	462b      	mov	r3, r5
 8006154:	e7f6      	b.n	8006144 <__kernel_rem_pio2+0x2ec>
 8006156:	1e62      	subs	r2, r4, #1
 8006158:	ab0e      	add	r3, sp, #56	; 0x38
 800615a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006162:	a90e      	add	r1, sp, #56	; 0x38
 8006164:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006168:	e757      	b.n	800601a <__kernel_rem_pio2+0x1c2>
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w
	...
 800617c:	3ff00000 	.word	0x3ff00000
 8006180:	08006bd8 	.word	0x08006bd8
 8006184:	40200000 	.word	0x40200000
 8006188:	3ff00000 	.word	0x3ff00000
 800618c:	3e700000 	.word	0x3e700000
 8006190:	41700000 	.word	0x41700000
 8006194:	3fe00000 	.word	0x3fe00000
 8006198:	08006b98 	.word	0x08006b98
 800619c:	1e62      	subs	r2, r4, #1
 800619e:	ab0e      	add	r3, sp, #56	; 0x38
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80061a8:	e7db      	b.n	8006162 <__kernel_rem_pio2+0x30a>
 80061aa:	a90e      	add	r1, sp, #56	; 0x38
 80061ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	430a      	orrs	r2, r1
 80061b4:	e78b      	b.n	80060ce <__kernel_rem_pio2+0x276>
 80061b6:	3301      	adds	r3, #1
 80061b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80061bc:	2900      	cmp	r1, #0
 80061be:	d0fa      	beq.n	80061b6 <__kernel_rem_pio2+0x35e>
 80061c0:	9a08      	ldr	r2, [sp, #32]
 80061c2:	4422      	add	r2, r4
 80061c4:	00d2      	lsls	r2, r2, #3
 80061c6:	a922      	add	r1, sp, #136	; 0x88
 80061c8:	18e3      	adds	r3, r4, r3
 80061ca:	9206      	str	r2, [sp, #24]
 80061cc:	440a      	add	r2, r1
 80061ce:	9302      	str	r3, [sp, #8]
 80061d0:	f10b 0108 	add.w	r1, fp, #8
 80061d4:	f102 0308 	add.w	r3, r2, #8
 80061d8:	1c66      	adds	r6, r4, #1
 80061da:	910a      	str	r1, [sp, #40]	; 0x28
 80061dc:	2500      	movs	r5, #0
 80061de:	930d      	str	r3, [sp, #52]	; 0x34
 80061e0:	9b02      	ldr	r3, [sp, #8]
 80061e2:	42b3      	cmp	r3, r6
 80061e4:	da04      	bge.n	80061f0 <__kernel_rem_pio2+0x398>
 80061e6:	461c      	mov	r4, r3
 80061e8:	e6a6      	b.n	8005f38 <__kernel_rem_pio2+0xe0>
 80061ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7e3      	b.n	80061b8 <__kernel_rem_pio2+0x360>
 80061f0:	9b06      	ldr	r3, [sp, #24]
 80061f2:	18ef      	adds	r7, r5, r3
 80061f4:	ab22      	add	r3, sp, #136	; 0x88
 80061f6:	441f      	add	r7, r3
 80061f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80061fe:	f7fa f9a1 	bl	8000544 <__aeabi_i2d>
 8006202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006204:	461c      	mov	r4, r3
 8006206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006208:	e9c7 0100 	strd	r0, r1, [r7]
 800620c:	eb03 0b05 	add.w	fp, r3, r5
 8006210:	2700      	movs	r7, #0
 8006212:	f04f 0800 	mov.w	r8, #0
 8006216:	f04f 0900 	mov.w	r9, #0
 800621a:	9b07      	ldr	r3, [sp, #28]
 800621c:	429f      	cmp	r7, r3
 800621e:	dd08      	ble.n	8006232 <__kernel_rem_pio2+0x3da>
 8006220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006222:	aa72      	add	r2, sp, #456	; 0x1c8
 8006224:	18eb      	adds	r3, r5, r3
 8006226:	4413      	add	r3, r2
 8006228:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800622c:	3601      	adds	r6, #1
 800622e:	3508      	adds	r5, #8
 8006230:	e7d6      	b.n	80061e0 <__kernel_rem_pio2+0x388>
 8006232:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006236:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800623a:	f7fa f9ed 	bl	8000618 <__aeabi_dmul>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7fa f831 	bl	80002ac <__adddf3>
 800624a:	3701      	adds	r7, #1
 800624c:	4680      	mov	r8, r0
 800624e:	4689      	mov	r9, r1
 8006250:	e7e3      	b.n	800621a <__kernel_rem_pio2+0x3c2>
 8006252:	3d01      	subs	r5, #1
 8006254:	e741      	b.n	80060da <__kernel_rem_pio2+0x282>
 8006256:	f1ca 0000 	rsb	r0, sl, #0
 800625a:	ec47 6b10 	vmov	d0, r6, r7
 800625e:	f000 fa83 	bl	8006768 <scalbn>
 8006262:	ec57 6b10 	vmov	r6, r7, d0
 8006266:	2200      	movs	r2, #0
 8006268:	4b99      	ldr	r3, [pc, #612]	; (80064d0 <__kernel_rem_pio2+0x678>)
 800626a:	ee10 0a10 	vmov	r0, s0
 800626e:	4639      	mov	r1, r7
 8006270:	f7fa fc58 	bl	8000b24 <__aeabi_dcmpge>
 8006274:	b1f8      	cbz	r0, 80062b6 <__kernel_rem_pio2+0x45e>
 8006276:	2200      	movs	r2, #0
 8006278:	4b96      	ldr	r3, [pc, #600]	; (80064d4 <__kernel_rem_pio2+0x67c>)
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7fa f9cb 	bl	8000618 <__aeabi_dmul>
 8006282:	f7fa fc63 	bl	8000b4c <__aeabi_d2iz>
 8006286:	4680      	mov	r8, r0
 8006288:	f7fa f95c 	bl	8000544 <__aeabi_i2d>
 800628c:	2200      	movs	r2, #0
 800628e:	4b90      	ldr	r3, [pc, #576]	; (80064d0 <__kernel_rem_pio2+0x678>)
 8006290:	f7fa f9c2 	bl	8000618 <__aeabi_dmul>
 8006294:	460b      	mov	r3, r1
 8006296:	4602      	mov	r2, r0
 8006298:	4639      	mov	r1, r7
 800629a:	4630      	mov	r0, r6
 800629c:	f7fa f804 	bl	80002a8 <__aeabi_dsub>
 80062a0:	f7fa fc54 	bl	8000b4c <__aeabi_d2iz>
 80062a4:	1c65      	adds	r5, r4, #1
 80062a6:	ab0e      	add	r3, sp, #56	; 0x38
 80062a8:	f10a 0a18 	add.w	sl, sl, #24
 80062ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80062b0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80062b4:	e719      	b.n	80060ea <__kernel_rem_pio2+0x292>
 80062b6:	4630      	mov	r0, r6
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa fc47 	bl	8000b4c <__aeabi_d2iz>
 80062be:	ab0e      	add	r3, sp, #56	; 0x38
 80062c0:	4625      	mov	r5, r4
 80062c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80062c6:	e710      	b.n	80060ea <__kernel_rem_pio2+0x292>
 80062c8:	ab0e      	add	r3, sp, #56	; 0x38
 80062ca:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80062ce:	f7fa f939 	bl	8000544 <__aeabi_i2d>
 80062d2:	4642      	mov	r2, r8
 80062d4:	464b      	mov	r3, r9
 80062d6:	f7fa f99f 	bl	8000618 <__aeabi_dmul>
 80062da:	2200      	movs	r2, #0
 80062dc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80062e0:	4b7c      	ldr	r3, [pc, #496]	; (80064d4 <__kernel_rem_pio2+0x67c>)
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa f997 	bl	8000618 <__aeabi_dmul>
 80062ea:	3f01      	subs	r7, #1
 80062ec:	4680      	mov	r8, r0
 80062ee:	4689      	mov	r9, r1
 80062f0:	e708      	b.n	8006104 <__kernel_rem_pio2+0x2ac>
 80062f2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80062fe:	f7fa f98b 	bl	8000618 <__aeabi_dmul>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4640      	mov	r0, r8
 8006308:	4649      	mov	r1, r9
 800630a:	f7f9 ffcf 	bl	80002ac <__adddf3>
 800630e:	3701      	adds	r7, #1
 8006310:	4680      	mov	r8, r0
 8006312:	4689      	mov	r9, r1
 8006314:	9b04      	ldr	r3, [sp, #16]
 8006316:	429f      	cmp	r7, r3
 8006318:	dc01      	bgt.n	800631e <__kernel_rem_pio2+0x4c6>
 800631a:	45ba      	cmp	sl, r7
 800631c:	dae9      	bge.n	80062f2 <__kernel_rem_pio2+0x49a>
 800631e:	ab4a      	add	r3, sp, #296	; 0x128
 8006320:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006324:	e9c3 8900 	strd	r8, r9, [r3]
 8006328:	f10a 0a01 	add.w	sl, sl, #1
 800632c:	3e08      	subs	r6, #8
 800632e:	e6f0      	b.n	8006112 <__kernel_rem_pio2+0x2ba>
 8006330:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006332:	2b03      	cmp	r3, #3
 8006334:	d85b      	bhi.n	80063ee <__kernel_rem_pio2+0x596>
 8006336:	e8df f003 	tbb	[pc, r3]
 800633a:	264a      	.short	0x264a
 800633c:	0226      	.short	0x0226
 800633e:	ab9a      	add	r3, sp, #616	; 0x268
 8006340:	441c      	add	r4, r3
 8006342:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006346:	46a2      	mov	sl, r4
 8006348:	46ab      	mov	fp, r5
 800634a:	f1bb 0f00 	cmp.w	fp, #0
 800634e:	dc6c      	bgt.n	800642a <__kernel_rem_pio2+0x5d2>
 8006350:	46a2      	mov	sl, r4
 8006352:	46ab      	mov	fp, r5
 8006354:	f1bb 0f01 	cmp.w	fp, #1
 8006358:	f300 8086 	bgt.w	8006468 <__kernel_rem_pio2+0x610>
 800635c:	2000      	movs	r0, #0
 800635e:	2100      	movs	r1, #0
 8006360:	2d01      	cmp	r5, #1
 8006362:	f300 80a0 	bgt.w	80064a6 <__kernel_rem_pio2+0x64e>
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800636c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 809e 	bne.w	80064b2 <__kernel_rem_pio2+0x65a>
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	e9c3 7800 	strd	r7, r8, [r3]
 800637c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006380:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006384:	e033      	b.n	80063ee <__kernel_rem_pio2+0x596>
 8006386:	3408      	adds	r4, #8
 8006388:	ab4a      	add	r3, sp, #296	; 0x128
 800638a:	441c      	add	r4, r3
 800638c:	462e      	mov	r6, r5
 800638e:	2000      	movs	r0, #0
 8006390:	2100      	movs	r1, #0
 8006392:	2e00      	cmp	r6, #0
 8006394:	da3a      	bge.n	800640c <__kernel_rem_pio2+0x5b4>
 8006396:	9b02      	ldr	r3, [sp, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d03d      	beq.n	8006418 <__kernel_rem_pio2+0x5c0>
 800639c:	4602      	mov	r2, r0
 800639e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063a2:	9c01      	ldr	r4, [sp, #4]
 80063a4:	e9c4 2300 	strd	r2, r3, [r4]
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80063b0:	f7f9 ff7a 	bl	80002a8 <__aeabi_dsub>
 80063b4:	ae4c      	add	r6, sp, #304	; 0x130
 80063b6:	2401      	movs	r4, #1
 80063b8:	42a5      	cmp	r5, r4
 80063ba:	da30      	bge.n	800641e <__kernel_rem_pio2+0x5c6>
 80063bc:	9b02      	ldr	r3, [sp, #8]
 80063be:	b113      	cbz	r3, 80063c6 <__kernel_rem_pio2+0x56e>
 80063c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063c4:	4619      	mov	r1, r3
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80063cc:	e00f      	b.n	80063ee <__kernel_rem_pio2+0x596>
 80063ce:	ab9a      	add	r3, sp, #616	; 0x268
 80063d0:	441c      	add	r4, r3
 80063d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80063d6:	2000      	movs	r0, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	2d00      	cmp	r5, #0
 80063dc:	da10      	bge.n	8006400 <__kernel_rem_pio2+0x5a8>
 80063de:	9b02      	ldr	r3, [sp, #8]
 80063e0:	b113      	cbz	r3, 80063e8 <__kernel_rem_pio2+0x590>
 80063e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063e6:	4619      	mov	r1, r3
 80063e8:	9b01      	ldr	r3, [sp, #4]
 80063ea:	e9c3 0100 	strd	r0, r1, [r3]
 80063ee:	9b06      	ldr	r3, [sp, #24]
 80063f0:	f003 0007 	and.w	r0, r3, #7
 80063f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80063f8:	ecbd 8b02 	vpop	{d8}
 80063fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006400:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006404:	f7f9 ff52 	bl	80002ac <__adddf3>
 8006408:	3d01      	subs	r5, #1
 800640a:	e7e6      	b.n	80063da <__kernel_rem_pio2+0x582>
 800640c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006410:	f7f9 ff4c 	bl	80002ac <__adddf3>
 8006414:	3e01      	subs	r6, #1
 8006416:	e7bc      	b.n	8006392 <__kernel_rem_pio2+0x53a>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	e7c1      	b.n	80063a2 <__kernel_rem_pio2+0x54a>
 800641e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006422:	f7f9 ff43 	bl	80002ac <__adddf3>
 8006426:	3401      	adds	r4, #1
 8006428:	e7c6      	b.n	80063b8 <__kernel_rem_pio2+0x560>
 800642a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800642e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006432:	4640      	mov	r0, r8
 8006434:	ec53 2b17 	vmov	r2, r3, d7
 8006438:	4649      	mov	r1, r9
 800643a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800643e:	f7f9 ff35 	bl	80002ac <__adddf3>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4606      	mov	r6, r0
 8006448:	460f      	mov	r7, r1
 800644a:	4640      	mov	r0, r8
 800644c:	4649      	mov	r1, r9
 800644e:	f7f9 ff2b 	bl	80002a8 <__aeabi_dsub>
 8006452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006456:	f7f9 ff29 	bl	80002ac <__adddf3>
 800645a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800645e:	e9ca 0100 	strd	r0, r1, [sl]
 8006462:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006466:	e770      	b.n	800634a <__kernel_rem_pio2+0x4f2>
 8006468:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800646c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006470:	4630      	mov	r0, r6
 8006472:	ec53 2b17 	vmov	r2, r3, d7
 8006476:	4639      	mov	r1, r7
 8006478:	ed8d 7b04 	vstr	d7, [sp, #16]
 800647c:	f7f9 ff16 	bl	80002ac <__adddf3>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4680      	mov	r8, r0
 8006486:	4689      	mov	r9, r1
 8006488:	4630      	mov	r0, r6
 800648a:	4639      	mov	r1, r7
 800648c:	f7f9 ff0c 	bl	80002a8 <__aeabi_dsub>
 8006490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006494:	f7f9 ff0a 	bl	80002ac <__adddf3>
 8006498:	f10b 3bff 	add.w	fp, fp, #4294967295
 800649c:	e9ca 0100 	strd	r0, r1, [sl]
 80064a0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80064a4:	e756      	b.n	8006354 <__kernel_rem_pio2+0x4fc>
 80064a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064aa:	f7f9 feff 	bl	80002ac <__adddf3>
 80064ae:	3d01      	subs	r5, #1
 80064b0:	e756      	b.n	8006360 <__kernel_rem_pio2+0x508>
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	9a01      	ldr	r2, [sp, #4]
 80064b6:	601f      	str	r7, [r3, #0]
 80064b8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80064bc:	605c      	str	r4, [r3, #4]
 80064be:	609d      	str	r5, [r3, #8]
 80064c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064c4:	60d3      	str	r3, [r2, #12]
 80064c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ca:	6110      	str	r0, [r2, #16]
 80064cc:	6153      	str	r3, [r2, #20]
 80064ce:	e78e      	b.n	80063ee <__kernel_rem_pio2+0x596>
 80064d0:	41700000 	.word	0x41700000
 80064d4:	3e700000 	.word	0x3e700000

080064d8 <__kernel_sin>:
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	ec55 4b10 	vmov	r4, r5, d0
 80064e0:	b085      	sub	sp, #20
 80064e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80064e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80064ea:	ed8d 1b00 	vstr	d1, [sp]
 80064ee:	9002      	str	r0, [sp, #8]
 80064f0:	da06      	bge.n	8006500 <__kernel_sin+0x28>
 80064f2:	ee10 0a10 	vmov	r0, s0
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7fa fb28 	bl	8000b4c <__aeabi_d2iz>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d051      	beq.n	80065a4 <__kernel_sin+0xcc>
 8006500:	4622      	mov	r2, r4
 8006502:	462b      	mov	r3, r5
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7fa f886 	bl	8000618 <__aeabi_dmul>
 800650c:	4682      	mov	sl, r0
 800650e:	468b      	mov	fp, r1
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4620      	mov	r0, r4
 8006516:	4629      	mov	r1, r5
 8006518:	f7fa f87e 	bl	8000618 <__aeabi_dmul>
 800651c:	a341      	add	r3, pc, #260	; (adr r3, 8006624 <__kernel_sin+0x14c>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	4680      	mov	r8, r0
 8006524:	4689      	mov	r9, r1
 8006526:	4650      	mov	r0, sl
 8006528:	4659      	mov	r1, fp
 800652a:	f7fa f875 	bl	8000618 <__aeabi_dmul>
 800652e:	a33f      	add	r3, pc, #252	; (adr r3, 800662c <__kernel_sin+0x154>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7f9 feb8 	bl	80002a8 <__aeabi_dsub>
 8006538:	4652      	mov	r2, sl
 800653a:	465b      	mov	r3, fp
 800653c:	f7fa f86c 	bl	8000618 <__aeabi_dmul>
 8006540:	a33c      	add	r3, pc, #240	; (adr r3, 8006634 <__kernel_sin+0x15c>)
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	f7f9 feb1 	bl	80002ac <__adddf3>
 800654a:	4652      	mov	r2, sl
 800654c:	465b      	mov	r3, fp
 800654e:	f7fa f863 	bl	8000618 <__aeabi_dmul>
 8006552:	a33a      	add	r3, pc, #232	; (adr r3, 800663c <__kernel_sin+0x164>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7f9 fea6 	bl	80002a8 <__aeabi_dsub>
 800655c:	4652      	mov	r2, sl
 800655e:	465b      	mov	r3, fp
 8006560:	f7fa f85a 	bl	8000618 <__aeabi_dmul>
 8006564:	a337      	add	r3, pc, #220	; (adr r3, 8006644 <__kernel_sin+0x16c>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 fe9f 	bl	80002ac <__adddf3>
 800656e:	9b02      	ldr	r3, [sp, #8]
 8006570:	4606      	mov	r6, r0
 8006572:	460f      	mov	r7, r1
 8006574:	b9db      	cbnz	r3, 80065ae <__kernel_sin+0xd6>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4650      	mov	r0, sl
 800657c:	4659      	mov	r1, fp
 800657e:	f7fa f84b 	bl	8000618 <__aeabi_dmul>
 8006582:	a325      	add	r3, pc, #148	; (adr r3, 8006618 <__kernel_sin+0x140>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 fe8e 	bl	80002a8 <__aeabi_dsub>
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	f7fa f842 	bl	8000618 <__aeabi_dmul>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4620      	mov	r0, r4
 800659a:	4629      	mov	r1, r5
 800659c:	f7f9 fe86 	bl	80002ac <__adddf3>
 80065a0:	4604      	mov	r4, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	ec45 4b10 	vmov	d0, r4, r5
 80065a8:	b005      	add	sp, #20
 80065aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ae:	2200      	movs	r2, #0
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <__kernel_sin+0x148>)
 80065b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065b6:	f7fa f82f 	bl	8000618 <__aeabi_dmul>
 80065ba:	4632      	mov	r2, r6
 80065bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c0:	463b      	mov	r3, r7
 80065c2:	4640      	mov	r0, r8
 80065c4:	4649      	mov	r1, r9
 80065c6:	f7fa f827 	bl	8000618 <__aeabi_dmul>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d2:	f7f9 fe69 	bl	80002a8 <__aeabi_dsub>
 80065d6:	4652      	mov	r2, sl
 80065d8:	465b      	mov	r3, fp
 80065da:	f7fa f81d 	bl	8000618 <__aeabi_dmul>
 80065de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065e2:	f7f9 fe61 	bl	80002a8 <__aeabi_dsub>
 80065e6:	a30c      	add	r3, pc, #48	; (adr r3, 8006618 <__kernel_sin+0x140>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	4606      	mov	r6, r0
 80065ee:	460f      	mov	r7, r1
 80065f0:	4640      	mov	r0, r8
 80065f2:	4649      	mov	r1, r9
 80065f4:	f7fa f810 	bl	8000618 <__aeabi_dmul>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7f9 fe54 	bl	80002ac <__adddf3>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7f9 fe4c 	bl	80002a8 <__aeabi_dsub>
 8006610:	e7c6      	b.n	80065a0 <__kernel_sin+0xc8>
 8006612:	bf00      	nop
 8006614:	f3af 8000 	nop.w
 8006618:	55555549 	.word	0x55555549
 800661c:	3fc55555 	.word	0x3fc55555
 8006620:	3fe00000 	.word	0x3fe00000
 8006624:	5acfd57c 	.word	0x5acfd57c
 8006628:	3de5d93a 	.word	0x3de5d93a
 800662c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006630:	3e5ae5e6 	.word	0x3e5ae5e6
 8006634:	57b1fe7d 	.word	0x57b1fe7d
 8006638:	3ec71de3 	.word	0x3ec71de3
 800663c:	19c161d5 	.word	0x19c161d5
 8006640:	3f2a01a0 	.word	0x3f2a01a0
 8006644:	1110f8a6 	.word	0x1110f8a6
 8006648:	3f811111 	.word	0x3f811111

0800664c <fabs>:
 800664c:	ec51 0b10 	vmov	r0, r1, d0
 8006650:	ee10 2a10 	vmov	r2, s0
 8006654:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006658:	ec43 2b10 	vmov	d0, r2, r3
 800665c:	4770      	bx	lr
	...

08006660 <floor>:
 8006660:	ec51 0b10 	vmov	r0, r1, d0
 8006664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800666c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006670:	2e13      	cmp	r6, #19
 8006672:	460c      	mov	r4, r1
 8006674:	ee10 5a10 	vmov	r5, s0
 8006678:	4680      	mov	r8, r0
 800667a:	dc34      	bgt.n	80066e6 <floor+0x86>
 800667c:	2e00      	cmp	r6, #0
 800667e:	da16      	bge.n	80066ae <floor+0x4e>
 8006680:	a335      	add	r3, pc, #212	; (adr r3, 8006758 <floor+0xf8>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 fe11 	bl	80002ac <__adddf3>
 800668a:	2200      	movs	r2, #0
 800668c:	2300      	movs	r3, #0
 800668e:	f7fa fa53 	bl	8000b38 <__aeabi_dcmpgt>
 8006692:	b148      	cbz	r0, 80066a8 <floor+0x48>
 8006694:	2c00      	cmp	r4, #0
 8006696:	da59      	bge.n	800674c <floor+0xec>
 8006698:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800669c:	4a30      	ldr	r2, [pc, #192]	; (8006760 <floor+0x100>)
 800669e:	432b      	orrs	r3, r5
 80066a0:	2500      	movs	r5, #0
 80066a2:	42ab      	cmp	r3, r5
 80066a4:	bf18      	it	ne
 80066a6:	4614      	movne	r4, r2
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	e025      	b.n	80066fa <floor+0x9a>
 80066ae:	4f2d      	ldr	r7, [pc, #180]	; (8006764 <floor+0x104>)
 80066b0:	4137      	asrs	r7, r6
 80066b2:	ea01 0307 	and.w	r3, r1, r7
 80066b6:	4303      	orrs	r3, r0
 80066b8:	d01f      	beq.n	80066fa <floor+0x9a>
 80066ba:	a327      	add	r3, pc, #156	; (adr r3, 8006758 <floor+0xf8>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 fdf4 	bl	80002ac <__adddf3>
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	f7fa fa36 	bl	8000b38 <__aeabi_dcmpgt>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d0eb      	beq.n	80066a8 <floor+0x48>
 80066d0:	2c00      	cmp	r4, #0
 80066d2:	bfbe      	ittt	lt
 80066d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80066d8:	fa43 f606 	asrlt.w	r6, r3, r6
 80066dc:	19a4      	addlt	r4, r4, r6
 80066de:	ea24 0407 	bic.w	r4, r4, r7
 80066e2:	2500      	movs	r5, #0
 80066e4:	e7e0      	b.n	80066a8 <floor+0x48>
 80066e6:	2e33      	cmp	r6, #51	; 0x33
 80066e8:	dd0b      	ble.n	8006702 <floor+0xa2>
 80066ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80066ee:	d104      	bne.n	80066fa <floor+0x9a>
 80066f0:	ee10 2a10 	vmov	r2, s0
 80066f4:	460b      	mov	r3, r1
 80066f6:	f7f9 fdd9 	bl	80002ac <__adddf3>
 80066fa:	ec41 0b10 	vmov	d0, r0, r1
 80066fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006702:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006706:	f04f 33ff 	mov.w	r3, #4294967295
 800670a:	fa23 f707 	lsr.w	r7, r3, r7
 800670e:	4207      	tst	r7, r0
 8006710:	d0f3      	beq.n	80066fa <floor+0x9a>
 8006712:	a311      	add	r3, pc, #68	; (adr r3, 8006758 <floor+0xf8>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 fdc8 	bl	80002ac <__adddf3>
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	f7fa fa0a 	bl	8000b38 <__aeabi_dcmpgt>
 8006724:	2800      	cmp	r0, #0
 8006726:	d0bf      	beq.n	80066a8 <floor+0x48>
 8006728:	2c00      	cmp	r4, #0
 800672a:	da02      	bge.n	8006732 <floor+0xd2>
 800672c:	2e14      	cmp	r6, #20
 800672e:	d103      	bne.n	8006738 <floor+0xd8>
 8006730:	3401      	adds	r4, #1
 8006732:	ea25 0507 	bic.w	r5, r5, r7
 8006736:	e7b7      	b.n	80066a8 <floor+0x48>
 8006738:	2301      	movs	r3, #1
 800673a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800673e:	fa03 f606 	lsl.w	r6, r3, r6
 8006742:	4435      	add	r5, r6
 8006744:	4545      	cmp	r5, r8
 8006746:	bf38      	it	cc
 8006748:	18e4      	addcc	r4, r4, r3
 800674a:	e7f2      	b.n	8006732 <floor+0xd2>
 800674c:	2500      	movs	r5, #0
 800674e:	462c      	mov	r4, r5
 8006750:	e7aa      	b.n	80066a8 <floor+0x48>
 8006752:	bf00      	nop
 8006754:	f3af 8000 	nop.w
 8006758:	8800759c 	.word	0x8800759c
 800675c:	7e37e43c 	.word	0x7e37e43c
 8006760:	bff00000 	.word	0xbff00000
 8006764:	000fffff 	.word	0x000fffff

08006768 <scalbn>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	ec55 4b10 	vmov	r4, r5, d0
 800676e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006772:	4606      	mov	r6, r0
 8006774:	462b      	mov	r3, r5
 8006776:	b9aa      	cbnz	r2, 80067a4 <scalbn+0x3c>
 8006778:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800677c:	4323      	orrs	r3, r4
 800677e:	d03b      	beq.n	80067f8 <scalbn+0x90>
 8006780:	4b31      	ldr	r3, [pc, #196]	; (8006848 <scalbn+0xe0>)
 8006782:	4629      	mov	r1, r5
 8006784:	2200      	movs	r2, #0
 8006786:	ee10 0a10 	vmov	r0, s0
 800678a:	f7f9 ff45 	bl	8000618 <__aeabi_dmul>
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <scalbn+0xe4>)
 8006790:	429e      	cmp	r6, r3
 8006792:	4604      	mov	r4, r0
 8006794:	460d      	mov	r5, r1
 8006796:	da12      	bge.n	80067be <scalbn+0x56>
 8006798:	a327      	add	r3, pc, #156	; (adr r3, 8006838 <scalbn+0xd0>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f7f9 ff3b 	bl	8000618 <__aeabi_dmul>
 80067a2:	e009      	b.n	80067b8 <scalbn+0x50>
 80067a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80067a8:	428a      	cmp	r2, r1
 80067aa:	d10c      	bne.n	80067c6 <scalbn+0x5e>
 80067ac:	ee10 2a10 	vmov	r2, s0
 80067b0:	4620      	mov	r0, r4
 80067b2:	4629      	mov	r1, r5
 80067b4:	f7f9 fd7a 	bl	80002ac <__adddf3>
 80067b8:	4604      	mov	r4, r0
 80067ba:	460d      	mov	r5, r1
 80067bc:	e01c      	b.n	80067f8 <scalbn+0x90>
 80067be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80067c2:	460b      	mov	r3, r1
 80067c4:	3a36      	subs	r2, #54	; 0x36
 80067c6:	4432      	add	r2, r6
 80067c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80067cc:	428a      	cmp	r2, r1
 80067ce:	dd0b      	ble.n	80067e8 <scalbn+0x80>
 80067d0:	ec45 4b11 	vmov	d1, r4, r5
 80067d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006840 <scalbn+0xd8>
 80067d8:	f000 f83c 	bl	8006854 <copysign>
 80067dc:	a318      	add	r3, pc, #96	; (adr r3, 8006840 <scalbn+0xd8>)
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	ec51 0b10 	vmov	r0, r1, d0
 80067e6:	e7da      	b.n	800679e <scalbn+0x36>
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	dd08      	ble.n	80067fe <scalbn+0x96>
 80067ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067f8:	ec45 4b10 	vmov	d0, r4, r5
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
 80067fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006802:	da0d      	bge.n	8006820 <scalbn+0xb8>
 8006804:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006808:	429e      	cmp	r6, r3
 800680a:	ec45 4b11 	vmov	d1, r4, r5
 800680e:	dce1      	bgt.n	80067d4 <scalbn+0x6c>
 8006810:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006838 <scalbn+0xd0>
 8006814:	f000 f81e 	bl	8006854 <copysign>
 8006818:	a307      	add	r3, pc, #28	; (adr r3, 8006838 <scalbn+0xd0>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	e7e0      	b.n	80067e2 <scalbn+0x7a>
 8006820:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006824:	3236      	adds	r2, #54	; 0x36
 8006826:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800682a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800682e:	4620      	mov	r0, r4
 8006830:	4629      	mov	r1, r5
 8006832:	2200      	movs	r2, #0
 8006834:	4b06      	ldr	r3, [pc, #24]	; (8006850 <scalbn+0xe8>)
 8006836:	e7b2      	b.n	800679e <scalbn+0x36>
 8006838:	c2f8f359 	.word	0xc2f8f359
 800683c:	01a56e1f 	.word	0x01a56e1f
 8006840:	8800759c 	.word	0x8800759c
 8006844:	7e37e43c 	.word	0x7e37e43c
 8006848:	43500000 	.word	0x43500000
 800684c:	ffff3cb0 	.word	0xffff3cb0
 8006850:	3c900000 	.word	0x3c900000

08006854 <copysign>:
 8006854:	ec51 0b10 	vmov	r0, r1, d0
 8006858:	ee11 0a90 	vmov	r0, s3
 800685c:	ee10 2a10 	vmov	r2, s0
 8006860:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006864:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006868:	ea41 0300 	orr.w	r3, r1, r0
 800686c:	ec43 2b10 	vmov	d0, r2, r3
 8006870:	4770      	bx	lr
	...

08006874 <_init>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	bf00      	nop
 8006878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687a:	bc08      	pop	{r3}
 800687c:	469e      	mov	lr, r3
 800687e:	4770      	bx	lr

08006880 <_fini>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr
