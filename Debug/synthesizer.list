
synthesizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063ec  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08006578  08006578  00016578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006870  08006870  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006878  08006878  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800687c  0800687c  0001687c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b60  20000030  080068b0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  080068b0  00020b90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caab  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d38  00000000  00000000  0002cb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000213b4  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a65  00000000  00000000  00051594  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb6d1  00000000  00000000  0005aff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001266ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  00126748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800655c 	.word	0x0800655c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	0800655c 	.word	0x0800655c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031a:	f1a4 0401 	sub.w	r4, r4, #1
 800031e:	d1e9      	bne.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__gedf2>:
 8000978:	f04f 3cff 	mov.w	ip, #4294967295
 800097c:	e006      	b.n	800098c <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__ledf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	e002      	b.n	800098c <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__cmpdf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a2:	d01b      	beq.n	80009dc <__cmpdf2+0x54>
 80009a4:	b001      	add	sp, #4
 80009a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009aa:	bf0c      	ite	eq
 80009ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b0:	ea91 0f03 	teqne	r1, r3
 80009b4:	bf02      	ittt	eq
 80009b6:	ea90 0f02 	teqeq	r0, r2
 80009ba:	2000      	moveq	r0, #0
 80009bc:	4770      	bxeq	lr
 80009be:	f110 0f00 	cmn.w	r0, #0
 80009c2:	ea91 0f03 	teq	r1, r3
 80009c6:	bf58      	it	pl
 80009c8:	4299      	cmppl	r1, r3
 80009ca:	bf08      	it	eq
 80009cc:	4290      	cmpeq	r0, r2
 80009ce:	bf2c      	ite	cs
 80009d0:	17d8      	asrcs	r0, r3, #31
 80009d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d6:	f040 0001 	orr.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d102      	bne.n	80009ec <__cmpdf2+0x64>
 80009e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ea:	d107      	bne.n	80009fc <__cmpdf2+0x74>
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d1d6      	bne.n	80009a4 <__cmpdf2+0x1c>
 80009f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fa:	d0d3      	beq.n	80009a4 <__cmpdf2+0x1c>
 80009fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdrcmple>:
 8000a04:	4684      	mov	ip, r0
 8000a06:	4610      	mov	r0, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	468c      	mov	ip, r1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4663      	mov	r3, ip
 8000a10:	e000      	b.n	8000a14 <__aeabi_cdcmpeq>
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdcmpeq>:
 8000a14:	b501      	push	{r0, lr}
 8000a16:	f7ff ffb7 	bl	8000988 <__cmpdf2>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	bf48      	it	mi
 8000a1e:	f110 0f00 	cmnmi.w	r0, #0
 8000a22:	bd01      	pop	{r0, pc}

08000a24 <__aeabi_dcmpeq>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff fff4 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2001      	moveq	r0, #1
 8000a30:	2000      	movne	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmplt>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffea 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a40:	bf34      	ite	cc
 8000a42:	2001      	movcc	r0, #1
 8000a44:	2000      	movcs	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmple>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffe0 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpge>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffce 	bl	8000a04 <__aeabi_cdrcmple>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpgt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffc4 	bl	8000a04 <__aeabi_cdrcmple>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2iz>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d215      	bcs.n	8000abe <__aeabi_d2iz+0x36>
 8000a92:	d511      	bpl.n	8000ab8 <__aeabi_d2iz+0x30>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d912      	bls.n	8000ac4 <__aeabi_d2iz+0x3c>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_d2iz+0x48>
 8000ac4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_d2uiz>:
 8000ad8:	004a      	lsls	r2, r1, #1
 8000ada:	d211      	bcs.n	8000b00 <__aeabi_d2uiz+0x28>
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d211      	bcs.n	8000b06 <__aeabi_d2uiz+0x2e>
 8000ae2:	d50d      	bpl.n	8000b00 <__aeabi_d2uiz+0x28>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d40e      	bmi.n	8000b0c <__aeabi_d2uiz+0x34>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_d2uiz+0x3a>
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b972 	b.w	8000e14 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9e08      	ldr	r6, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4688      	mov	r8, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d14b      	bne.n	8000bee <__udivmoddi4+0xa6>
 8000b56:	428a      	cmp	r2, r1
 8000b58:	4615      	mov	r5, r2
 8000b5a:	d967      	bls.n	8000c2c <__udivmoddi4+0xe4>
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	b14a      	cbz	r2, 8000b76 <__udivmoddi4+0x2e>
 8000b62:	f1c2 0720 	rsb	r7, r2, #32
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6e:	4095      	lsls	r5, r2
 8000b70:	ea47 0803 	orr.w	r8, r7, r3
 8000b74:	4094      	lsls	r4, r2
 8000b76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7a:	0c23      	lsrs	r3, r4, #16
 8000b7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b80:	fa1f fc85 	uxth.w	ip, r5
 8000b84:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b8c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x60>
 8000b94:	18eb      	adds	r3, r5, r3
 8000b96:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9a:	f080 811b 	bcs.w	8000dd4 <__udivmoddi4+0x28c>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 8118 	bls.w	8000dd4 <__udivmoddi4+0x28c>
 8000ba4:	3f02      	subs	r7, #2
 8000ba6:	442b      	add	r3, r5
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bbc:	45a4      	cmp	ip, r4
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x8c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	f080 8107 	bcs.w	8000dd8 <__udivmoddi4+0x290>
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	f240 8104 	bls.w	8000dd8 <__udivmoddi4+0x290>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	442c      	add	r4, r5
 8000bd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd8:	eba4 040c 	sub.w	r4, r4, ip
 8000bdc:	2700      	movs	r7, #0
 8000bde:	b11e      	cbz	r6, 8000be8 <__udivmoddi4+0xa0>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c6 4300 	strd	r4, r3, [r6]
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0xbe>
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	f000 80eb 	beq.w	8000dce <__udivmoddi4+0x286>
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfe:	4638      	mov	r0, r7
 8000c00:	4639      	mov	r1, r7
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	fab3 f783 	clz	r7, r3
 8000c0a:	2f00      	cmp	r7, #0
 8000c0c:	d147      	bne.n	8000c9e <__udivmoddi4+0x156>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xd0>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80fa 	bhi.w	8000e0c <__udivmoddi4+0x2c4>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	4698      	mov	r8, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d0e0      	beq.n	8000be8 <__udivmoddi4+0xa0>
 8000c26:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2a:	e7dd      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000c2c:	b902      	cbnz	r2, 8000c30 <__udivmoddi4+0xe8>
 8000c2e:	deff      	udf	#255	; 0xff
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f040 808f 	bne.w	8000d58 <__udivmoddi4+0x210>
 8000c3a:	1b49      	subs	r1, r1, r5
 8000c3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c40:	fa1f f885 	uxth.w	r8, r5
 8000c44:	2701      	movs	r7, #1
 8000c46:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c54:	fb08 f10c 	mul.w	r1, r8, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x124>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x122>
 8000c64:	4299      	cmp	r1, r3
 8000c66:	f200 80cd 	bhi.w	8000e04 <__udivmoddi4+0x2bc>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x14c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x14a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80b6 	bhi.w	8000dfe <__udivmoddi4+0x2b6>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e79f      	b.n	8000bde <__udivmoddi4+0x96>
 8000c9e:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca2:	40bb      	lsls	r3, r7
 8000ca4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cac:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cbc:	4325      	orrs	r5, r4
 8000cbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc2:	0c2c      	lsrs	r4, r5, #16
 8000cc4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc8:	fa1f fa8e 	uxth.w	sl, lr
 8000ccc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd0:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cda:	fa00 f107 	lsl.w	r1, r0, r7
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x1b0>
 8000ce0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	f080 8087 	bcs.w	8000dfa <__udivmoddi4+0x2b2>
 8000cec:	429c      	cmp	r4, r3
 8000cee:	f240 8084 	bls.w	8000dfa <__udivmoddi4+0x2b2>
 8000cf2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf6:	4473      	add	r3, lr
 8000cf8:	1b1b      	subs	r3, r3, r4
 8000cfa:	b2ad      	uxth	r5, r5
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d08:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d0c:	45a2      	cmp	sl, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x1da>
 8000d10:	eb1e 0404 	adds.w	r4, lr, r4
 8000d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d18:	d26b      	bcs.n	8000df2 <__udivmoddi4+0x2aa>
 8000d1a:	45a2      	cmp	sl, r4
 8000d1c:	d969      	bls.n	8000df2 <__udivmoddi4+0x2aa>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	4474      	add	r4, lr
 8000d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d26:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2a:	eba4 040a 	sub.w	r4, r4, sl
 8000d2e:	454c      	cmp	r4, r9
 8000d30:	46c2      	mov	sl, r8
 8000d32:	464b      	mov	r3, r9
 8000d34:	d354      	bcc.n	8000de0 <__udivmoddi4+0x298>
 8000d36:	d051      	beq.n	8000ddc <__udivmoddi4+0x294>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d069      	beq.n	8000e10 <__udivmoddi4+0x2c8>
 8000d3c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d40:	eb64 0403 	sbc.w	r4, r4, r3
 8000d44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d48:	40fd      	lsrs	r5, r7
 8000d4a:	40fc      	lsrs	r4, r7
 8000d4c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d50:	e9c6 5400 	strd	r5, r4, [r6]
 8000d54:	2700      	movs	r7, #0
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000d58:	f1c2 0320 	rsb	r3, r2, #32
 8000d5c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d60:	4095      	lsls	r5, r2
 8000d62:	fa01 f002 	lsl.w	r0, r1, r2
 8000d66:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6e:	4338      	orrs	r0, r7
 8000d70:	0c01      	lsrs	r1, r0, #16
 8000d72:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d76:	fa1f f885 	uxth.w	r8, r5
 8000d7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb07 f308 	mul.w	r3, r7, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x256>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d94:	d22f      	bcs.n	8000df6 <__udivmoddi4+0x2ae>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d92d      	bls.n	8000df6 <__udivmoddi4+0x2ae>
 8000d9a:	3f02      	subs	r7, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	b281      	uxth	r1, r0
 8000da2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	fb00 f308 	mul.w	r3, r0, r8
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x27e>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dbc:	d217      	bcs.n	8000dee <__udivmoddi4+0x2a6>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d915      	bls.n	8000dee <__udivmoddi4+0x2a6>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dcc:	e73b      	b.n	8000c46 <__udivmoddi4+0xfe>
 8000dce:	4637      	mov	r7, r6
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	e709      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000dd4:	4607      	mov	r7, r0
 8000dd6:	e6e7      	b.n	8000ba8 <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fb      	b.n	8000bd4 <__udivmoddi4+0x8c>
 8000ddc:	4541      	cmp	r1, r8
 8000dde:	d2ab      	bcs.n	8000d38 <__udivmoddi4+0x1f0>
 8000de0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de4:	eb69 020e 	sbc.w	r2, r9, lr
 8000de8:	3801      	subs	r0, #1
 8000dea:	4613      	mov	r3, r2
 8000dec:	e7a4      	b.n	8000d38 <__udivmoddi4+0x1f0>
 8000dee:	4660      	mov	r0, ip
 8000df0:	e7e9      	b.n	8000dc6 <__udivmoddi4+0x27e>
 8000df2:	4618      	mov	r0, r3
 8000df4:	e795      	b.n	8000d22 <__udivmoddi4+0x1da>
 8000df6:	4667      	mov	r7, ip
 8000df8:	e7d1      	b.n	8000d9e <__udivmoddi4+0x256>
 8000dfa:	4681      	mov	r9, r0
 8000dfc:	e77c      	b.n	8000cf8 <__udivmoddi4+0x1b0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	442c      	add	r4, r5
 8000e02:	e747      	b.n	8000c94 <__udivmoddi4+0x14c>
 8000e04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e08:	442b      	add	r3, r5
 8000e0a:	e72f      	b.n	8000c6c <__udivmoddi4+0x124>
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xda>
 8000e10:	4637      	mov	r7, r6
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0xa0>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <setNote>:
#include <string.h>

void setNote(char* note, TIM_HandleTypeDef* htim){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
   HAL_TIM_Base_Stop_IT(htim);
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f003 f929 	bl	800407a <HAL_TIM_Base_Stop_IT>
   __HAL_TIM_SET_COUNTER(htim, 0);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
   HAL_TIM_Base_Start_IT(htim);
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f003 f8fe 	bl	8004032 <HAL_TIM_Base_Start_IT>
   if(strcmp(note, "pp ") == 0){
 8000e36:	49a3      	ldr	r1, [pc, #652]	; (80010c4 <setNote+0x2ac>)
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff f9c5 	bl	80001c8 <strcmp>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d108      	bne.n	8000e56 <setNote+0x3e>
          htim->Instance->PSC = 13;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	220d      	movs	r2, #13
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 59999;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C2 ") == 0){
 8000e56:	499c      	ldr	r1, [pc, #624]	; (80010c8 <setNote+0x2b0>)
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff f9b5 	bl	80001c8 <strcmp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d108      	bne.n	8000e76 <setNote+0x5e>
          htim->Instance->PSC = 6460;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f641 123c 	movw	r2, #6460	; 0x193c
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2201      	movs	r2, #1
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS2") == 0){
 8000e76:	4995      	ldr	r1, [pc, #596]	; (80010cc <setNote+0x2b4>)
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff f9a5 	bl	80001c8 <strcmp>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d108      	bne.n	8000e96 <setNote+0x7e>
          htim->Instance->PSC = 1738;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f240 62ca 	movw	r2, #1738	; 0x6ca
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 6;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2206      	movs	r2, #6
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D2 ") == 0){
 8000e96:	498e      	ldr	r1, [pc, #568]	; (80010d0 <setNote+0x2b8>)
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff f995 	bl	80001c8 <strcmp>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d108      	bne.n	8000eb6 <setNote+0x9e>
          htim->Instance->PSC = 10;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1045;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f240 4215 	movw	r2, #1045	; 0x415
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS2") == 0){
 8000eb6:	4987      	ldr	r1, [pc, #540]	; (80010d4 <setNote+0x2bc>)
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff f985 	bl	80001c8 <strcmp>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d108      	bne.n	8000ed6 <setNote+0xbe>
          htim->Instance->PSC = 10;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	220a      	movs	r2, #10
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 978;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E2 ") == 0){
 8000ed6:	4980      	ldr	r1, [pc, #512]	; (80010d8 <setNote+0x2c0>)
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff f975 	bl	80001c8 <strcmp>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <setNote+0xde>
          htim->Instance->PSC = 568;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f44f 720e 	mov.w	r2, #568	; 0x238
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 17;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2211      	movs	r2, #17
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F2 ") == 0){
 8000ef6:	4979      	ldr	r1, [pc, #484]	; (80010dc <setNote+0x2c4>)
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff f965 	bl	80001c8 <strcmp>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d108      	bne.n	8000f16 <setNote+0xfe>
          htim->Instance->PSC = 1930;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f240 728a 	movw	r2, #1930	; 0x78a
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2204      	movs	r2, #4
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS2") == 0){
 8000f16:	4972      	ldr	r1, [pc, #456]	; (80010e0 <setNote+0x2c8>)
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff f955 	bl	80001c8 <strcmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d107      	bne.n	8000f34 <setNote+0x11c>
          htim->Instance->PSC = 54;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2236      	movs	r2, #54	; 0x36
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 165;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	22a5      	movs	r2, #165	; 0xa5
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G2 ") == 0){
 8000f34:	496b      	ldr	r1, [pc, #428]	; (80010e4 <setNote+0x2cc>)
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff f946 	bl	80001c8 <strcmp>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d108      	bne.n	8000f54 <setNote+0x13c>
          htim->Instance->PSC = 2856;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f640 3228 	movw	r2, #2856	; 0xb28
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2202      	movs	r2, #2
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS2") == 0){
 8000f54:	4964      	ldr	r1, [pc, #400]	; (80010e8 <setNote+0x2d0>)
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff f936 	bl	80001c8 <strcmp>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d108      	bne.n	8000f74 <setNote+0x15c>
          htim->Instance->PSC = 672;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 11;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	220b      	movs	r2, #11
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A2 ") == 0){
 8000f74:	495d      	ldr	r1, [pc, #372]	; (80010ec <setNote+0x2d4>)
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff f926 	bl	80001c8 <strcmp>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d108      	bne.n	8000f94 <setNote+0x17c>
          htim->Instance->PSC = 22;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2216      	movs	r2, #22
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 331;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f240 124b 	movw	r2, #331	; 0x14b
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS2") == 0){
 8000f94:	4956      	ldr	r1, [pc, #344]	; (80010f0 <setNote+0x2d8>)
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff f916 	bl	80001c8 <strcmp>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d108      	bne.n	8000fb4 <setNote+0x19c>
          htim->Instance->PSC = 2392;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f640 1258 	movw	r2, #2392	; 0x958
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B2 ") == 0){
 8000fb4:	494f      	ldr	r1, [pc, #316]	; (80010f4 <setNote+0x2dc>)
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff f906 	bl	80001c8 <strcmp>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d108      	bne.n	8000fd4 <setNote+0x1bc>
          htim->Instance->PSC = 568;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f44f 720e 	mov.w	r2, #568	; 0x238
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 11;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	220b      	movs	r2, #11
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C3 ") == 0){
 8000fd4:	4948      	ldr	r1, [pc, #288]	; (80010f8 <setNote+0x2e0>)
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff f8f6 	bl	80001c8 <strcmp>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <setNote+0x1dc>
          htim->Instance->PSC = 1602;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f240 6242 	movw	r2, #1602	; 0x642
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS3") == 0){
 8000ff4:	4941      	ldr	r1, [pc, #260]	; (80010fc <setNote+0x2e4>)
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff f8e6 	bl	80001c8 <strcmp>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d108      	bne.n	8001014 <setNote+0x1fc>
          htim->Instance->PSC = 3020;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f640 32cc 	movw	r2, #3020	; 0xbcc
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D3 ") == 0){
 8001014:	493a      	ldr	r1, [pc, #232]	; (8001100 <setNote+0x2e8>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff f8d6 	bl	80001c8 <strcmp>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d108      	bne.n	8001034 <setNote+0x21c>
          htim->Instance->PSC = 2856;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f640 3228 	movw	r2, #2856	; 0xb28
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2201      	movs	r2, #1
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS3") == 0){
 8001034:	4933      	ldr	r1, [pc, #204]	; (8001104 <setNote+0x2ec>)
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff f8c6 	bl	80001c8 <strcmp>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d108      	bne.n	8001054 <setNote+0x23c>
          htim->Instance->PSC = 672;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 7;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2207      	movs	r2, #7
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E3 ") == 0){
 8001054:	492c      	ldr	r1, [pc, #176]	; (8001108 <setNote+0x2f0>)
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff f8b6 	bl	80001c8 <strcmp>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d108      	bne.n	8001074 <setNote+0x25c>
          htim->Instance->PSC = 2544;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F3 ") == 0){
 8001074:	4925      	ldr	r1, [pc, #148]	; (800110c <setNote+0x2f4>)
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff f8a6 	bl	80001c8 <strcmp>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d108      	bne.n	8001094 <setNote+0x27c>
          htim->Instance->PSC = 0;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4799;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS3") == 0){
 8001094:	491e      	ldr	r1, [pc, #120]	; (8001110 <setNote+0x2f8>)
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff f896 	bl	80001c8 <strcmp>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d108      	bne.n	80010b4 <setNote+0x29c>
          htim->Instance->PSC = 1134;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f240 426e 	movw	r2, #1134	; 0x46e
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2203      	movs	r2, #3
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G3 ") == 0){
 80010b4:	4917      	ldr	r1, [pc, #92]	; (8001114 <setNote+0x2fc>)
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff f886 	bl	80001c8 <strcmp>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	e02a      	b.n	8001118 <setNote+0x300>
 80010c2:	bf00      	nop
 80010c4:	08006578 	.word	0x08006578
 80010c8:	0800657c 	.word	0x0800657c
 80010cc:	08006580 	.word	0x08006580
 80010d0:	08006584 	.word	0x08006584
 80010d4:	08006588 	.word	0x08006588
 80010d8:	0800658c 	.word	0x0800658c
 80010dc:	08006590 	.word	0x08006590
 80010e0:	08006594 	.word	0x08006594
 80010e4:	08006598 	.word	0x08006598
 80010e8:	0800659c 	.word	0x0800659c
 80010ec:	080065a0 	.word	0x080065a0
 80010f0:	080065a4 	.word	0x080065a4
 80010f4:	080065a8 	.word	0x080065a8
 80010f8:	080065ac 	.word	0x080065ac
 80010fc:	080065b0 	.word	0x080065b0
 8001100:	080065b4 	.word	0x080065b4
 8001104:	080065b8 	.word	0x080065b8
 8001108:	080065bc 	.word	0x080065bc
 800110c:	080065c0 	.word	0x080065c0
 8001110:	080065c4 	.word	0x080065c4
 8001114:	080065c8 	.word	0x080065c8
 8001118:	d108      	bne.n	800112c <setNote+0x314>
          htim->Instance->PSC = 856;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f44f 7256 	mov.w	r2, #856	; 0x358
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS3") == 0){
 800112c:	499f      	ldr	r1, [pc, #636]	; (80013ac <setNote+0x594>)
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff f84a 	bl	80001c8 <strcmp>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d108      	bne.n	800114c <setNote+0x334>
          htim->Instance->PSC = 672;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 5;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2205      	movs	r2, #5
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A3 ") == 0){
 800114c:	4998      	ldr	r1, [pc, #608]	; (80013b0 <setNote+0x598>)
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff f83a 	bl	80001c8 <strcmp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <setNote+0x352>
          htim->Instance->PSC = 22;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2216      	movs	r2, #22
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 165;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	22a5      	movs	r2, #165	; 0xa5
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS3") == 0){
 800116a:	4992      	ldr	r1, [pc, #584]	; (80013b4 <setNote+0x59c>)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f82b 	bl	80001c8 <strcmp>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <setNote+0x372>
          htim->Instance->PSC = 720;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2204      	movs	r2, #4
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B3 ") == 0){
 800118a:	498b      	ldr	r1, [pc, #556]	; (80013b8 <setNote+0x5a0>)
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff f81b 	bl	80001c8 <strcmp>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d108      	bne.n	80011aa <setNote+0x392>
          htim->Instance->PSC = 424;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 7;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2207      	movs	r2, #7
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C4 ") == 0){
 80011aa:	4984      	ldr	r1, [pc, #528]	; (80013bc <setNote+0x5a4>)
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff f80b 	bl	80001c8 <strcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d108      	bne.n	80011ca <setNote+0x3b2>
          htim->Instance->PSC = 1602;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f240 6242 	movw	r2, #1602	; 0x642
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2201      	movs	r2, #1
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS4") == 0){
 80011ca:	497d      	ldr	r1, [pc, #500]	; (80013c0 <setNote+0x5a8>)
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7fe fffb 	bl	80001c8 <strcmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d108      	bne.n	80011ea <setNote+0x3d2>
          htim->Instance->PSC = 378;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 7;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2207      	movs	r2, #7
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D4 ") == 0){
 80011ea:	4976      	ldr	r1, [pc, #472]	; (80013c4 <setNote+0x5ac>)
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7fe ffeb 	bl	80001c8 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d107      	bne.n	8001208 <setNote+0x3f0>
          htim->Instance->PSC = 118;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2276      	movs	r2, #118	; 0x76
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 23;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2217      	movs	r2, #23
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS4") == 0){
 8001208:	496f      	ldr	r1, [pc, #444]	; (80013c8 <setNote+0x5b0>)
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7fe ffdc 	bl	80001c8 <strcmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d107      	bne.n	8001226 <setNote+0x40e>
          htim->Instance->PSC = 44;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	222c      	movs	r2, #44	; 0x2c
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 59;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	223b      	movs	r2, #59	; 0x3b
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E4 ") == 0){
 8001226:	4969      	ldr	r1, [pc, #420]	; (80013cc <setNote+0x5b4>)
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7fe ffcd 	bl	80001c8 <strcmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <setNote+0x42e>
          htim->Instance->PSC = 508;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2204      	movs	r2, #4
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F4 ") == 0){
 8001246:	4962      	ldr	r1, [pc, #392]	; (80013d0 <setNote+0x5b8>)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7fe ffbd 	bl	80001c8 <strcmp>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d108      	bne.n	8001266 <setNote+0x44e>
          htim->Instance->PSC = 1202;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f240 42b2 	movw	r2, #1202	; 0x4b2
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS4") == 0){
 8001266:	495b      	ldr	r1, [pc, #364]	; (80013d4 <setNote+0x5bc>)
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7fe ffad 	bl	80001c8 <strcmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d108      	bne.n	8001286 <setNote+0x46e>
          htim->Instance->PSC = 1134;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f240 426e 	movw	r2, #1134	; 0x46e
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2201      	movs	r2, #1
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G4 ") == 0){
 8001286:	4954      	ldr	r1, [pc, #336]	; (80013d8 <setNote+0x5c0>)
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7fe ff9d 	bl	80001c8 <strcmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d107      	bne.n	80012a4 <setNote+0x48c>
          htim->Instance->PSC = 62;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	223e      	movs	r2, #62	; 0x3e
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 33;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2221      	movs	r2, #33	; 0x21
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS4") == 0){
 80012a4:	494d      	ldr	r1, [pc, #308]	; (80013dc <setNote+0x5c4>)
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7fe ff8e 	bl	80001c8 <strcmp>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <setNote+0x4aa>
          htim->Instance->PSC = 22;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2216      	movs	r2, #22
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 87;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2257      	movs	r2, #87	; 0x57
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A4 ") == 0){
 80012c2:	4947      	ldr	r1, [pc, #284]	; (80013e0 <setNote+0x5c8>)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7fe ff7f 	bl	80001c8 <strcmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <setNote+0x4c8>
          htim->Instance->PSC = 22;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2216      	movs	r2, #22
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 82;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2252      	movs	r2, #82	; 0x52
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS4") == 0){
 80012e0:	4940      	ldr	r1, [pc, #256]	; (80013e4 <setNote+0x5cc>)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7fe ff70 	bl	80001c8 <strcmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d107      	bne.n	80012fe <setNote+0x4e6>
          htim->Instance->PSC = 52;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2234      	movs	r2, #52	; 0x34
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 33;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2221      	movs	r2, #33	; 0x21
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B4 ") == 0){
 80012fe:	493a      	ldr	r1, [pc, #232]	; (80013e8 <setNote+0x5d0>)
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7fe ff61 	bl	80001c8 <strcmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d108      	bne.n	800131e <setNote+0x506>
          htim->Instance->PSC = 424;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2203      	movs	r2, #3
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C5 ") == 0){
 800131e:	4933      	ldr	r1, [pc, #204]	; (80013ec <setNote+0x5d4>)
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7fe ff51 	bl	80001c8 <strcmp>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d108      	bne.n	800133e <setNote+0x526>
          htim->Instance->PSC = 802;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f240 3222 	movw	r2, #802	; 0x322
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2201      	movs	r2, #1
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS5") == 0){
 800133e:	492c      	ldr	r1, [pc, #176]	; (80013f0 <setNote+0x5d8>)
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7fe ff41 	bl	80001c8 <strcmp>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d108      	bne.n	800135e <setNote+0x546>
          htim->Instance->PSC = 378;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 3;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2203      	movs	r2, #3
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D5 ") == 0){
 800135e:	4925      	ldr	r1, [pc, #148]	; (80013f4 <setNote+0x5dc>)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7fe ff31 	bl	80001c8 <strcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d108      	bne.n	800137e <setNote+0x566>
          htim->Instance->PSC = 476;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2202      	movs	r2, #2
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS5") == 0){
 800137e:	491e      	ldr	r1, [pc, #120]	; (80013f8 <setNote+0x5e0>)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7fe ff21 	bl	80001c8 <strcmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d107      	bne.n	800139c <setNote+0x584>
          htim->Instance->PSC = 44;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	222c      	movs	r2, #44	; 0x2c
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 29;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	221d      	movs	r2, #29
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E5 ") == 0){
 800139c:	4917      	ldr	r1, [pc, #92]	; (80013fc <setNote+0x5e4>)
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7fe ff12 	bl	80001c8 <strcmp>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d132      	bne.n	8001410 <setNote+0x5f8>
 80013aa:	e029      	b.n	8001400 <setNote+0x5e8>
 80013ac:	080065cc 	.word	0x080065cc
 80013b0:	080065d0 	.word	0x080065d0
 80013b4:	080065d4 	.word	0x080065d4
 80013b8:	080065d8 	.word	0x080065d8
 80013bc:	080065dc 	.word	0x080065dc
 80013c0:	080065e0 	.word	0x080065e0
 80013c4:	080065e4 	.word	0x080065e4
 80013c8:	080065e8 	.word	0x080065e8
 80013cc:	080065ec 	.word	0x080065ec
 80013d0:	080065f0 	.word	0x080065f0
 80013d4:	080065f4 	.word	0x080065f4
 80013d8:	080065f8 	.word	0x080065f8
 80013dc:	080065fc 	.word	0x080065fc
 80013e0:	08006600 	.word	0x08006600
 80013e4:	08006604 	.word	0x08006604
 80013e8:	08006608 	.word	0x08006608
 80013ec:	0800660c 	.word	0x0800660c
 80013f0:	08006610 	.word	0x08006610
 80013f4:	08006614 	.word	0x08006614
 80013f8:	08006618 	.word	0x08006618
 80013fc:	0800661c 	.word	0x0800661c
          htim->Instance->PSC = 12;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	220c      	movs	r2, #12
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 97;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2261      	movs	r2, #97	; 0x61
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F5 ") == 0){
 8001410:	499a      	ldr	r1, [pc, #616]	; (800167c <setNote+0x864>)
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7fe fed8 	bl	80001c8 <strcmp>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d108      	bne.n	8001430 <setNote+0x618>
          htim->Instance->PSC = 400;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2202      	movs	r2, #2
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS5") == 0){
 8001430:	4993      	ldr	r1, [pc, #588]	; (8001680 <setNote+0x868>)
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7fe fec8 	bl	80001c8 <strcmp>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d107      	bne.n	800144e <setNote+0x636>
          htim->Instance->PSC = 226;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	22e2      	movs	r2, #226	; 0xe2
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2204      	movs	r2, #4
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G5 ") == 0){
 800144e:	498d      	ldr	r1, [pc, #564]	; (8001684 <setNote+0x86c>)
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7fe feb9 	bl	80001c8 <strcmp>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d107      	bne.n	800146c <setNote+0x654>
          htim->Instance->PSC = 62;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	223e      	movs	r2, #62	; 0x3e
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 16;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2210      	movs	r2, #16
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS5") == 0){
 800146c:	4986      	ldr	r1, [pc, #536]	; (8001688 <setNote+0x870>)
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7fe feaa 	bl	80001c8 <strcmp>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <setNote+0x672>
          htim->Instance->PSC = 100;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2264      	movs	r2, #100	; 0x64
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 9;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2209      	movs	r2, #9
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A5 ") == 0){
 800148a:	4980      	ldr	r1, [pc, #512]	; (800168c <setNote+0x874>)
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7fe fe9b 	bl	80001c8 <strcmp>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d108      	bne.n	80014aa <setNote+0x692>
          htim->Instance->PSC = 476;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS5") == 0){
 80014aa:	4979      	ldr	r1, [pc, #484]	; (8001690 <setNote+0x878>)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7fe fe8b 	bl	80001c8 <strcmp>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <setNote+0x6b0>
          htim->Instance->PSC = 52;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2234      	movs	r2, #52	; 0x34
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 16;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2210      	movs	r2, #16
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B5 ") == 0){
 80014c8:	4972      	ldr	r1, [pc, #456]	; (8001694 <setNote+0x87c>)
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe fe7c 	bl	80001c8 <strcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d108      	bne.n	80014e8 <setNote+0x6d0>
          htim->Instance->PSC = 424;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C6 ") == 0){
 80014e8:	496b      	ldr	r1, [pc, #428]	; (8001698 <setNote+0x880>)
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7fe fe6c 	bl	80001c8 <strcmp>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <setNote+0x6f0>
          htim->Instance->PSC = 400;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "CS6") == 0){
 8001508:	4964      	ldr	r1, [pc, #400]	; (800169c <setNote+0x884>)
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7fe fe5c 	bl	80001c8 <strcmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <setNote+0x70e>
          htim->Instance->PSC = 26;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	221a      	movs	r2, #26
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 27;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	221b      	movs	r2, #27
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "D6 ") == 0){
 8001526:	495e      	ldr	r1, [pc, #376]	; (80016a0 <setNote+0x888>)
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7fe fe4d 	bl	80001c8 <strcmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <setNote+0x72c>
          htim->Instance->PSC = 16;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2210      	movs	r2, #16
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 41;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2229      	movs	r2, #41	; 0x29
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "DS6") == 0){
 8001544:	4957      	ldr	r1, [pc, #348]	; (80016a4 <setNote+0x88c>)
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7fe fe3e 	bl	80001c8 <strcmp>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d108      	bne.n	8001564 <setNote+0x74c>
          htim->Instance->PSC = 336;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2201      	movs	r2, #1
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "E6 ") == 0){
 8001564:	4950      	ldr	r1, [pc, #320]	; (80016a8 <setNote+0x890>)
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7fe fe2e 	bl	80001c8 <strcmp>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <setNote+0x76a>
          htim->Instance->PSC = 12;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	220c      	movs	r2, #12
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 48;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "F6 ") == 0){
 8001582:	494a      	ldr	r1, [pc, #296]	; (80016ac <setNote+0x894>)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7fe fe1f 	bl	80001c8 <strcmp>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d107      	bne.n	80015a0 <setNote+0x788>
          htim->Instance->PSC = 12;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	220c      	movs	r2, #12
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 45;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	222d      	movs	r2, #45	; 0x2d
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "FS6") == 0){
 80015a0:	4943      	ldr	r1, [pc, #268]	; (80016b0 <setNote+0x898>)
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe fe10 	bl	80001c8 <strcmp>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d107      	bne.n	80015be <setNote+0x7a6>
          htim->Instance->PSC = 188;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	22bc      	movs	r2, #188	; 0xbc
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 2;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2202      	movs	r2, #2
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "G6 ") == 0){
 80015be:	493d      	ldr	r1, [pc, #244]	; (80016b4 <setNote+0x89c>)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe fe01 	bl	80001c8 <strcmp>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <setNote+0x7c4>
          htim->Instance->PSC = 106;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	226a      	movs	r2, #106	; 0x6a
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2204      	movs	r2, #4
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "GS6") == 0){
 80015dc:	4936      	ldr	r1, [pc, #216]	; (80016b8 <setNote+0x8a0>)
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe fdf2 	bl	80001c8 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <setNote+0x7e2>
          htim->Instance->PSC = 100;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2264      	movs	r2, #100	; 0x64
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 4;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2204      	movs	r2, #4
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "A6 ") == 0){
 80015fa:	4930      	ldr	r1, [pc, #192]	; (80016bc <setNote+0x8a4>)
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7fe fde3 	bl	80001c8 <strcmp>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <setNote+0x800>
          htim->Instance->PSC = 52;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2234      	movs	r2, #52	; 0x34
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 8;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2208      	movs	r2, #8
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "AS6") == 0){
 8001618:	4929      	ldr	r1, [pc, #164]	; (80016c0 <setNote+0x8a8>)
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7fe fdd4 	bl	80001c8 <strcmp>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <setNote+0x81e>
          htim->Instance->PSC = 224;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	22e0      	movs	r2, #224	; 0xe0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 1;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2201      	movs	r2, #1
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "B6 ") == 0){
 8001636:	4923      	ldr	r1, [pc, #140]	; (80016c4 <setNote+0x8ac>)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7fe fdc5 	bl	80001c8 <strcmp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <setNote+0x83c>
          htim->Instance->PSC = 16;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2210      	movs	r2, #16
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 24;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2218      	movs	r2, #24
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      if(strcmp(note, "C7 ") == 0){
 8001654:	491c      	ldr	r1, [pc, #112]	; (80016c8 <setNote+0x8b0>)
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7fe fdb6 	bl	80001c8 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <setNote+0x85a>
          htim->Instance->PSC = 18;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2212      	movs	r2, #18
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
          htim->Instance->ARR = 20;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2214      	movs	r2, #20
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
      }
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	08006620 	.word	0x08006620
 8001680:	08006624 	.word	0x08006624
 8001684:	08006628 	.word	0x08006628
 8001688:	0800662c 	.word	0x0800662c
 800168c:	08006630 	.word	0x08006630
 8001690:	08006634 	.word	0x08006634
 8001694:	08006638 	.word	0x08006638
 8001698:	0800663c 	.word	0x0800663c
 800169c:	08006640 	.word	0x08006640
 80016a0:	08006644 	.word	0x08006644
 80016a4:	08006648 	.word	0x08006648
 80016a8:	0800664c 	.word	0x0800664c
 80016ac:	08006650 	.word	0x08006650
 80016b0:	08006654 	.word	0x08006654
 80016b4:	08006658 	.word	0x08006658
 80016b8:	0800665c 	.word	0x0800665c
 80016bc:	08006660 	.word	0x08006660
 80016c0:	08006664 	.word	0x08006664
 80016c4:	08006668 	.word	0x08006668
 80016c8:	0800666c 	.word	0x0800666c

080016cc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d119      	bne.n	8001712 <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80016de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016e4:	f001 fffd 	bl	80036e2 <HAL_GPIO_TogglePin>
		setNote(sequence[sequence_iterator], &htim7);
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fb8f 	bl	8000e18 <setNote>
		sequence_iterator++;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001702:	6013      	str	r3, [r2, #0]
		if(sequence_iterator == 8) sequence_iterator = 0;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d102      	bne.n	8001712 <HAL_TIM_PeriodElapsedCallback+0x46>
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	}
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40000800 	.word	0x40000800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	2000004c 	.word	0x2000004c
 8001728:	20000004 	.word	0x20000004
 800172c:	20000b4c 	.word	0x20000b4c

08001730 <map>:

uint32_t sine_val[SAMPLING_RATE];
uint32_t saw_val[SAMPLING_RATE];
uint32_t quad_val[SAMPLING_RATE];

float map(float v, float is, float ie, float os, float oe){
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a05 	vstr	s0, [r7, #20]
 800173a:	edc7 0a04 	vstr	s1, [r7, #16]
 800173e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001742:	edc7 1a02 	vstr	s3, [r7, #8]
 8001746:	ed87 2a01 	vstr	s4, [r7, #4]
	return os + (oe - os) * ((v - is)/(ie - is));
 800174a:	ed97 7a01 	vldr	s14, [r7, #4]
 800174e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	edd7 6a05 	vldr	s13, [r7, #20]
 800175a:	edd7 7a04 	vldr	s15, [r7, #16]
 800175e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001762:	edd7 6a03 	vldr	s13, [r7, #12]
 8001766:	edd7 7a04 	vldr	s15, [r7, #16]
 800176a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800176e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001776:	edd7 7a02 	vldr	s15, [r7, #8]
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <get_sineval>:

void get_sineval(){
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
	for(int i = 0; i < SAMPLING_RATE; i++){
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e035      	b.n	8001804 <get_sineval+0x78>
		sine_val[i] = ((sin(i*2*PI/SAMPLING_RATE) + 1)*(4096/2));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001814 <get_sineval+0x88>
 80017a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ac:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001818 <get_sineval+0x8c>
 80017b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017b4:	ee16 0a90 	vmov	r0, s13
 80017b8:	f7fe fe74 	bl	80004a4 <__aeabi_f2d>
 80017bc:	4603      	mov	r3, r0
 80017be:	460c      	mov	r4, r1
 80017c0:	ec44 3b10 	vmov	d0, r3, r4
 80017c4:	f003 feb8 	bl	8005538 <sin>
 80017c8:	ec51 0b10 	vmov	r0, r1, d0
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <get_sineval+0x90>)
 80017d2:	f7fe fd09 	bl	80001e8 <__adddf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	460c      	mov	r4, r1
 80017da:	4618      	mov	r0, r3
 80017dc:	4621      	mov	r1, r4
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <get_sineval+0x94>)
 80017e4:	f7fe feb6 	bl	8000554 <__aeabi_dmul>
 80017e8:	4603      	mov	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	4618      	mov	r0, r3
 80017ee:	4621      	mov	r1, r4
 80017f0:	f7ff f972 	bl	8000ad8 <__aeabi_d2uiz>
 80017f4:	4601      	mov	r1, r0
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <get_sineval+0x98>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SAMPLING_RATE; i++){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3301      	adds	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2bc7      	cmp	r3, #199	; 0xc7
 8001808:	ddc6      	ble.n	8001798 <get_sineval+0xc>
	}
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	40490ff9 	.word	0x40490ff9
 8001818:	43480000 	.word	0x43480000
 800181c:	3ff00000 	.word	0x3ff00000
 8001820:	40a00000 	.word	0x40a00000
 8001824:	20000094 	.word	0x20000094

08001828 <get_sawval>:

void get_sawval(){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	for(int i = 0; i < SAMPLING_RATE; i++){
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	e021      	b.n	8001878 <get_sawval+0x50>
		saw_val[i] = map(i, 0, 100, 0, 2)*(4096/2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 8001842:	eddf 1a11 	vldr	s3, [pc, #68]	; 8001888 <get_sawval+0x60>
 8001846:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800188c <get_sawval+0x64>
 800184a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001888 <get_sawval+0x60>
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	f7ff ff6d 	bl	8001730 <map>
 8001856:	eeb0 7a40 	vmov.f32	s14, s0
 800185a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001890 <get_sawval+0x68>
 800185e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001866:	ee17 1a90 	vmov	r1, s15
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <get_sawval+0x6c>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SAMPLING_RATE; i++){
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2bc7      	cmp	r3, #199	; 0xc7
 800187c:	ddda      	ble.n	8001834 <get_sawval+0xc>
	}
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	00000000 	.word	0x00000000
 800188c:	42c80000 	.word	0x42c80000
 8001890:	45000000 	.word	0x45000000
 8001894:	2000078c 	.word	0x2000078c

08001898 <get_quadval>:

void get_quadval(){
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 50; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	e008      	b.n	80018b6 <get_quadval+0x1e>
		quad_val[i] = 4095;
 80018a4:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <get_quadval+0x4c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f640 71ff 	movw	r1, #4095	; 0xfff
 80018ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 50; i++){
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3301      	adds	r3, #1
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b31      	cmp	r3, #49	; 0x31
 80018ba:	ddf3      	ble.n	80018a4 <get_quadval+0xc>
	}
	for(int i = 50; i < 100; i++){
 80018bc:	2332      	movs	r3, #50	; 0x32
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	e007      	b.n	80018d2 <get_quadval+0x3a>
		quad_val[i] = 0;
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <get_quadval+0x4c>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 50; i < 100; i++){
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b63      	cmp	r3, #99	; 0x63
 80018d6:	ddf4      	ble.n	80018c2 <get_quadval+0x2a>
	}
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000428 	.word	0x20000428

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ee:	f000 fe0d 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f2:	f000 f847 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f6:	f000 f9ed 	bl	8001cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018fa:	f000 f9c3 	bl	8001c84 <MX_DMA_Init>
  MX_DAC_Init();
 80018fe:	f000 f8ab 	bl	8001a58 <MX_DAC_Init>
  MX_TIM6_Init();
 8001902:	f000 f92d 	bl	8001b60 <MX_TIM6_Init>
  MX_UART4_Init();
 8001906:	f000 f993 	bl	8001c30 <MX_UART4_Init>
  MX_TIM7_Init();
 800190a:	f000 f95d 	bl	8001bc8 <MX_TIM7_Init>
  MX_TIM4_Init();
 800190e:	f000 f8d9 	bl	8001ac4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001912:	4813      	ldr	r0, [pc, #76]	; (8001960 <main+0x78>)
 8001914:	f002 fb8d 	bl	8004032 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001918:	4812      	ldr	r0, [pc, #72]	; (8001964 <main+0x7c>)
 800191a:	f002 fb8a 	bl	8004032 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <main+0x80>)
 8001920:	f002 fb87 	bl	8004032 <HAL_TIM_Base_Start_IT>
  get_sineval();
 8001924:	f7ff ff32 	bl	800178c <get_sineval>
  get_sawval();
 8001928:	f7ff ff7e 	bl	8001828 <get_sawval>
  get_quadval();
 800192c:	f7ff ffb4 	bl	8001898 <get_quadval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, saw_val, SAMPLING_RATE, DAC_ALIGN_12B_R);
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	23c8      	movs	r3, #200	; 0xc8
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <main+0x84>)
 8001938:	2100      	movs	r1, #0
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <main+0x88>)
 800193c:	f000 ff8c 	bl	8002858 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, quad_val, SAMPLING_RATE, DAC_ALIGN_12B_R);
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	23c8      	movs	r3, #200	; 0xc8
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <main+0x8c>)
 8001948:	2110      	movs	r1, #16
 800194a:	4809      	ldr	r0, [pc, #36]	; (8001970 <main+0x88>)
 800194c:	f000 ff84 	bl	8002858 <HAL_DAC_Start_DMA>
  HAL_UART_Receive_IT(&huart4, receiveUART, sizeReceiveUART);
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <main+0x90>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4909      	ldr	r1, [pc, #36]	; (800197c <main+0x94>)
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <main+0x98>)
 800195a:	f002 ffb8 	bl	80048ce <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800195e:	e7fe      	b.n	800195e <main+0x76>
 8001960:	20000748 	.word	0x20000748
 8001964:	20000b4c 	.word	0x20000b4c
 8001968:	20000054 	.word	0x20000054
 800196c:	2000078c 	.word	0x2000078c
 8001970:	20000414 	.word	0x20000414
 8001974:	20000428 	.word	0x20000428
 8001978:	20000000 	.word	0x20000000
 800197c:	20000788 	.word	0x20000788
 8001980:	20000aac 	.word	0x20000aac

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b094      	sub	sp, #80	; 0x50
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2230      	movs	r2, #48	; 0x30
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fdc6 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <SystemClock_Config+0xcc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <SystemClock_Config+0xcc>)
 80019b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <SystemClock_Config+0xcc>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <SystemClock_Config+0xd0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <SystemClock_Config+0xd0>)
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <SystemClock_Config+0xd0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019f8:	23a8      	movs	r3, #168	; 0xa8
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a00:	2304      	movs	r3, #4
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 fe85 	bl	8003718 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a14:	f000 fb20 	bl	8002058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2105      	movs	r1, #5
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 f8de 	bl	8003bf8 <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a42:	f000 fb09 	bl	8002058 <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	; 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_DAC_Init+0x64>)
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <MX_DAC_Init+0x68>)
 8001a6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001a6c:	4813      	ldr	r0, [pc, #76]	; (8001abc <MX_DAC_Init+0x64>)
 8001a6e:	f000 fed0 	bl	8002812 <HAL_DAC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001a78:	f000 faee 	bl	8002058 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <MX_DAC_Init+0x64>)
 8001a8c:	f001 f804 	bl	8002a98 <HAL_DAC_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001a96:	f000 fadf 	bl	8002058 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001a9a:	2314      	movs	r3, #20
 8001a9c:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_DAC_Init+0x64>)
 8001aa6:	f000 fff7 	bl	8002a98 <HAL_DAC_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f000 fad2 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000414 	.word	0x20000414
 8001ac0:	40007400 	.word	0x40007400

08001ac4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <MX_TIM4_Init+0x98>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6999;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001ae8:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001aec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 11999;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001af6:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001afa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b08:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001b0a:	f002 fa67 	bl	8003fdc <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b14:	f000 faa0 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4619      	mov	r1, r3
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001b26:	f002 fbdb 	bl	80042e0 <HAL_TIM_ConfigClockSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b30:	f000 fa92 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_TIM4_Init+0x94>)
 8001b42:	f002 fde7 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b4c:	f000 fa84 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000054 	.word	0x20000054
 8001b5c:	40000800 	.word	0x40000800

08001b60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b66:	463b      	mov	r3, r7
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_TIM6_Init+0x60>)
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <MX_TIM6_Init+0x64>)
 8001b72:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_TIM6_Init+0x60>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_TIM6_Init+0x60>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <MX_TIM6_Init+0x60>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_TIM6_Init+0x60>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <MX_TIM6_Init+0x60>)
 8001b8e:	f002 fa25 	bl	8003fdc <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001b98:	f000 fa5e 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_TIM6_Init+0x60>)
 8001baa:	f002 fdb3 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f000 fa50 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000748 	.word	0x20000748
 8001bc4:	40001000 	.word	0x40001000

08001bc8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_TIM7_Init+0x60>)
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <MX_TIM7_Init+0x64>)
 8001bda:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <MX_TIM7_Init+0x60>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_TIM7_Init+0x60>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_TIM7_Init+0x60>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_TIM7_Init+0x60>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_TIM7_Init+0x60>)
 8001bf6:	f002 f9f1 	bl	8003fdc <HAL_TIM_Base_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001c00:	f000 fa2a 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c04:	2320      	movs	r3, #32
 8001c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM7_Init+0x60>)
 8001c12:	f002 fd7f 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001c1c:	f000 fa1c 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000b4c 	.word	0x20000b4c
 8001c2c:	40001400 	.word	0x40001400

08001c30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <MX_UART4_Init+0x50>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_UART4_Init+0x4c>)
 8001c68:	f002 fde4 	bl	8004834 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001c72:	f000 f9f1 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000aac 	.word	0x20000aac
 8001c80:	40004c00 	.word	0x40004c00

08001c84 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_DMA_Init+0x4c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <MX_DMA_Init+0x4c>)
 8001c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <MX_DMA_Init+0x4c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2010      	movs	r0, #16
 8001cac:	f000 fd7b 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cb0:	2010      	movs	r0, #16
 8001cb2:	f000 fd94 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2011      	movs	r0, #17
 8001cbc:	f000 fd73 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001cc0:	2011      	movs	r0, #17
 8001cc2:	f000 fd8c 	bl	80027de <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_GPIO_Init+0xd0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001d60:	4811      	ldr	r0, [pc, #68]	; (8001da8 <MX_GPIO_Init+0xd4>)
 8001d62:	f001 fca5 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d66:	2301      	movs	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <MX_GPIO_Init+0xd8>)
 8001d7a:	f001 faff 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_GPIO_Init+0xd4>)
 8001d98:	f001 faf0 	bl	800337c <HAL_GPIO_Init>

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
int pressed = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a85      	ldr	r2, [pc, #532]	; (8001fd4 <HAL_UART_RxCpltCallback+0x224>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 8104 	bne.w	8001fcc <HAL_UART_RxCpltCallback+0x21c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	4883      	ldr	r0, [pc, #524]	; (8001fd8 <HAL_UART_RxCpltCallback+0x228>)
 8001dca:	f001 fc8a 	bl	80036e2 <HAL_GPIO_TogglePin>
		if(strcmp((const char*)receiveUART, "C3 ") == 0){
 8001dce:	4983      	ldr	r1, [pc, #524]	; (8001fdc <HAL_UART_RxCpltCallback+0x22c>)
 8001dd0:	4883      	ldr	r0, [pc, #524]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001dd2:	f7fe f9f9 	bl	80001c8 <strcmp>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <HAL_UART_RxCpltCallback+0x42>
			if(!pressed){
 8001ddc:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_UART_RxCpltCallback+0x42>
				setNote("C4 ", &htim6);
 8001de4:	4980      	ldr	r1, [pc, #512]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001de6:	4881      	ldr	r0, [pc, #516]	; (8001fec <HAL_UART_RxCpltCallback+0x23c>)
 8001de8:	f7ff f816 	bl	8000e18 <setNote>
				pressed = 1;
 8001dec:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "CS3") == 0){
 8001df2:	497f      	ldr	r1, [pc, #508]	; (8001ff0 <HAL_UART_RxCpltCallback+0x240>)
 8001df4:	487a      	ldr	r0, [pc, #488]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001df6:	f7fe f9e7 	bl	80001c8 <strcmp>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_UART_RxCpltCallback+0x66>
			if(!pressed){
 8001e00:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_UART_RxCpltCallback+0x66>
				setNote("CS4", &htim6);
 8001e08:	4977      	ldr	r1, [pc, #476]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001e0a:	487a      	ldr	r0, [pc, #488]	; (8001ff4 <HAL_UART_RxCpltCallback+0x244>)
 8001e0c:	f7ff f804 	bl	8000e18 <setNote>
				pressed = 1;
 8001e10:	4b74      	ldr	r3, [pc, #464]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "D3 ") == 0){
 8001e16:	4978      	ldr	r1, [pc, #480]	; (8001ff8 <HAL_UART_RxCpltCallback+0x248>)
 8001e18:	4871      	ldr	r0, [pc, #452]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001e1a:	f7fe f9d5 	bl	80001c8 <strcmp>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10a      	bne.n	8001e3a <HAL_UART_RxCpltCallback+0x8a>
			if(!pressed){
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <HAL_UART_RxCpltCallback+0x8a>
				setNote("D4 ", &htim6);
 8001e2c:	496e      	ldr	r1, [pc, #440]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001e2e:	4873      	ldr	r0, [pc, #460]	; (8001ffc <HAL_UART_RxCpltCallback+0x24c>)
 8001e30:	f7fe fff2 	bl	8000e18 <setNote>
				pressed = 1;
 8001e34:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "DS3") == 0){
 8001e3a:	4971      	ldr	r1, [pc, #452]	; (8002000 <HAL_UART_RxCpltCallback+0x250>)
 8001e3c:	4868      	ldr	r0, [pc, #416]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001e3e:	f7fe f9c3 	bl	80001c8 <strcmp>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <HAL_UART_RxCpltCallback+0xae>
			if(!pressed){
 8001e48:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d106      	bne.n	8001e5e <HAL_UART_RxCpltCallback+0xae>
				setNote("DS4", &htim6);
 8001e50:	4965      	ldr	r1, [pc, #404]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001e52:	486c      	ldr	r0, [pc, #432]	; (8002004 <HAL_UART_RxCpltCallback+0x254>)
 8001e54:	f7fe ffe0 	bl	8000e18 <setNote>
				pressed = 1;
 8001e58:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "E3 ") == 0){
 8001e5e:	496a      	ldr	r1, [pc, #424]	; (8002008 <HAL_UART_RxCpltCallback+0x258>)
 8001e60:	485f      	ldr	r0, [pc, #380]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001e62:	f7fe f9b1 	bl	80001c8 <strcmp>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0xd2>
			if(!pressed){
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d106      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0xd2>
				setNote("E4 ", &htim6);
 8001e74:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001e76:	4865      	ldr	r0, [pc, #404]	; (800200c <HAL_UART_RxCpltCallback+0x25c>)
 8001e78:	f7fe ffce 	bl	8000e18 <setNote>
				pressed = 1;
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "F3 ") == 0){
 8001e82:	4963      	ldr	r1, [pc, #396]	; (8002010 <HAL_UART_RxCpltCallback+0x260>)
 8001e84:	4856      	ldr	r0, [pc, #344]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001e86:	f7fe f99f 	bl	80001c8 <strcmp>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_UART_RxCpltCallback+0xf6>
			if(!pressed){
 8001e90:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d106      	bne.n	8001ea6 <HAL_UART_RxCpltCallback+0xf6>
				setNote("F4 ", &htim6);
 8001e98:	4953      	ldr	r1, [pc, #332]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001e9a:	485e      	ldr	r0, [pc, #376]	; (8002014 <HAL_UART_RxCpltCallback+0x264>)
 8001e9c:	f7fe ffbc 	bl	8000e18 <setNote>
				pressed = 1;
 8001ea0:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "FS3") == 0){
 8001ea6:	495c      	ldr	r1, [pc, #368]	; (8002018 <HAL_UART_RxCpltCallback+0x268>)
 8001ea8:	484d      	ldr	r0, [pc, #308]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001eaa:	f7fe f98d 	bl	80001c8 <strcmp>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <HAL_UART_RxCpltCallback+0x11a>
			if(!pressed){
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_UART_RxCpltCallback+0x11a>
				setNote("FS4", &htim6);
 8001ebc:	494a      	ldr	r1, [pc, #296]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001ebe:	4857      	ldr	r0, [pc, #348]	; (800201c <HAL_UART_RxCpltCallback+0x26c>)
 8001ec0:	f7fe ffaa 	bl	8000e18 <setNote>
				pressed = 1;
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "G3 ") == 0){
 8001eca:	4955      	ldr	r1, [pc, #340]	; (8002020 <HAL_UART_RxCpltCallback+0x270>)
 8001ecc:	4844      	ldr	r0, [pc, #272]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001ece:	f7fe f97b 	bl	80001c8 <strcmp>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10a      	bne.n	8001eee <HAL_UART_RxCpltCallback+0x13e>
			if(!pressed){
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <HAL_UART_RxCpltCallback+0x13e>
				setNote("G4 ", &htim6);
 8001ee0:	4941      	ldr	r1, [pc, #260]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001ee2:	4850      	ldr	r0, [pc, #320]	; (8002024 <HAL_UART_RxCpltCallback+0x274>)
 8001ee4:	f7fe ff98 	bl	8000e18 <setNote>
				pressed = 1;
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "GS3") == 0){
 8001eee:	494e      	ldr	r1, [pc, #312]	; (8002028 <HAL_UART_RxCpltCallback+0x278>)
 8001ef0:	483b      	ldr	r0, [pc, #236]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001ef2:	f7fe f969 	bl	80001c8 <strcmp>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <HAL_UART_RxCpltCallback+0x162>
			if(!pressed){
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <HAL_UART_RxCpltCallback+0x162>
				setNote("GS4", &htim6);
 8001f04:	4938      	ldr	r1, [pc, #224]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001f06:	4849      	ldr	r0, [pc, #292]	; (800202c <HAL_UART_RxCpltCallback+0x27c>)
 8001f08:	f7fe ff86 	bl	8000e18 <setNote>
				pressed = 1;
 8001f0c:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "A3 ") == 0){
 8001f12:	4947      	ldr	r1, [pc, #284]	; (8002030 <HAL_UART_RxCpltCallback+0x280>)
 8001f14:	4832      	ldr	r0, [pc, #200]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001f16:	f7fe f957 	bl	80001c8 <strcmp>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10a      	bne.n	8001f36 <HAL_UART_RxCpltCallback+0x186>
			if(!pressed){
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d106      	bne.n	8001f36 <HAL_UART_RxCpltCallback+0x186>
				setNote("A4 ", &htim6);
 8001f28:	492f      	ldr	r1, [pc, #188]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001f2a:	4842      	ldr	r0, [pc, #264]	; (8002034 <HAL_UART_RxCpltCallback+0x284>)
 8001f2c:	f7fe ff74 	bl	8000e18 <setNote>
				pressed = 1;
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "AS3") == 0){
 8001f36:	4940      	ldr	r1, [pc, #256]	; (8002038 <HAL_UART_RxCpltCallback+0x288>)
 8001f38:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001f3a:	f7fe f945 	bl	80001c8 <strcmp>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <HAL_UART_RxCpltCallback+0x1aa>
			if(!pressed){
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <HAL_UART_RxCpltCallback+0x1aa>
				setNote("AS4", &htim6);
 8001f4c:	4926      	ldr	r1, [pc, #152]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001f4e:	483b      	ldr	r0, [pc, #236]	; (800203c <HAL_UART_RxCpltCallback+0x28c>)
 8001f50:	f7fe ff62 	bl	8000e18 <setNote>
				pressed = 1;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "H3 ") == 0){
 8001f5a:	4939      	ldr	r1, [pc, #228]	; (8002040 <HAL_UART_RxCpltCallback+0x290>)
 8001f5c:	4820      	ldr	r0, [pc, #128]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001f5e:	f7fe f933 	bl	80001c8 <strcmp>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10a      	bne.n	8001f7e <HAL_UART_RxCpltCallback+0x1ce>
			if(!pressed){
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <HAL_UART_RxCpltCallback+0x1ce>
				setNote("B4 ", &htim6);
 8001f70:	491d      	ldr	r1, [pc, #116]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001f72:	4834      	ldr	r0, [pc, #208]	; (8002044 <HAL_UART_RxCpltCallback+0x294>)
 8001f74:	f7fe ff50 	bl	8000e18 <setNote>
				pressed = 1;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "C4 ") == 0){
 8001f7e:	491b      	ldr	r1, [pc, #108]	; (8001fec <HAL_UART_RxCpltCallback+0x23c>)
 8001f80:	4817      	ldr	r0, [pc, #92]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001f82:	f7fe f921 	bl	80001c8 <strcmp>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_UART_RxCpltCallback+0x1f2>
			if(!pressed){
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d106      	bne.n	8001fa2 <HAL_UART_RxCpltCallback+0x1f2>
				setNote("C5 ", &htim6);
 8001f94:	4914      	ldr	r1, [pc, #80]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001f96:	482c      	ldr	r0, [pc, #176]	; (8002048 <HAL_UART_RxCpltCallback+0x298>)
 8001f98:	f7fe ff3e 	bl	8000e18 <setNote>
				pressed = 1;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
			}
		}
		if(strcmp((const char*)receiveUART, "pp ") == 0){
 8001fa2:	492a      	ldr	r1, [pc, #168]	; (800204c <HAL_UART_RxCpltCallback+0x29c>)
 8001fa4:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001fa6:	f7fe f90f 	bl	80001c8 <strcmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <HAL_UART_RxCpltCallback+0x20e>
			setNote("pp ", &htim6);
 8001fb0:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <HAL_UART_RxCpltCallback+0x238>)
 8001fb2:	4826      	ldr	r0, [pc, #152]	; (800204c <HAL_UART_RxCpltCallback+0x29c>)
 8001fb4:	f7fe ff30 	bl	8000e18 <setNote>
			pressed = 0;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_UART_RxCpltCallback+0x234>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart4, receiveUART, sizeReceiveUART);
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_UART_RxCpltCallback+0x2a0>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4906      	ldr	r1, [pc, #24]	; (8001fe0 <HAL_UART_RxCpltCallback+0x230>)
 8001fc6:	4823      	ldr	r0, [pc, #140]	; (8002054 <HAL_UART_RxCpltCallback+0x2a4>)
 8001fc8:	f002 fc81 	bl	80048ce <HAL_UART_Receive_IT>
	}
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40004c00 	.word	0x40004c00
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	080065ac 	.word	0x080065ac
 8001fe0:	20000788 	.word	0x20000788
 8001fe4:	20000050 	.word	0x20000050
 8001fe8:	20000748 	.word	0x20000748
 8001fec:	080065dc 	.word	0x080065dc
 8001ff0:	080065b0 	.word	0x080065b0
 8001ff4:	080065e0 	.word	0x080065e0
 8001ff8:	080065b4 	.word	0x080065b4
 8001ffc:	080065e4 	.word	0x080065e4
 8002000:	080065b8 	.word	0x080065b8
 8002004:	080065e8 	.word	0x080065e8
 8002008:	080065bc 	.word	0x080065bc
 800200c:	080065ec 	.word	0x080065ec
 8002010:	080065c0 	.word	0x080065c0
 8002014:	080065f0 	.word	0x080065f0
 8002018:	080065c4 	.word	0x080065c4
 800201c:	080065f4 	.word	0x080065f4
 8002020:	080065c8 	.word	0x080065c8
 8002024:	080065f8 	.word	0x080065f8
 8002028:	080065cc 	.word	0x080065cc
 800202c:	080065fc 	.word	0x080065fc
 8002030:	080065d0 	.word	0x080065d0
 8002034:	08006600 	.word	0x08006600
 8002038:	080065d4 	.word	0x080065d4
 800203c:	08006604 	.word	0x08006604
 8002040:	08006670 	.word	0x08006670
 8002044:	08006608 	.word	0x08006608
 8002048:	0800660c 	.word	0x0800660c
 800204c:	08006578 	.word	0x08006578
 8002050:	20000000 	.word	0x20000000
 8002054:	20000aac 	.word	0x20000aac

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <HAL_MspInit+0x4c>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_MspInit+0x4c>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a55      	ldr	r2, [pc, #340]	; (800222c <HAL_DAC_MspInit+0x174>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	f040 80a4 	bne.w	8002224 <HAL_DAC_MspInit+0x16c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_DAC_MspInit+0x178>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_DAC_MspInit+0x178>)
 80020e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
 80020ec:	4b50      	ldr	r3, [pc, #320]	; (8002230 <HAL_DAC_MspInit+0x178>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_DAC_MspInit+0x178>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <HAL_DAC_MspInit+0x178>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6313      	str	r3, [r2, #48]	; 0x30
 8002108:	4b49      	ldr	r3, [pc, #292]	; (8002230 <HAL_DAC_MspInit+0x178>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002114:	2330      	movs	r3, #48	; 0x30
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002118:	2303      	movs	r3, #3
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	4843      	ldr	r0, [pc, #268]	; (8002234 <HAL_DAC_MspInit+0x17c>)
 8002128:	f001 f928 	bl	800337c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <HAL_DAC_MspInit+0x180>)
 800212e:	4a43      	ldr	r2, [pc, #268]	; (800223c <HAL_DAC_MspInit+0x184>)
 8002130:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002134:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002138:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_DAC_MspInit+0x180>)
 800213c:	2240      	movs	r2, #64	; 0x40
 800213e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800214c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002154:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002158:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800215c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800215e:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002164:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002166:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_DAC_MspInit+0x180>)
 800216e:	2204      	movs	r2, #4
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002172:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002174:	2203      	movs	r2, #3
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_DAC_MspInit+0x180>)
 800217a:	2200      	movs	r2, #0
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002184:	482c      	ldr	r0, [pc, #176]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002186:	f000 fd69 	bl	8002c5c <HAL_DMA_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_DAC_MspInit+0xdc>
    {
      Error_Handler();
 8002190:	f7ff ff62 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_DAC_MspInit+0x180>)
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_DAC_MspInit+0x180>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021a2:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_DAC_MspInit+0x18c>)
 80021a4:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021a8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80021ac:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021b0:	2240      	movs	r2, #64	; 0x40
 80021b2:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c0:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c8:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d0:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d8:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021e2:	2204      	movs	r2, #4
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dac2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021e8:	2203      	movs	r2, #3
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dac2.Init.MemBurst = DMA_MBURST_SINGLE;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dac2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80021f8:	4811      	ldr	r0, [pc, #68]	; (8002240 <HAL_DAC_MspInit+0x188>)
 80021fa:	f000 fd2f 	bl	8002c5c <HAL_DMA_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_DAC_MspInit+0x150>
    {
      Error_Handler();
 8002204:	f7ff ff28 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_DAC_MspInit+0x188>)
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_DAC_MspInit+0x188>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2036      	movs	r0, #54	; 0x36
 800221a:	f000 fac4 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800221e:	2036      	movs	r0, #54	; 0x36
 8002220:	f000 fadd 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40007400 	.word	0x40007400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000
 8002238:	200003b4 	.word	0x200003b4
 800223c:	40026088 	.word	0x40026088
 8002240:	20000aec 	.word	0x20000aec
 8002244:	400260a0 	.word	0x400260a0

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2a      	ldr	r2, [pc, #168]	; (8002300 <HAL_TIM_Base_MspInit+0xb8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d116      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	201e      	movs	r0, #30
 800227c:	f000 fa93 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002280:	201e      	movs	r0, #30
 8002282:	f000 faac 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002286:	e036      	b.n	80022f6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_TIM_Base_MspInit+0xc0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d116      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 800229c:	f043 0310 	orr.w	r3, r3, #16
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2036      	movs	r0, #54	; 0x36
 80022b4:	f000 fa77 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022b8:	2036      	movs	r0, #54	; 0x36
 80022ba:	f000 fa90 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 80022be:	e01a      	b.n	80022f6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_TIM_Base_MspInit+0xc4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d115      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 80022d4:	f043 0320 	orr.w	r3, r3, #32
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_TIM_Base_MspInit+0xbc>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2037      	movs	r0, #55	; 0x37
 80022ec:	f000 fa5b 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022f0:	2037      	movs	r0, #55	; 0x37
 80022f2:	f000 fa74 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40000800 	.word	0x40000800
 8002304:	40023800 	.word	0x40023800
 8002308:	40001000 	.word	0x40001000
 800230c:	40001400 	.word	0x40001400

08002310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <HAL_UART_MspInit+0x94>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d134      	bne.n	800239c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <HAL_UART_MspInit+0x98>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_UART_MspInit+0x98>)
 800233c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_UART_MspInit+0x98>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_UART_MspInit+0x98>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_UART_MspInit+0x98>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_UART_MspInit+0x98>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800236a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002374:	2301      	movs	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800237c:	2308      	movs	r3, #8
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4809      	ldr	r0, [pc, #36]	; (80023ac <HAL_UART_MspInit+0x9c>)
 8002388:	f000 fff8 	bl	800337c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	2034      	movs	r0, #52	; 0x34
 8002392:	f000 fa08 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002396:	2034      	movs	r0, #52	; 0x34
 8002398:	f000 fa21 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40004c00 	.word	0x40004c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020800 	.word	0x40020800

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002404:	f000 f8d4 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <DMA1_Stream5_IRQHandler+0x10>)
 8002412:	f000 fd4b 	bl	8002eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200003b4 	.word	0x200003b4

08002420 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <DMA1_Stream6_IRQHandler+0x10>)
 8002426:	f000 fd41 	bl	8002eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000aec 	.word	0x20000aec

08002434 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM4_IRQHandler+0x10>)
 800243a:	f001 fe49 	bl	80040d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000054 	.word	0x20000054

08002448 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <UART4_IRQHandler+0x10>)
 800244e:	f002 fa93 	bl	8004978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000aac 	.word	0x20000aac

0800245c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <TIM6_DAC_IRQHandler+0x14>)
 8002462:	f000 faa7 	bl	80029b4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002466:	4803      	ldr	r0, [pc, #12]	; (8002474 <TIM6_DAC_IRQHandler+0x18>)
 8002468:	f001 fe32 	bl	80040d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000414 	.word	0x20000414
 8002474:	20000748 	.word	0x20000748

08002478 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <TIM7_IRQHandler+0x10>)
 800247e:	f001 fe27 	bl	80040d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000b4c 	.word	0x20000b4c

0800248c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <SystemInit+0x28>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <SystemInit+0x28>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SystemInit+0x28>)
 80024a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024a6:	609a      	str	r2, [r3, #8]
#endif
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024be:	e003      	b.n	80024c8 <LoopCopyDataInit>

080024c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024c6:	3104      	adds	r1, #4

080024c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024c8:	480b      	ldr	r0, [pc, #44]	; (80024f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024d0:	d3f6      	bcc.n	80024c0 <CopyDataInit>
  ldr  r2, =_sbss
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024d4:	e002      	b.n	80024dc <LoopFillZerobss>

080024d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024d8:	f842 3b04 	str.w	r3, [r2], #4

080024dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024e0:	d3f9      	bcc.n	80024d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024e2:	f7ff ffd3 	bl	800248c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f002 fff9 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ea:	f7ff f9fd 	bl	80018e8 <main>
  bx  lr    
 80024ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80024f4:	08006880 	.word	0x08006880
  ldr  r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024fc:	20000030 	.word	0x20000030
  ldr  r2, =_sbss
 8002500:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 8002504:	20000b90 	.word	0x20000b90

08002508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC_IRQHandler>
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <HAL_Init+0x40>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <HAL_Init+0x40>)
 8002522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_Init+0x40>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002534:	2003      	movs	r0, #3
 8002536:	f000 f92b 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253a:	2000      	movs	r0, #0
 800253c:	f000 f808 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002540:	f7ff fd92 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00

08002550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x54>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_InitTick+0x58>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002566:	fbb3 f3f1 	udiv	r3, r3, r1
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f943 	bl	80027fa <HAL_SYSTICK_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00e      	b.n	800259c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d80a      	bhi.n	800259a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f000 f90b 	bl	80027a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_InitTick+0x5c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000024 	.word	0x20000024
 80025a8:	2000002c 	.word	0x2000002c
 80025ac:	20000028 	.word	0x20000028

080025b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	2000002c 	.word	0x2000002c
 80025d4:	20000b8c 	.word	0x20000b8c

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000b8c 	.word	0x20000b8c

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff3e 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff8e 	bl	80026e4 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5d 	bl	8002690 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff31 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa2 	bl	800274c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e014      	b.n	800284e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	791b      	ldrb	r3, [r3, #4]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fc3f 	bl	80020b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	795b      	ldrb	r3, [r3, #5]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_DAC_Start_DMA+0x1e>
 8002872:	2302      	movs	r3, #2
 8002874:	e08e      	b.n	8002994 <HAL_DAC_Start_DMA+0x13c>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2202      	movs	r2, #2
 8002880:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12a      	bne.n	80028de <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a43      	ldr	r2, [pc, #268]	; (800299c <HAL_DAC_Start_DMA+0x144>)
 800288e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a42      	ldr	r2, [pc, #264]	; (80029a0 <HAL_DAC_Start_DMA+0x148>)
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_DAC_Start_DMA+0x14c>)
 800289e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028ae:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d009      	beq.n	80028ca <HAL_DAC_Start_DMA+0x72>
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d00c      	beq.n	80028d4 <HAL_DAC_Start_DMA+0x7c>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d000      	beq.n	80028c0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80028be:	e039      	b.n	8002934 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3308      	adds	r3, #8
 80028c6:	617b      	str	r3, [r7, #20]
        break;
 80028c8:	e034      	b.n	8002934 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	617b      	str	r3, [r7, #20]
        break;
 80028d2:	e02f      	b.n	8002934 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3310      	adds	r3, #16
 80028da:	617b      	str	r3, [r7, #20]
        break;
 80028dc:	e02a      	b.n	8002934 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <HAL_DAC_Start_DMA+0x150>)
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4a30      	ldr	r2, [pc, #192]	; (80029ac <HAL_DAC_Start_DMA+0x154>)
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4a2f      	ldr	r2, [pc, #188]	; (80029b0 <HAL_DAC_Start_DMA+0x158>)
 80028f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002904:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d009      	beq.n	8002920 <HAL_DAC_Start_DMA+0xc8>
 800290c:	2b08      	cmp	r3, #8
 800290e:	d00c      	beq.n	800292a <HAL_DAC_Start_DMA+0xd2>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d000      	beq.n	8002916 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002914:	e00e      	b.n	8002934 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	617b      	str	r3, [r7, #20]
        break;
 800291e:	e009      	b.n	8002934 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3318      	adds	r3, #24
 8002926:	617b      	str	r3, [r7, #20]
        break;
 8002928:	e004      	b.n	8002934 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	331c      	adds	r3, #28
 8002930:	617b      	str	r3, [r7, #20]
        break;
 8002932:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002948:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6898      	ldr	r0, [r3, #8]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	f000 fa30 	bl	8002db8 <HAL_DMA_Start_IT>
 8002958:	e00e      	b.n	8002978 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002968:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	68d8      	ldr	r0, [r3, #12]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	f000 fa20 	bl	8002db8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	08002b33 	.word	0x08002b33
 80029a0:	08002b55 	.word	0x08002b55
 80029a4:	08002b71 	.word	0x08002b71
 80029a8:	08002bef 	.word	0x08002bef
 80029ac:	08002c11 	.word	0x08002c11
 80029b0:	08002c2d 	.word	0x08002c2d

080029b4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ca:	d118      	bne.n	80029fe <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2204      	movs	r2, #4
 80029d0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f843 	bl	8002a84 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a0c:	d118      	bne.n	8002a40 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2204      	movs	r2, #4
 8002a12:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f043 0202 	orr.w	r2, r3, #2
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a38:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8cd 	bl	8002bda <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	795b      	ldrb	r3, [r3, #5]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DAC_ConfigChannel+0x20>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e036      	b.n	8002b26 <HAL_DAC_ConfigChannel+0x8e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002acc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4013      	ands	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	22c0      	movs	r2, #192	; 0xc0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff ff81 	bl	8002a48 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	711a      	strb	r2, [r3, #4]
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff ff7a 	bl	8002a5c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f043 0204 	orr.w	r2, r3, #4
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff ff70 	bl	8002a70 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	711a      	strb	r2, [r3, #4]
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff ffce 	bl	8002b9e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	711a      	strb	r2, [r3, #4]
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7ff ffc7 	bl	8002bb2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f043 0204 	orr.w	r2, r3, #4
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff ffbd 	bl	8002bc6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	711a      	strb	r2, [r3, #4]
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff fcb6 	bl	80025d8 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e099      	b.n	8002dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c98:	e00f      	b.n	8002cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c9a:	f7ff fc9d 	bl	80025d8 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d908      	bls.n	8002cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e078      	b.n	8002dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e8      	bne.n	8002c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <HAL_DMA_Init+0x158>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0307 	bic.w	r3, r3, #7
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d117      	bne.n	8002d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa91 	bl	8003288 <DMA_CheckFifoParam>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2240      	movs	r2, #64	; 0x40
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e016      	b.n	8002dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa48 	bl	800321c <DMA_CalcBaseAndBitshift>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	223f      	movs	r2, #63	; 0x3f
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	f010803f 	.word	0xf010803f

08002db8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_DMA_Start_IT+0x26>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e040      	b.n	8002e60 <HAL_DMA_Start_IT+0xa8>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d12f      	bne.n	8002e52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f9da 	bl	80031c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	223f      	movs	r2, #63	; 0x3f
 8002e12:	409a      	lsls	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0216 	orr.w	r2, r2, #22
 8002e26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0208 	orr.w	r2, r2, #8
 8002e3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e005      	b.n	8002e5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d004      	beq.n	8002e86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00c      	b.n	8002ea0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2205      	movs	r2, #5
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eb8:	4b92      	ldr	r3, [pc, #584]	; (8003104 <HAL_DMA_IRQHandler+0x258>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a92      	ldr	r2, [pc, #584]	; (8003108 <HAL_DMA_IRQHandler+0x25c>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	0a9b      	lsrs	r3, r3, #10
 8002ec4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01a      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	2208      	movs	r2, #8
 8002f06:	409a      	lsls	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d012      	beq.n	8002f4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 0202 	orr.w	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f52:	2204      	movs	r2, #4
 8002f54:	409a      	lsls	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	2204      	movs	r2, #4
 8002f72:	409a      	lsls	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	f043 0204 	orr.w	r2, r3, #4
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	2210      	movs	r2, #16
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d043      	beq.n	800301c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d03c      	beq.n	800301c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d024      	beq.n	800301c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
 8002fda:	e01f      	b.n	800301c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
 8002fec:	e016      	b.n	800301c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0208 	bic.w	r2, r2, #8
 800300a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	2220      	movs	r2, #32
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 808e 	beq.w	800314a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8086 	beq.w	800314a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2220      	movs	r2, #32
 8003044:	409a      	lsls	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b05      	cmp	r3, #5
 8003054:	d136      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0216 	bic.w	r2, r2, #22
 8003064:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003074:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <HAL_DMA_IRQHandler+0x1da>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0208 	bic.w	r2, r2, #8
 8003094:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	223f      	movs	r2, #63	; 0x3f
 800309c:	409a      	lsls	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d07d      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
        }
        return;
 80030c2:	e078      	b.n	80031b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01c      	beq.n	800310c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d108      	bne.n	80030f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d030      	beq.n	800314a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e02b      	b.n	800314a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d027      	beq.n	800314a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
 8003102:	e022      	b.n	800314a <HAL_DMA_IRQHandler+0x29e>
 8003104:	20000024 	.word	0x20000024
 8003108:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0210 	bic.w	r2, r2, #16
 8003128:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	2b00      	cmp	r3, #0
 8003150:	d032      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d022      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2205      	movs	r2, #5
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	429a      	cmp	r2, r3
 8003180:	d307      	bcc.n	8003192 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f2      	bne.n	8003176 <HAL_DMA_IRQHandler+0x2ca>
 8003190:	e000      	b.n	8003194 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003192:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031b6:	bf00      	nop
    }
  }
}
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop

080031c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d108      	bne.n	8003200 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031fe:	e007      	b.n	8003210 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	3b10      	subs	r3, #16
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <DMA_CalcBaseAndBitshift+0x64>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003236:	4a13      	ldr	r2, [pc, #76]	; (8003284 <DMA_CalcBaseAndBitshift+0x68>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d909      	bls.n	800325e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	659a      	str	r2, [r3, #88]	; 0x58
 800325c:	e007      	b.n	800326e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	aaaaaaab 	.word	0xaaaaaaab
 8003284:	0800668c 	.word	0x0800668c

08003288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11f      	bne.n	80032e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d855      	bhi.n	8003354 <DMA_CheckFifoParam+0xcc>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <DMA_CheckFifoParam+0x28>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032d3 	.word	0x080032d3
 80032b8:	080032c1 	.word	0x080032c1
 80032bc:	08003355 	.word	0x08003355
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d045      	beq.n	8003358 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d0:	e042      	b.n	8003358 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032da:	d13f      	bne.n	800335c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e03c      	b.n	800335c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ea:	d121      	bne.n	8003330 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d836      	bhi.n	8003360 <DMA_CheckFifoParam+0xd8>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <DMA_CheckFifoParam+0x70>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003309 	.word	0x08003309
 80032fc:	0800330f 	.word	0x0800330f
 8003300:	08003309 	.word	0x08003309
 8003304:	08003321 	.word	0x08003321
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e02f      	b.n	800336e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d024      	beq.n	8003364 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e021      	b.n	8003364 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003328:	d11e      	bne.n	8003368 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800332e:	e01b      	b.n	8003368 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d902      	bls.n	800333c <DMA_CheckFifoParam+0xb4>
 8003336:	2b03      	cmp	r3, #3
 8003338:	d003      	beq.n	8003342 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800333a:	e018      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      break;
 8003340:	e015      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00e      	beq.n	800336c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      break;
 8003352:	e00b      	b.n	800336c <DMA_CheckFifoParam+0xe4>
      break;
 8003354:	bf00      	nop
 8003356:	e00a      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;
 8003358:	bf00      	nop
 800335a:	e008      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e006      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;
 8003360:	bf00      	nop
 8003362:	e004      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;
 8003364:	bf00      	nop
 8003366:	e002      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;   
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;
 800336c:	bf00      	nop
    }
  } 
  
  return status; 
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e16b      	b.n	8003670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f040 815a 	bne.w	800366a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d00b      	beq.n	80033d6 <HAL_GPIO_Init+0x5a>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d007      	beq.n	80033d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ca:	2b11      	cmp	r3, #17
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b12      	cmp	r3, #18
 80033d4:	d130      	bne.n	8003438 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0201 	and.w	r2, r3, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0xfc>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b12      	cmp	r3, #18
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80b4 	beq.w	800366a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_GPIO_Init+0x308>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a5e      	ldr	r2, [pc, #376]	; (8003684 <HAL_GPIO_Init+0x308>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b5c      	ldr	r3, [pc, #368]	; (8003684 <HAL_GPIO_Init+0x308>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a5a      	ldr	r2, [pc, #360]	; (8003688 <HAL_GPIO_Init+0x30c>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a51      	ldr	r2, [pc, #324]	; (800368c <HAL_GPIO_Init+0x310>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02b      	beq.n	80035a2 <HAL_GPIO_Init+0x226>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a50      	ldr	r2, [pc, #320]	; (8003690 <HAL_GPIO_Init+0x314>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d025      	beq.n	800359e <HAL_GPIO_Init+0x222>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4f      	ldr	r2, [pc, #316]	; (8003694 <HAL_GPIO_Init+0x318>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <HAL_GPIO_Init+0x21e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <HAL_GPIO_Init+0x31c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d019      	beq.n	8003596 <HAL_GPIO_Init+0x21a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4d      	ldr	r2, [pc, #308]	; (800369c <HAL_GPIO_Init+0x320>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_GPIO_Init+0x216>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4c      	ldr	r2, [pc, #304]	; (80036a0 <HAL_GPIO_Init+0x324>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00d      	beq.n	800358e <HAL_GPIO_Init+0x212>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4b      	ldr	r2, [pc, #300]	; (80036a4 <HAL_GPIO_Init+0x328>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <HAL_GPIO_Init+0x20e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4a      	ldr	r2, [pc, #296]	; (80036a8 <HAL_GPIO_Init+0x32c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_GPIO_Init+0x20a>
 8003582:	2307      	movs	r3, #7
 8003584:	e00e      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003586:	2308      	movs	r3, #8
 8003588:	e00c      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800358a:	2306      	movs	r3, #6
 800358c:	e00a      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800358e:	2305      	movs	r3, #5
 8003590:	e008      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003592:	2304      	movs	r3, #4
 8003594:	e006      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 8003596:	2303      	movs	r3, #3
 8003598:	e004      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800359a:	2302      	movs	r3, #2
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_GPIO_Init+0x228>
 80035a2:	2300      	movs	r3, #0
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	f002 0203 	and.w	r2, r2, #3
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	4093      	lsls	r3, r2
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b4:	4934      	ldr	r1, [pc, #208]	; (8003688 <HAL_GPIO_Init+0x30c>)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_GPIO_Init+0x330>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e6:	4a31      	ldr	r2, [pc, #196]	; (80036ac <HAL_GPIO_Init+0x330>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <HAL_GPIO_Init+0x330>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003616:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_GPIO_Init+0x330>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003664:	4a11      	ldr	r2, [pc, #68]	; (80036ac <HAL_GPIO_Init+0x330>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3301      	adds	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	f67f ae90 	bls.w	8003398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3724      	adds	r7, #36	; 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40023800 	.word	0x40023800
 8003688:	40013800 	.word	0x40013800
 800368c:	40020000 	.word	0x40020000
 8003690:	40020400 	.word	0x40020400
 8003694:	40020800 	.word	0x40020800
 8003698:	40020c00 	.word	0x40020c00
 800369c:	40021000 	.word	0x40021000
 80036a0:	40021400 	.word	0x40021400
 80036a4:	40021800 	.word	0x40021800
 80036a8:	40021c00 	.word	0x40021c00
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
 80036bc:	4613      	mov	r3, r2
 80036be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c0:	787b      	ldrb	r3, [r7, #1]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036cc:	e003      	b.n	80036d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	041a      	lsls	r2, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	619a      	str	r2, [r3, #24]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	401a      	ands	r2, r3
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d104      	bne.n	8003706 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	041a      	lsls	r2, r3, #16
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003704:	e002      	b.n	800370c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e25b      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d075      	beq.n	8003822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	4ba3      	ldr	r3, [pc, #652]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00c      	beq.n	800375c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4ba0      	ldr	r3, [pc, #640]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d112      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374e:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375a:	d10b      	bne.n	8003774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	4b99      	ldr	r3, [pc, #612]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05b      	beq.n	8003820 <HAL_RCC_OscConfig+0x108>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d157      	bne.n	8003820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e236      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x74>
 800377e:	4b91      	ldr	r3, [pc, #580]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a90      	ldr	r2, [pc, #576]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e01d      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x98>
 8003796:	4b8b      	ldr	r3, [pc, #556]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a8a      	ldr	r2, [pc, #552]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a87      	ldr	r2, [pc, #540]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0xb0>
 80037b0:	4b84      	ldr	r3, [pc, #528]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a83      	ldr	r2, [pc, #524]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b81      	ldr	r3, [pc, #516]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a80      	ldr	r2, [pc, #512]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe ff02 	bl	80025d8 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fefe 	bl	80025d8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1fb      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b76      	ldr	r3, [pc, #472]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0xc0>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe feee 	bl	80025d8 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003800:	f7fe feea 	bl	80025d8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1e7      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	4b6c      	ldr	r3, [pc, #432]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0xe8>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	4b65      	ldr	r3, [pc, #404]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d11c      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d116      	bne.n	8003880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1bb      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b56      	ldr	r3, [pc, #344]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4952      	ldr	r1, [pc, #328]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	e03a      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_OscConfig+0x2b0>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fe fea3 	bl	80025d8 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003896:	f7fe fe9f 	bl	80025d8 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e19c      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4940      	ldr	r1, [pc, #256]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_OscConfig+0x2b0>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe fe82 	bl	80025d8 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d8:	f7fe fe7e 	bl	80025d8 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e17b      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d030      	beq.n	8003964 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	4b30      	ldr	r3, [pc, #192]	; (80039cc <HAL_RCC_OscConfig+0x2b4>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fe fe62 	bl	80025d8 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003918:	f7fe fe5e 	bl	80025d8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e15b      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x200>
 8003936:	e015      	b.n	8003964 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003938:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_OscConfig+0x2b4>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fe fe4b 	bl	80025d8 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003946:	f7fe fe47 	bl	80025d8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e144      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a0 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x2b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d121      	bne.n	80039f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_RCC_OscConfig+0x2b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <HAL_RCC_OscConfig+0x2b8>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fe fe0d 	bl	80025d8 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e011      	b.n	80039e6 <HAL_RCC_OscConfig+0x2ce>
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	42470000 	.word	0x42470000
 80039cc:	42470e80 	.word	0x42470e80
 80039d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fe fe00 	bl	80025d8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e0fd      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e6:	4b81      	ldr	r3, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x4d4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
 80039fa:	4b7d      	ldr	r3, [pc, #500]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a7c      	ldr	r2, [pc, #496]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	e01c      	b.n	8003a42 <HAL_RCC_OscConfig+0x32a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x312>
 8003a10:	4b77      	ldr	r3, [pc, #476]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a76      	ldr	r2, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b74      	ldr	r3, [pc, #464]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a73      	ldr	r2, [pc, #460]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x32a>
 8003a2a:	4b71      	ldr	r3, [pc, #452]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a70      	ldr	r2, [pc, #448]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b6e      	ldr	r3, [pc, #440]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a6d      	ldr	r2, [pc, #436]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fdc5 	bl	80025d8 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe fdc1 	bl	80025d8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0bc      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCC_OscConfig+0x33a>
 8003a74:	e014      	b.n	8003aa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fdaf 	bl	80025d8 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe fdab 	bl	80025d8 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0a6      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8092 	beq.w	8003be0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d05c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d141      	bne.n	8003b54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b48      	ldr	r3, [pc, #288]	; (8003bf4 <HAL_RCC_OscConfig+0x4dc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fd7f 	bl	80025d8 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fd7b 	bl	80025d8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e078      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	019b      	lsls	r3, r3, #6
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	3b01      	subs	r3, #1
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	4933      	ldr	r1, [pc, #204]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b26:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCC_OscConfig+0x4dc>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fd54 	bl	80025d8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fd50 	bl	80025d8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e04d      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x41c>
 8003b52:	e045      	b.n	8003be0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_OscConfig+0x4dc>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fe fd3d 	bl	80025d8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fe fd39 	bl	80025d8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e036      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCC_OscConfig+0x44a>
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e029      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b8e:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <HAL_RCC_OscConfig+0x4d8>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d115      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10d      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470060 	.word	0x42470060

08003bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0cc      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d90c      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b8      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c4c:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a58      	ldr	r2, [pc, #352]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a52      	ldr	r2, [pc, #328]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	494d      	ldr	r1, [pc, #308]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d044      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d119      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e07f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e06f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e067      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f023 0203 	bic.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4934      	ldr	r1, [pc, #208]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce8:	f7fe fc76 	bl	80025d8 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf0:	f7fe fc72 	bl	80025d8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e04f      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 020c 	and.w	r2, r3, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d1eb      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d18:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d20c      	bcs.n	8003d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e032      	b.n	8003da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4916      	ldr	r1, [pc, #88]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	490e      	ldr	r1, [pc, #56]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7e:	f000 f821 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003d82:	4601      	mov	r1, r0
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	5cd3      	ldrb	r3, [r2, r3]
 8003d92:	fa21 f303 	lsr.w	r3, r1, r3
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fbd6 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023c00 	.word	0x40023c00
 8003db4:	40023800 	.word	0x40023800
 8003db8:	08006674 	.word	0x08006674
 8003dbc:	20000024 	.word	0x20000024
 8003dc0:	20000028 	.word	0x20000028

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d007      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x32>
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d008      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x38>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 80b4 	bne.w	8003f58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b5e      	ldr	r3, [pc, #376]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003df2:	60bb      	str	r3, [r7, #8]
       break;
 8003df4:	e0b3      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df6:	4b5e      	ldr	r3, [pc, #376]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003df8:	60bb      	str	r3, [r7, #8]
      break;
 8003dfa:	e0b0      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dfc:	4b5a      	ldr	r3, [pc, #360]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e06:	4b58      	ldr	r3, [pc, #352]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d04a      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	f04f 0400 	mov.w	r4, #0
 8003e1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	ea03 0501 	and.w	r5, r3, r1
 8003e28:	ea04 0602 	and.w	r6, r4, r2
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4632      	mov	r2, r6
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	f04f 0400 	mov.w	r4, #0
 8003e38:	0154      	lsls	r4, r2, #5
 8003e3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e3e:	014b      	lsls	r3, r1, #5
 8003e40:	4619      	mov	r1, r3
 8003e42:	4622      	mov	r2, r4
 8003e44:	1b49      	subs	r1, r1, r5
 8003e46:	eb62 0206 	sbc.w	r2, r2, r6
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	f04f 0400 	mov.w	r4, #0
 8003e52:	0194      	lsls	r4, r2, #6
 8003e54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e58:	018b      	lsls	r3, r1, #6
 8003e5a:	1a5b      	subs	r3, r3, r1
 8003e5c:	eb64 0402 	sbc.w	r4, r4, r2
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	00e2      	lsls	r2, r4, #3
 8003e6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e6e:	00d9      	lsls	r1, r3, #3
 8003e70:	460b      	mov	r3, r1
 8003e72:	4614      	mov	r4, r2
 8003e74:	195b      	adds	r3, r3, r5
 8003e76:	eb44 0406 	adc.w	r4, r4, r6
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	0262      	lsls	r2, r4, #9
 8003e84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e88:	0259      	lsls	r1, r3, #9
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	4621      	mov	r1, r4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	f7fc fe3c 	bl	8000b18 <__aeabi_uldivmod>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e049      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea8:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	f04f 0400 	mov.w	r4, #0
 8003eb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	ea03 0501 	and.w	r5, r3, r1
 8003ebe:	ea04 0602 	and.w	r6, r4, r2
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f04f 0400 	mov.w	r4, #0
 8003ece:	0154      	lsls	r4, r2, #5
 8003ed0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ed4:	014b      	lsls	r3, r1, #5
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4622      	mov	r2, r4
 8003eda:	1b49      	subs	r1, r1, r5
 8003edc:	eb62 0206 	sbc.w	r2, r2, r6
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	f04f 0400 	mov.w	r4, #0
 8003ee8:	0194      	lsls	r4, r2, #6
 8003eea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003eee:	018b      	lsls	r3, r1, #6
 8003ef0:	1a5b      	subs	r3, r3, r1
 8003ef2:	eb64 0402 	sbc.w	r4, r4, r2
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	00e2      	lsls	r2, r4, #3
 8003f00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f04:	00d9      	lsls	r1, r3, #3
 8003f06:	460b      	mov	r3, r1
 8003f08:	4614      	mov	r4, r2
 8003f0a:	195b      	adds	r3, r3, r5
 8003f0c:	eb44 0406 	adc.w	r4, r4, r6
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	02a2      	lsls	r2, r4, #10
 8003f1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f1e:	0299      	lsls	r1, r3, #10
 8003f20:	460b      	mov	r3, r1
 8003f22:	4614      	mov	r4, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	4621      	mov	r1, r4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f04f 0400 	mov.w	r4, #0
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	f7fc fdf1 	bl	8000b18 <__aeabi_uldivmod>
 8003f36:	4603      	mov	r3, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	3301      	adds	r3, #1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	60bb      	str	r3, [r7, #8]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f5a:	60bb      	str	r3, [r7, #8]
      break;
 8003f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	007a1200 	.word	0x007a1200

08003f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000024 	.word	0x20000024

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f90:	f7ff fff0 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003f94:	4601      	mov	r1, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0a9b      	lsrs	r3, r3, #10
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	08006684 	.word	0x08006684

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb8:	f7ff ffdc 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4601      	mov	r1, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0b5b      	lsrs	r3, r3, #13
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4a03      	ldr	r2, [pc, #12]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fca:	5cd3      	ldrb	r3, [r2, r3]
 8003fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	08006684 	.word	0x08006684

08003fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e01d      	b.n	800402a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe f920 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 fa40 	bl	80044a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b06      	cmp	r3, #6
 800405a:	d007      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	f241 1311 	movw	r3, #4369	; 0x1111
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <HAL_TIM_Base_Stop_IT+0x48>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	f240 4344 	movw	r3, #1092	; 0x444
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_Base_Stop_IT+0x48>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0202 	mvn.w	r2, #2
 80040fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9a5 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f997 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f9a8 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d122      	bne.n	8004180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0204 	mvn.w	r2, #4
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f97b 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f96d 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f97e 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b08      	cmp	r3, #8
 800418c:	d122      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b08      	cmp	r3, #8
 800419a:	d11b      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0208 	mvn.w	r2, #8
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f951 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f943 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f954 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d122      	bne.n	8004228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d11b      	bne.n	8004228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0210 	mvn.w	r2, #16
 80041f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2208      	movs	r2, #8
 80041fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f927 	bl	8004462 <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f919 	bl	800444e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f92a 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0201 	mvn.w	r2, #1
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fa3c 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426c:	2b80      	cmp	r3, #128	; 0x80
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fad0 	bl	8004820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8ef 	bl	800448a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0220 	mvn.w	r2, #32
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fa9a 	bl	800480c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIM_ConfigClockSource+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e0a6      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x166>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004316:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800431e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d067      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0x120>
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d80b      	bhi.n	800434c <HAL_TIM_ConfigClockSource+0x6c>
 8004334:	2b10      	cmp	r3, #16
 8004336:	d073      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0x140>
 8004338:	2b10      	cmp	r3, #16
 800433a:	d802      	bhi.n	8004342 <HAL_TIM_ConfigClockSource+0x62>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d06f      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004340:	e078      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004342:	2b20      	cmp	r3, #32
 8004344:	d06c      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0x140>
 8004346:	2b30      	cmp	r3, #48	; 0x30
 8004348:	d06a      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800434a:	e073      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800434c:	2b70      	cmp	r3, #112	; 0x70
 800434e:	d00d      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x8c>
 8004350:	2b70      	cmp	r3, #112	; 0x70
 8004352:	d804      	bhi.n	800435e <HAL_TIM_ConfigClockSource+0x7e>
 8004354:	2b50      	cmp	r3, #80	; 0x50
 8004356:	d033      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0xe0>
 8004358:	2b60      	cmp	r3, #96	; 0x60
 800435a:	d041      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800435c:	e06a      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004362:	d066      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x152>
 8004364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004368:	d017      	beq.n	800439a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800436a:	e063      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6899      	ldr	r1, [r3, #8]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f000 f9aa 	bl	80046d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800438e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	609a      	str	r2, [r3, #8]
      break;
 8004398:	e04c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f000 f993 	bl	80046d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043bc:	609a      	str	r2, [r3, #8]
      break;
 80043be:	e039      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f000 f907 	bl	80045e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2150      	movs	r1, #80	; 0x50
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f960 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 80043de:	e029      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f000 f926 	bl	800463e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2160      	movs	r1, #96	; 0x60
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f950 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 80043fe:	e019      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	461a      	mov	r2, r3
 800440e:	f000 f8e7 	bl	80045e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2140      	movs	r1, #64	; 0x40
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f940 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 800441e:	e009      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 f937 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 8004430:	e000      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a40      	ldr	r2, [pc, #256]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d00f      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <TIM_Base_SetConfig+0x118>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <TIM_Base_SetConfig+0x11c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3b      	ldr	r2, [pc, #236]	; (80045c0 <TIM_Base_SetConfig+0x120>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3a      	ldr	r2, [pc, #232]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d108      	bne.n	80044f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2f      	ldr	r2, [pc, #188]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004500:	d027      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <TIM_Base_SetConfig+0x118>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d023      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <TIM_Base_SetConfig+0x11c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01f      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2a      	ldr	r2, [pc, #168]	; (80045c0 <TIM_Base_SetConfig+0x120>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d01b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d017      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <TIM_Base_SetConfig+0x128>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a27      	ldr	r2, [pc, #156]	; (80045cc <TIM_Base_SetConfig+0x12c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00f      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <TIM_Base_SetConfig+0x130>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a25      	ldr	r2, [pc, #148]	; (80045d4 <TIM_Base_SetConfig+0x134>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <TIM_Base_SetConfig+0x138>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a23      	ldr	r2, [pc, #140]	; (80045dc <TIM_Base_SetConfig+0x13c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d108      	bne.n	8004564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <TIM_Base_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0xf8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <TIM_Base_SetConfig+0x124>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800
 80045d4:	40001800 	.word	0x40001800
 80045d8:	40001c00 	.word	0x40001c00
 80045dc:	40002000 	.word	0x40002000

080045e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 030a 	bic.w	r3, r3, #10
 800461c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463e:	b480      	push	{r7}
 8004640:	b087      	sub	sp, #28
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0210 	bic.w	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	031b      	lsls	r3, r3, #12
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800467a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f043 0307 	orr.w	r3, r3, #7
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	609a      	str	r2, [r3, #8]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004728:	2302      	movs	r3, #2
 800472a:	e05a      	b.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d022      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d01d      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d018      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a17      	ldr	r2, [pc, #92]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a15      	ldr	r2, [pc, #84]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d10c      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40010400 	.word	0x40010400
 8004804:	40014000 	.word	0x40014000
 8004808:	40001800 	.word	0x40001800

0800480c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e03f      	b.n	80048c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fd fd58 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fab3 	bl	8004de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	4613      	mov	r3, r2
 80048da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d140      	bne.n	800496a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Receive_IT+0x26>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e039      	b.n	800496c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_UART_Receive_IT+0x38>
 8004902:	2302      	movs	r3, #2
 8004904:	e032      	b.n	800496c <HAL_UART_Receive_IT+0x9e>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2222      	movs	r2, #34	; 0x22
 800492a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004944:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0220 	orr.w	r2, r2, #32
 8004964:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_UART_IRQHandler+0x52>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f98c 	bl	8004ce0 <UART_Receive_IT>
      return;
 80049c8:	e0d1      	b.n	8004b6e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80b0 	beq.w	8004b32 <HAL_UART_IRQHandler+0x1ba>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <HAL_UART_IRQHandler+0x70>
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80a5 	beq.w	8004b32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_UART_IRQHandler+0x90>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	f043 0201 	orr.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_UART_IRQHandler+0xb0>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	f043 0202 	orr.w	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_UART_IRQHandler+0xd0>
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00f      	beq.n	8004a72 <HAL_UART_IRQHandler+0xfa>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_UART_IRQHandler+0xee>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	f043 0208 	orr.w	r2, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d078      	beq.n	8004b6c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_UART_IRQHandler+0x11c>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f926 	bl	8004ce0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_UART_IRQHandler+0x144>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d031      	beq.n	8004b20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f86f 	bl	8004ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d123      	bne.n	8004b18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ade:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <HAL_UART_IRQHandler+0x1fc>)
 8004aee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe f9b7 	bl	8002e68 <HAL_DMA_Abort_IT>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d016      	beq.n	8004b2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0e:	e00e      	b.n	8004b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f83b 	bl	8004b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b16:	e00a      	b.n	8004b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f837 	bl	8004b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1e:	e006      	b.n	8004b2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f833 	bl	8004b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b2c:	e01e      	b.n	8004b6c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2e:	bf00      	nop
    return;
 8004b30:	e01c      	b.n	8004b6c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_UART_IRQHandler+0x1d6>
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f85c 	bl	8004c04 <UART_Transmit_IT>
    return;
 8004b4c:	e00f      	b.n	8004b6e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_UART_IRQHandler+0x1f6>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8a4 	bl	8004cb0 <UART_EndTransmit_IT>
    return;
 8004b68:	bf00      	nop
 8004b6a:	e000      	b.n	8004b6e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004b6c:	bf00      	nop
  }
}
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	08004bdd 	.word	0x08004bdd

08004b78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ffc8 	bl	8004b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b21      	cmp	r3, #33	; 0x21
 8004c16:	d144      	bne.n	8004ca2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	d11a      	bne.n	8004c58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]
 8004c4a:	e00e      	b.n	8004c6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]
 8004c56:	e008      	b.n	8004c6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	1c59      	adds	r1, r3, #1
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6211      	str	r1, [r2, #32]
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4619      	mov	r1, r3
 8004c78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10f      	bne.n	8004c9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff51 	bl	8004b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b22      	cmp	r3, #34	; 0x22
 8004cf2:	d171      	bne.n	8004dd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d123      	bne.n	8004d46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10e      	bne.n	8004d2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
 8004d28:	e029      	b.n	8004d7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28
 8004d44:	e01b      	b.n	8004d7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6858      	ldr	r0, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6291      	str	r1, [r2, #40]	; 0x28
 8004d5e:	b2c2      	uxtb	r2, r0
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e00c      	b.n	8004d7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	1c58      	adds	r0, r3, #1
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	6288      	str	r0, [r1, #40]	; 0x28
 8004d76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d120      	bne.n	8004dd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0220 	bic.w	r2, r2, #32
 8004da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fff0 	bl	8001db0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e002      	b.n	8004dda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e26:	f023 030c 	bic.w	r3, r3, #12
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	430b      	orrs	r3, r1
 8004e32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	f040 818b 	bne.w	800516c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4ac1      	ldr	r2, [pc, #772]	; (8005160 <UART_SetConfig+0x37c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d005      	beq.n	8004e6c <UART_SetConfig+0x88>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4abf      	ldr	r2, [pc, #764]	; (8005164 <UART_SetConfig+0x380>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	f040 80bd 	bne.w	8004fe6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7ff f8a2 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 8004e70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	461d      	mov	r5, r3
 8004e76:	f04f 0600 	mov.w	r6, #0
 8004e7a:	46a8      	mov	r8, r5
 8004e7c:	46b1      	mov	r9, r6
 8004e7e:	eb18 0308 	adds.w	r3, r8, r8
 8004e82:	eb49 0409 	adc.w	r4, r9, r9
 8004e86:	4698      	mov	r8, r3
 8004e88:	46a1      	mov	r9, r4
 8004e8a:	eb18 0805 	adds.w	r8, r8, r5
 8004e8e:	eb49 0906 	adc.w	r9, r9, r6
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ea2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ea6:	4688      	mov	r8, r1
 8004ea8:	4691      	mov	r9, r2
 8004eaa:	eb18 0005 	adds.w	r0, r8, r5
 8004eae:	eb49 0106 	adc.w	r1, r9, r6
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	f04f 0600 	mov.w	r6, #0
 8004ebc:	196b      	adds	r3, r5, r5
 8004ebe:	eb46 0406 	adc.w	r4, r6, r6
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	f7fb fe27 	bl	8000b18 <__aeabi_uldivmod>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4ba5      	ldr	r3, [pc, #660]	; (8005168 <UART_SetConfig+0x384>)
 8004ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	461d      	mov	r5, r3
 8004ee0:	f04f 0600 	mov.w	r6, #0
 8004ee4:	46a9      	mov	r9, r5
 8004ee6:	46b2      	mov	sl, r6
 8004ee8:	eb19 0309 	adds.w	r3, r9, r9
 8004eec:	eb4a 040a 	adc.w	r4, sl, sl
 8004ef0:	4699      	mov	r9, r3
 8004ef2:	46a2      	mov	sl, r4
 8004ef4:	eb19 0905 	adds.w	r9, r9, r5
 8004ef8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f10:	4689      	mov	r9, r1
 8004f12:	4692      	mov	sl, r2
 8004f14:	eb19 0005 	adds.w	r0, r9, r5
 8004f18:	eb4a 0106 	adc.w	r1, sl, r6
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	461d      	mov	r5, r3
 8004f22:	f04f 0600 	mov.w	r6, #0
 8004f26:	196b      	adds	r3, r5, r5
 8004f28:	eb46 0406 	adc.w	r4, r6, r6
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	f7fb fdf2 	bl	8000b18 <__aeabi_uldivmod>
 8004f34:	4603      	mov	r3, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4b8b      	ldr	r3, [pc, #556]	; (8005168 <UART_SetConfig+0x384>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a86      	ldr	r2, [pc, #536]	; (8005168 <UART_SetConfig+0x384>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f5c:	4498      	add	r8, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	461d      	mov	r5, r3
 8004f62:	f04f 0600 	mov.w	r6, #0
 8004f66:	46a9      	mov	r9, r5
 8004f68:	46b2      	mov	sl, r6
 8004f6a:	eb19 0309 	adds.w	r3, r9, r9
 8004f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f72:	4699      	mov	r9, r3
 8004f74:	46a2      	mov	sl, r4
 8004f76:	eb19 0905 	adds.w	r9, r9, r5
 8004f7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f92:	4689      	mov	r9, r1
 8004f94:	4692      	mov	sl, r2
 8004f96:	eb19 0005 	adds.w	r0, r9, r5
 8004f9a:	eb4a 0106 	adc.w	r1, sl, r6
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	f04f 0600 	mov.w	r6, #0
 8004fa8:	196b      	adds	r3, r5, r5
 8004faa:	eb46 0406 	adc.w	r4, r6, r6
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f7fb fdb1 	bl	8000b18 <__aeabi_uldivmod>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <UART_SetConfig+0x384>)
 8004fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2164      	movs	r1, #100	; 0x64
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	3332      	adds	r3, #50	; 0x32
 8004fd0:	4a65      	ldr	r2, [pc, #404]	; (8005168 <UART_SetConfig+0x384>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	f003 0207 	and.w	r2, r3, #7
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4442      	add	r2, r8
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	e26f      	b.n	80054c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fe ffd1 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8004fea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	461d      	mov	r5, r3
 8004ff0:	f04f 0600 	mov.w	r6, #0
 8004ff4:	46a8      	mov	r8, r5
 8004ff6:	46b1      	mov	r9, r6
 8004ff8:	eb18 0308 	adds.w	r3, r8, r8
 8004ffc:	eb49 0409 	adc.w	r4, r9, r9
 8005000:	4698      	mov	r8, r3
 8005002:	46a1      	mov	r9, r4
 8005004:	eb18 0805 	adds.w	r8, r8, r5
 8005008:	eb49 0906 	adc.w	r9, r9, r6
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005018:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800501c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005020:	4688      	mov	r8, r1
 8005022:	4691      	mov	r9, r2
 8005024:	eb18 0005 	adds.w	r0, r8, r5
 8005028:	eb49 0106 	adc.w	r1, r9, r6
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	461d      	mov	r5, r3
 8005032:	f04f 0600 	mov.w	r6, #0
 8005036:	196b      	adds	r3, r5, r5
 8005038:	eb46 0406 	adc.w	r4, r6, r6
 800503c:	461a      	mov	r2, r3
 800503e:	4623      	mov	r3, r4
 8005040:	f7fb fd6a 	bl	8000b18 <__aeabi_uldivmod>
 8005044:	4603      	mov	r3, r0
 8005046:	460c      	mov	r4, r1
 8005048:	461a      	mov	r2, r3
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <UART_SetConfig+0x384>)
 800504c:	fba3 2302 	umull	r2, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	461d      	mov	r5, r3
 800505a:	f04f 0600 	mov.w	r6, #0
 800505e:	46a9      	mov	r9, r5
 8005060:	46b2      	mov	sl, r6
 8005062:	eb19 0309 	adds.w	r3, r9, r9
 8005066:	eb4a 040a 	adc.w	r4, sl, sl
 800506a:	4699      	mov	r9, r3
 800506c:	46a2      	mov	sl, r4
 800506e:	eb19 0905 	adds.w	r9, r9, r5
 8005072:	eb4a 0a06 	adc.w	sl, sl, r6
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800508a:	4689      	mov	r9, r1
 800508c:	4692      	mov	sl, r2
 800508e:	eb19 0005 	adds.w	r0, r9, r5
 8005092:	eb4a 0106 	adc.w	r1, sl, r6
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	461d      	mov	r5, r3
 800509c:	f04f 0600 	mov.w	r6, #0
 80050a0:	196b      	adds	r3, r5, r5
 80050a2:	eb46 0406 	adc.w	r4, r6, r6
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f7fb fd35 	bl	8000b18 <__aeabi_uldivmod>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <UART_SetConfig+0x384>)
 80050b6:	fba3 1302 	umull	r1, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2164      	movs	r1, #100	; 0x64
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	3332      	adds	r3, #50	; 0x32
 80050c8:	4a27      	ldr	r2, [pc, #156]	; (8005168 <UART_SetConfig+0x384>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d6:	4498      	add	r8, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	461d      	mov	r5, r3
 80050dc:	f04f 0600 	mov.w	r6, #0
 80050e0:	46a9      	mov	r9, r5
 80050e2:	46b2      	mov	sl, r6
 80050e4:	eb19 0309 	adds.w	r3, r9, r9
 80050e8:	eb4a 040a 	adc.w	r4, sl, sl
 80050ec:	4699      	mov	r9, r3
 80050ee:	46a2      	mov	sl, r4
 80050f0:	eb19 0905 	adds.w	r9, r9, r5
 80050f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800510c:	4689      	mov	r9, r1
 800510e:	4692      	mov	sl, r2
 8005110:	eb19 0005 	adds.w	r0, r9, r5
 8005114:	eb4a 0106 	adc.w	r1, sl, r6
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	461d      	mov	r5, r3
 800511e:	f04f 0600 	mov.w	r6, #0
 8005122:	196b      	adds	r3, r5, r5
 8005124:	eb46 0406 	adc.w	r4, r6, r6
 8005128:	461a      	mov	r2, r3
 800512a:	4623      	mov	r3, r4
 800512c:	f7fb fcf4 	bl	8000b18 <__aeabi_uldivmod>
 8005130:	4603      	mov	r3, r0
 8005132:	460c      	mov	r4, r1
 8005134:	461a      	mov	r2, r3
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <UART_SetConfig+0x384>)
 8005138:	fba3 1302 	umull	r1, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	2164      	movs	r1, #100	; 0x64
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	3332      	adds	r3, #50	; 0x32
 800514a:	4a07      	ldr	r2, [pc, #28]	; (8005168 <UART_SetConfig+0x384>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f003 0207 	and.w	r2, r3, #7
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4442      	add	r2, r8
 800515c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800515e:	e1b2      	b.n	80054c6 <UART_SetConfig+0x6e2>
 8005160:	40011000 	.word	0x40011000
 8005164:	40011400 	.word	0x40011400
 8005168:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4ad7      	ldr	r2, [pc, #860]	; (80054d0 <UART_SetConfig+0x6ec>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d005      	beq.n	8005182 <UART_SetConfig+0x39e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4ad6      	ldr	r2, [pc, #856]	; (80054d4 <UART_SetConfig+0x6f0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	f040 80d1 	bne.w	8005324 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005182:	f7fe ff17 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 8005186:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	469a      	mov	sl, r3
 800518c:	f04f 0b00 	mov.w	fp, #0
 8005190:	46d0      	mov	r8, sl
 8005192:	46d9      	mov	r9, fp
 8005194:	eb18 0308 	adds.w	r3, r8, r8
 8005198:	eb49 0409 	adc.w	r4, r9, r9
 800519c:	4698      	mov	r8, r3
 800519e:	46a1      	mov	r9, r4
 80051a0:	eb18 080a 	adds.w	r8, r8, sl
 80051a4:	eb49 090b 	adc.w	r9, r9, fp
 80051a8:	f04f 0100 	mov.w	r1, #0
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051bc:	4688      	mov	r8, r1
 80051be:	4691      	mov	r9, r2
 80051c0:	eb1a 0508 	adds.w	r5, sl, r8
 80051c4:	eb4b 0609 	adc.w	r6, fp, r9
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4619      	mov	r1, r3
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	f04f 0400 	mov.w	r4, #0
 80051da:	0094      	lsls	r4, r2, #2
 80051dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051e0:	008b      	lsls	r3, r1, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	4623      	mov	r3, r4
 80051e6:	4628      	mov	r0, r5
 80051e8:	4631      	mov	r1, r6
 80051ea:	f7fb fc95 	bl	8000b18 <__aeabi_uldivmod>
 80051ee:	4603      	mov	r3, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	461a      	mov	r2, r3
 80051f4:	4bb8      	ldr	r3, [pc, #736]	; (80054d8 <UART_SetConfig+0x6f4>)
 80051f6:	fba3 2302 	umull	r2, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	469b      	mov	fp, r3
 8005204:	f04f 0c00 	mov.w	ip, #0
 8005208:	46d9      	mov	r9, fp
 800520a:	46e2      	mov	sl, ip
 800520c:	eb19 0309 	adds.w	r3, r9, r9
 8005210:	eb4a 040a 	adc.w	r4, sl, sl
 8005214:	4699      	mov	r9, r3
 8005216:	46a2      	mov	sl, r4
 8005218:	eb19 090b 	adds.w	r9, r9, fp
 800521c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800522c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005230:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005234:	4689      	mov	r9, r1
 8005236:	4692      	mov	sl, r2
 8005238:	eb1b 0509 	adds.w	r5, fp, r9
 800523c:	eb4c 060a 	adc.w	r6, ip, sl
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4619      	mov	r1, r3
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	f04f 0400 	mov.w	r4, #0
 8005252:	0094      	lsls	r4, r2, #2
 8005254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005258:	008b      	lsls	r3, r1, #2
 800525a:	461a      	mov	r2, r3
 800525c:	4623      	mov	r3, r4
 800525e:	4628      	mov	r0, r5
 8005260:	4631      	mov	r1, r6
 8005262:	f7fb fc59 	bl	8000b18 <__aeabi_uldivmod>
 8005266:	4603      	mov	r3, r0
 8005268:	460c      	mov	r4, r1
 800526a:	461a      	mov	r2, r3
 800526c:	4b9a      	ldr	r3, [pc, #616]	; (80054d8 <UART_SetConfig+0x6f4>)
 800526e:	fba3 1302 	umull	r1, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2164      	movs	r1, #100	; 0x64
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	3332      	adds	r3, #50	; 0x32
 8005280:	4a95      	ldr	r2, [pc, #596]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528c:	4498      	add	r8, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	469b      	mov	fp, r3
 8005292:	f04f 0c00 	mov.w	ip, #0
 8005296:	46d9      	mov	r9, fp
 8005298:	46e2      	mov	sl, ip
 800529a:	eb19 0309 	adds.w	r3, r9, r9
 800529e:	eb4a 040a 	adc.w	r4, sl, sl
 80052a2:	4699      	mov	r9, r3
 80052a4:	46a2      	mov	sl, r4
 80052a6:	eb19 090b 	adds.w	r9, r9, fp
 80052aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052c2:	4689      	mov	r9, r1
 80052c4:	4692      	mov	sl, r2
 80052c6:	eb1b 0509 	adds.w	r5, fp, r9
 80052ca:	eb4c 060a 	adc.w	r6, ip, sl
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4619      	mov	r1, r3
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	0094      	lsls	r4, r2, #2
 80052e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052e6:	008b      	lsls	r3, r1, #2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	4631      	mov	r1, r6
 80052f0:	f7fb fc12 	bl	8000b18 <__aeabi_uldivmod>
 80052f4:	4603      	mov	r3, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	461a      	mov	r2, r3
 80052fa:	4b77      	ldr	r3, [pc, #476]	; (80054d8 <UART_SetConfig+0x6f4>)
 80052fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	2164      	movs	r1, #100	; 0x64
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	3332      	adds	r3, #50	; 0x32
 800530e:	4a72      	ldr	r2, [pc, #456]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	f003 020f 	and.w	r2, r3, #15
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4442      	add	r2, r8
 8005320:	609a      	str	r2, [r3, #8]
 8005322:	e0d0      	b.n	80054c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005324:	f7fe fe32 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8005328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	469a      	mov	sl, r3
 800532e:	f04f 0b00 	mov.w	fp, #0
 8005332:	46d0      	mov	r8, sl
 8005334:	46d9      	mov	r9, fp
 8005336:	eb18 0308 	adds.w	r3, r8, r8
 800533a:	eb49 0409 	adc.w	r4, r9, r9
 800533e:	4698      	mov	r8, r3
 8005340:	46a1      	mov	r9, r4
 8005342:	eb18 080a 	adds.w	r8, r8, sl
 8005346:	eb49 090b 	adc.w	r9, r9, fp
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800535a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800535e:	4688      	mov	r8, r1
 8005360:	4691      	mov	r9, r2
 8005362:	eb1a 0508 	adds.w	r5, sl, r8
 8005366:	eb4b 0609 	adc.w	r6, fp, r9
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4619      	mov	r1, r3
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	f04f 0400 	mov.w	r4, #0
 800537c:	0094      	lsls	r4, r2, #2
 800537e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005382:	008b      	lsls	r3, r1, #2
 8005384:	461a      	mov	r2, r3
 8005386:	4623      	mov	r3, r4
 8005388:	4628      	mov	r0, r5
 800538a:	4631      	mov	r1, r6
 800538c:	f7fb fbc4 	bl	8000b18 <__aeabi_uldivmod>
 8005390:	4603      	mov	r3, r0
 8005392:	460c      	mov	r4, r1
 8005394:	461a      	mov	r2, r3
 8005396:	4b50      	ldr	r3, [pc, #320]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005398:	fba3 2302 	umull	r2, r3, r3, r2
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	469b      	mov	fp, r3
 80053a6:	f04f 0c00 	mov.w	ip, #0
 80053aa:	46d9      	mov	r9, fp
 80053ac:	46e2      	mov	sl, ip
 80053ae:	eb19 0309 	adds.w	r3, r9, r9
 80053b2:	eb4a 040a 	adc.w	r4, sl, sl
 80053b6:	4699      	mov	r9, r3
 80053b8:	46a2      	mov	sl, r4
 80053ba:	eb19 090b 	adds.w	r9, r9, fp
 80053be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053d6:	4689      	mov	r9, r1
 80053d8:	4692      	mov	sl, r2
 80053da:	eb1b 0509 	adds.w	r5, fp, r9
 80053de:	eb4c 060a 	adc.w	r6, ip, sl
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4619      	mov	r1, r3
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	f04f 0400 	mov.w	r4, #0
 80053f4:	0094      	lsls	r4, r2, #2
 80053f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053fa:	008b      	lsls	r3, r1, #2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4623      	mov	r3, r4
 8005400:	4628      	mov	r0, r5
 8005402:	4631      	mov	r1, r6
 8005404:	f7fb fb88 	bl	8000b18 <__aeabi_uldivmod>
 8005408:	4603      	mov	r3, r0
 800540a:	460c      	mov	r4, r1
 800540c:	461a      	mov	r2, r3
 800540e:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005410:	fba3 1302 	umull	r1, r3, r3, r2
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	2164      	movs	r1, #100	; 0x64
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	3332      	adds	r3, #50	; 0x32
 8005422:	4a2d      	ldr	r2, [pc, #180]	; (80054d8 <UART_SetConfig+0x6f4>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542e:	4498      	add	r8, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	469b      	mov	fp, r3
 8005434:	f04f 0c00 	mov.w	ip, #0
 8005438:	46d9      	mov	r9, fp
 800543a:	46e2      	mov	sl, ip
 800543c:	eb19 0309 	adds.w	r3, r9, r9
 8005440:	eb4a 040a 	adc.w	r4, sl, sl
 8005444:	4699      	mov	r9, r3
 8005446:	46a2      	mov	sl, r4
 8005448:	eb19 090b 	adds.w	r9, r9, fp
 800544c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800545c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005460:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005464:	4689      	mov	r9, r1
 8005466:	4692      	mov	sl, r2
 8005468:	eb1b 0509 	adds.w	r5, fp, r9
 800546c:	eb4c 060a 	adc.w	r6, ip, sl
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4619      	mov	r1, r3
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	f04f 0400 	mov.w	r4, #0
 8005482:	0094      	lsls	r4, r2, #2
 8005484:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005488:	008b      	lsls	r3, r1, #2
 800548a:	461a      	mov	r2, r3
 800548c:	4623      	mov	r3, r4
 800548e:	4628      	mov	r0, r5
 8005490:	4631      	mov	r1, r6
 8005492:	f7fb fb41 	bl	8000b18 <__aeabi_uldivmod>
 8005496:	4603      	mov	r3, r0
 8005498:	460c      	mov	r4, r1
 800549a:	461a      	mov	r2, r3
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <UART_SetConfig+0x6f4>)
 800549e:	fba3 1302 	umull	r1, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2164      	movs	r1, #100	; 0x64
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	; 0x32
 80054b0:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <UART_SetConfig+0x6f4>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4442      	add	r2, r8
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	e7ff      	b.n	80054c6 <UART_SetConfig+0x6e2>
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	40011000 	.word	0x40011000
 80054d4:	40011400 	.word	0x40011400
 80054d8:	51eb851f 	.word	0x51eb851f

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4e0d      	ldr	r6, [pc, #52]	; (8005514 <__libc_init_array+0x38>)
 80054e0:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e2:	1ba4      	subs	r4, r4, r6
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	2500      	movs	r5, #0
 80054e8:	42a5      	cmp	r5, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	4e0b      	ldr	r6, [pc, #44]	; (800551c <__libc_init_array+0x40>)
 80054ee:	4c0c      	ldr	r4, [pc, #48]	; (8005520 <__libc_init_array+0x44>)
 80054f0:	f001 f834 	bl	800655c <_init>
 80054f4:	1ba4      	subs	r4, r4, r6
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	2500      	movs	r5, #0
 80054fa:	42a5      	cmp	r5, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005504:	4798      	blx	r3
 8005506:	3501      	adds	r5, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800550e:	4798      	blx	r3
 8005510:	3501      	adds	r5, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	08006878 	.word	0x08006878
 8005518:	08006878 	.word	0x08006878
 800551c:	08006878 	.word	0x08006878
 8005520:	0800687c 	.word	0x0800687c

08005524 <memset>:
 8005524:	4402      	add	r2, r0
 8005526:	4603      	mov	r3, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>
 8005534:	0000      	movs	r0, r0
	...

08005538 <sin>:
 8005538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800553a:	ec51 0b10 	vmov	r0, r1, d0
 800553e:	4a20      	ldr	r2, [pc, #128]	; (80055c0 <sin+0x88>)
 8005540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005544:	4293      	cmp	r3, r2
 8005546:	dc07      	bgt.n	8005558 <sin+0x20>
 8005548:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80055b8 <sin+0x80>
 800554c:	2000      	movs	r0, #0
 800554e:	f000 fe37 	bl	80061c0 <__kernel_sin>
 8005552:	ec51 0b10 	vmov	r0, r1, d0
 8005556:	e007      	b.n	8005568 <sin+0x30>
 8005558:	4a1a      	ldr	r2, [pc, #104]	; (80055c4 <sin+0x8c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	dd09      	ble.n	8005572 <sin+0x3a>
 800555e:	ee10 2a10 	vmov	r2, s0
 8005562:	460b      	mov	r3, r1
 8005564:	f7fa fe3e 	bl	80001e4 <__aeabi_dsub>
 8005568:	ec41 0b10 	vmov	d0, r0, r1
 800556c:	b005      	add	sp, #20
 800556e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005572:	4668      	mov	r0, sp
 8005574:	f000 f828 	bl	80055c8 <__ieee754_rem_pio2>
 8005578:	f000 0003 	and.w	r0, r0, #3
 800557c:	2801      	cmp	r0, #1
 800557e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005582:	ed9d 0b00 	vldr	d0, [sp]
 8005586:	d004      	beq.n	8005592 <sin+0x5a>
 8005588:	2802      	cmp	r0, #2
 800558a:	d005      	beq.n	8005598 <sin+0x60>
 800558c:	b970      	cbnz	r0, 80055ac <sin+0x74>
 800558e:	2001      	movs	r0, #1
 8005590:	e7dd      	b.n	800554e <sin+0x16>
 8005592:	f000 fa0d 	bl	80059b0 <__kernel_cos>
 8005596:	e7dc      	b.n	8005552 <sin+0x1a>
 8005598:	2001      	movs	r0, #1
 800559a:	f000 fe11 	bl	80061c0 <__kernel_sin>
 800559e:	ec53 2b10 	vmov	r2, r3, d0
 80055a2:	ee10 0a10 	vmov	r0, s0
 80055a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055aa:	e7dd      	b.n	8005568 <sin+0x30>
 80055ac:	f000 fa00 	bl	80059b0 <__kernel_cos>
 80055b0:	e7f5      	b.n	800559e <sin+0x66>
 80055b2:	bf00      	nop
 80055b4:	f3af 8000 	nop.w
	...
 80055c0:	3fe921fb 	.word	0x3fe921fb
 80055c4:	7fefffff 	.word	0x7fefffff

080055c8 <__ieee754_rem_pio2>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	ec57 6b10 	vmov	r6, r7, d0
 80055d0:	4bc3      	ldr	r3, [pc, #780]	; (80058e0 <__ieee754_rem_pio2+0x318>)
 80055d2:	b08d      	sub	sp, #52	; 0x34
 80055d4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80055d8:	4598      	cmp	r8, r3
 80055da:	4604      	mov	r4, r0
 80055dc:	9704      	str	r7, [sp, #16]
 80055de:	dc07      	bgt.n	80055f0 <__ieee754_rem_pio2+0x28>
 80055e0:	2200      	movs	r2, #0
 80055e2:	2300      	movs	r3, #0
 80055e4:	ed84 0b00 	vstr	d0, [r4]
 80055e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80055ec:	2500      	movs	r5, #0
 80055ee:	e027      	b.n	8005640 <__ieee754_rem_pio2+0x78>
 80055f0:	4bbc      	ldr	r3, [pc, #752]	; (80058e4 <__ieee754_rem_pio2+0x31c>)
 80055f2:	4598      	cmp	r8, r3
 80055f4:	dc75      	bgt.n	80056e2 <__ieee754_rem_pio2+0x11a>
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	4dbb      	ldr	r5, [pc, #748]	; (80058e8 <__ieee754_rem_pio2+0x320>)
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	ee10 0a10 	vmov	r0, s0
 8005600:	a3a9      	add	r3, pc, #676	; (adr r3, 80058a8 <__ieee754_rem_pio2+0x2e0>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	4639      	mov	r1, r7
 8005608:	dd36      	ble.n	8005678 <__ieee754_rem_pio2+0xb0>
 800560a:	f7fa fdeb 	bl	80001e4 <__aeabi_dsub>
 800560e:	45a8      	cmp	r8, r5
 8005610:	4606      	mov	r6, r0
 8005612:	460f      	mov	r7, r1
 8005614:	d018      	beq.n	8005648 <__ieee754_rem_pio2+0x80>
 8005616:	a3a6      	add	r3, pc, #664	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x2e8>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f7fa fde2 	bl	80001e4 <__aeabi_dsub>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	e9c4 2300 	strd	r2, r3, [r4]
 8005628:	4630      	mov	r0, r6
 800562a:	4639      	mov	r1, r7
 800562c:	f7fa fdda 	bl	80001e4 <__aeabi_dsub>
 8005630:	a39f      	add	r3, pc, #636	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x2e8>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fdd5 	bl	80001e4 <__aeabi_dsub>
 800563a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800563e:	2501      	movs	r5, #1
 8005640:	4628      	mov	r0, r5
 8005642:	b00d      	add	sp, #52	; 0x34
 8005644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005648:	a39b      	add	r3, pc, #620	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2f0>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f7fa fdc9 	bl	80001e4 <__aeabi_dsub>
 8005652:	a39b      	add	r3, pc, #620	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	4606      	mov	r6, r0
 800565a:	460f      	mov	r7, r1
 800565c:	f7fa fdc2 	bl	80001e4 <__aeabi_dsub>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	e9c4 2300 	strd	r2, r3, [r4]
 8005668:	4630      	mov	r0, r6
 800566a:	4639      	mov	r1, r7
 800566c:	f7fa fdba 	bl	80001e4 <__aeabi_dsub>
 8005670:	a393      	add	r3, pc, #588	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f8>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	e7de      	b.n	8005636 <__ieee754_rem_pio2+0x6e>
 8005678:	f7fa fdb6 	bl	80001e8 <__adddf3>
 800567c:	45a8      	cmp	r8, r5
 800567e:	4606      	mov	r6, r0
 8005680:	460f      	mov	r7, r1
 8005682:	d016      	beq.n	80056b2 <__ieee754_rem_pio2+0xea>
 8005684:	a38a      	add	r3, pc, #552	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x2e8>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f7fa fdad 	bl	80001e8 <__adddf3>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	e9c4 2300 	strd	r2, r3, [r4]
 8005696:	4630      	mov	r0, r6
 8005698:	4639      	mov	r1, r7
 800569a:	f7fa fda3 	bl	80001e4 <__aeabi_dsub>
 800569e:	a384      	add	r3, pc, #528	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x2e8>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa fda0 	bl	80001e8 <__adddf3>
 80056a8:	f04f 35ff 	mov.w	r5, #4294967295
 80056ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056b0:	e7c6      	b.n	8005640 <__ieee754_rem_pio2+0x78>
 80056b2:	a381      	add	r3, pc, #516	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2f0>)
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f7fa fd96 	bl	80001e8 <__adddf3>
 80056bc:	a380      	add	r3, pc, #512	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f8>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	4606      	mov	r6, r0
 80056c4:	460f      	mov	r7, r1
 80056c6:	f7fa fd8f 	bl	80001e8 <__adddf3>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	e9c4 2300 	strd	r2, r3, [r4]
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fa fd85 	bl	80001e4 <__aeabi_dsub>
 80056da:	a379      	add	r3, pc, #484	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f8>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	e7e0      	b.n	80056a4 <__ieee754_rem_pio2+0xdc>
 80056e2:	4b82      	ldr	r3, [pc, #520]	; (80058ec <__ieee754_rem_pio2+0x324>)
 80056e4:	4598      	cmp	r8, r3
 80056e6:	f300 80d0 	bgt.w	800588a <__ieee754_rem_pio2+0x2c2>
 80056ea:	f000 fe23 	bl	8006334 <fabs>
 80056ee:	ec57 6b10 	vmov	r6, r7, d0
 80056f2:	ee10 0a10 	vmov	r0, s0
 80056f6:	a374      	add	r3, pc, #464	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x300>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	4639      	mov	r1, r7
 80056fe:	f7fa ff29 	bl	8000554 <__aeabi_dmul>
 8005702:	2200      	movs	r2, #0
 8005704:	4b7a      	ldr	r3, [pc, #488]	; (80058f0 <__ieee754_rem_pio2+0x328>)
 8005706:	f7fa fd6f 	bl	80001e8 <__adddf3>
 800570a:	f7fb f9bd 	bl	8000a88 <__aeabi_d2iz>
 800570e:	4605      	mov	r5, r0
 8005710:	f7fa feb6 	bl	8000480 <__aeabi_i2d>
 8005714:	a364      	add	r3, pc, #400	; (adr r3, 80058a8 <__ieee754_rem_pio2+0x2e0>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800571e:	f7fa ff19 	bl	8000554 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4630      	mov	r0, r6
 8005728:	4639      	mov	r1, r7
 800572a:	f7fa fd5b 	bl	80001e4 <__aeabi_dsub>
 800572e:	a360      	add	r3, pc, #384	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x2e8>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	4682      	mov	sl, r0
 8005736:	468b      	mov	fp, r1
 8005738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800573c:	f7fa ff0a 	bl	8000554 <__aeabi_dmul>
 8005740:	2d1f      	cmp	r5, #31
 8005742:	4606      	mov	r6, r0
 8005744:	460f      	mov	r7, r1
 8005746:	dc0c      	bgt.n	8005762 <__ieee754_rem_pio2+0x19a>
 8005748:	1e6a      	subs	r2, r5, #1
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <__ieee754_rem_pio2+0x32c>)
 800574c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005750:	4543      	cmp	r3, r8
 8005752:	d006      	beq.n	8005762 <__ieee754_rem_pio2+0x19a>
 8005754:	4632      	mov	r2, r6
 8005756:	463b      	mov	r3, r7
 8005758:	4650      	mov	r0, sl
 800575a:	4659      	mov	r1, fp
 800575c:	f7fa fd42 	bl	80001e4 <__aeabi_dsub>
 8005760:	e00e      	b.n	8005780 <__ieee754_rem_pio2+0x1b8>
 8005762:	4632      	mov	r2, r6
 8005764:	463b      	mov	r3, r7
 8005766:	4650      	mov	r0, sl
 8005768:	4659      	mov	r1, fp
 800576a:	f7fa fd3b 	bl	80001e4 <__aeabi_dsub>
 800576e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005772:	9305      	str	r3, [sp, #20]
 8005774:	9a05      	ldr	r2, [sp, #20]
 8005776:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b10      	cmp	r3, #16
 800577e:	dc02      	bgt.n	8005786 <__ieee754_rem_pio2+0x1be>
 8005780:	e9c4 0100 	strd	r0, r1, [r4]
 8005784:	e039      	b.n	80057fa <__ieee754_rem_pio2+0x232>
 8005786:	a34c      	add	r3, pc, #304	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x2f0>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005790:	f7fa fee0 	bl	8000554 <__aeabi_dmul>
 8005794:	4606      	mov	r6, r0
 8005796:	460f      	mov	r7, r1
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4650      	mov	r0, sl
 800579e:	4659      	mov	r1, fp
 80057a0:	f7fa fd20 	bl	80001e4 <__aeabi_dsub>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4680      	mov	r8, r0
 80057aa:	4689      	mov	r9, r1
 80057ac:	4650      	mov	r0, sl
 80057ae:	4659      	mov	r1, fp
 80057b0:	f7fa fd18 	bl	80001e4 <__aeabi_dsub>
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	f7fa fd14 	bl	80001e4 <__aeabi_dsub>
 80057bc:	a340      	add	r3, pc, #256	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2f8>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	4606      	mov	r6, r0
 80057c4:	460f      	mov	r7, r1
 80057c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ca:	f7fa fec3 	bl	8000554 <__aeabi_dmul>
 80057ce:	4632      	mov	r2, r6
 80057d0:	463b      	mov	r3, r7
 80057d2:	f7fa fd07 	bl	80001e4 <__aeabi_dsub>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4606      	mov	r6, r0
 80057dc:	460f      	mov	r7, r1
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fa fcff 	bl	80001e4 <__aeabi_dsub>
 80057e6:	9a05      	ldr	r2, [sp, #20]
 80057e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b31      	cmp	r3, #49	; 0x31
 80057f0:	dc20      	bgt.n	8005834 <__ieee754_rem_pio2+0x26c>
 80057f2:	e9c4 0100 	strd	r0, r1, [r4]
 80057f6:	46c2      	mov	sl, r8
 80057f8:	46cb      	mov	fp, r9
 80057fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80057fe:	4650      	mov	r0, sl
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	4659      	mov	r1, fp
 8005806:	f7fa fced 	bl	80001e4 <__aeabi_dsub>
 800580a:	463b      	mov	r3, r7
 800580c:	4632      	mov	r2, r6
 800580e:	f7fa fce9 	bl	80001e4 <__aeabi_dsub>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800581a:	f6bf af11 	bge.w	8005640 <__ieee754_rem_pio2+0x78>
 800581e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005822:	6063      	str	r3, [r4, #4]
 8005824:	f8c4 8000 	str.w	r8, [r4]
 8005828:	60a0      	str	r0, [r4, #8]
 800582a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800582e:	60e3      	str	r3, [r4, #12]
 8005830:	426d      	negs	r5, r5
 8005832:	e705      	b.n	8005640 <__ieee754_rem_pio2+0x78>
 8005834:	a326      	add	r3, pc, #152	; (adr r3, 80058d0 <__ieee754_rem_pio2+0x308>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800583e:	f7fa fe89 	bl	8000554 <__aeabi_dmul>
 8005842:	4606      	mov	r6, r0
 8005844:	460f      	mov	r7, r1
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4640      	mov	r0, r8
 800584c:	4649      	mov	r1, r9
 800584e:	f7fa fcc9 	bl	80001e4 <__aeabi_dsub>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4682      	mov	sl, r0
 8005858:	468b      	mov	fp, r1
 800585a:	4640      	mov	r0, r8
 800585c:	4649      	mov	r1, r9
 800585e:	f7fa fcc1 	bl	80001e4 <__aeabi_dsub>
 8005862:	4632      	mov	r2, r6
 8005864:	463b      	mov	r3, r7
 8005866:	f7fa fcbd 	bl	80001e4 <__aeabi_dsub>
 800586a:	a31b      	add	r3, pc, #108	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x310>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	4606      	mov	r6, r0
 8005872:	460f      	mov	r7, r1
 8005874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005878:	f7fa fe6c 	bl	8000554 <__aeabi_dmul>
 800587c:	4632      	mov	r2, r6
 800587e:	463b      	mov	r3, r7
 8005880:	f7fa fcb0 	bl	80001e4 <__aeabi_dsub>
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	e764      	b.n	8005754 <__ieee754_rem_pio2+0x18c>
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <__ieee754_rem_pio2+0x330>)
 800588c:	4598      	cmp	r8, r3
 800588e:	dd35      	ble.n	80058fc <__ieee754_rem_pio2+0x334>
 8005890:	ee10 2a10 	vmov	r2, s0
 8005894:	463b      	mov	r3, r7
 8005896:	4630      	mov	r0, r6
 8005898:	4639      	mov	r1, r7
 800589a:	f7fa fca3 	bl	80001e4 <__aeabi_dsub>
 800589e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058a2:	e9c4 0100 	strd	r0, r1, [r4]
 80058a6:	e6a1      	b.n	80055ec <__ieee754_rem_pio2+0x24>
 80058a8:	54400000 	.word	0x54400000
 80058ac:	3ff921fb 	.word	0x3ff921fb
 80058b0:	1a626331 	.word	0x1a626331
 80058b4:	3dd0b461 	.word	0x3dd0b461
 80058b8:	1a600000 	.word	0x1a600000
 80058bc:	3dd0b461 	.word	0x3dd0b461
 80058c0:	2e037073 	.word	0x2e037073
 80058c4:	3ba3198a 	.word	0x3ba3198a
 80058c8:	6dc9c883 	.word	0x6dc9c883
 80058cc:	3fe45f30 	.word	0x3fe45f30
 80058d0:	2e000000 	.word	0x2e000000
 80058d4:	3ba3198a 	.word	0x3ba3198a
 80058d8:	252049c1 	.word	0x252049c1
 80058dc:	397b839a 	.word	0x397b839a
 80058e0:	3fe921fb 	.word	0x3fe921fb
 80058e4:	4002d97b 	.word	0x4002d97b
 80058e8:	3ff921fb 	.word	0x3ff921fb
 80058ec:	413921fb 	.word	0x413921fb
 80058f0:	3fe00000 	.word	0x3fe00000
 80058f4:	08006694 	.word	0x08006694
 80058f8:	7fefffff 	.word	0x7fefffff
 80058fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005900:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005904:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005908:	4630      	mov	r0, r6
 800590a:	460f      	mov	r7, r1
 800590c:	f7fb f8bc 	bl	8000a88 <__aeabi_d2iz>
 8005910:	f7fa fdb6 	bl	8000480 <__aeabi_i2d>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005920:	f7fa fc60 	bl	80001e4 <__aeabi_dsub>
 8005924:	2200      	movs	r2, #0
 8005926:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <__ieee754_rem_pio2+0x3dc>)
 8005928:	f7fa fe14 	bl	8000554 <__aeabi_dmul>
 800592c:	460f      	mov	r7, r1
 800592e:	4606      	mov	r6, r0
 8005930:	f7fb f8aa 	bl	8000a88 <__aeabi_d2iz>
 8005934:	f7fa fda4 	bl	8000480 <__aeabi_i2d>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4630      	mov	r0, r6
 800593e:	4639      	mov	r1, r7
 8005940:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005944:	f7fa fc4e 	bl	80001e4 <__aeabi_dsub>
 8005948:	2200      	movs	r2, #0
 800594a:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <__ieee754_rem_pio2+0x3dc>)
 800594c:	f7fa fe02 	bl	8000554 <__aeabi_dmul>
 8005950:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005954:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005958:	f04f 0803 	mov.w	r8, #3
 800595c:	2600      	movs	r6, #0
 800595e:	2700      	movs	r7, #0
 8005960:	4632      	mov	r2, r6
 8005962:	463b      	mov	r3, r7
 8005964:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005968:	f108 3aff 	add.w	sl, r8, #4294967295
 800596c:	f7fb f85a 	bl	8000a24 <__aeabi_dcmpeq>
 8005970:	b9b0      	cbnz	r0, 80059a0 <__ieee754_rem_pio2+0x3d8>
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <__ieee754_rem_pio2+0x3e0>)
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	2302      	movs	r3, #2
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	462a      	mov	r2, r5
 800597c:	4643      	mov	r3, r8
 800597e:	4621      	mov	r1, r4
 8005980:	a806      	add	r0, sp, #24
 8005982:	f000 f8dd 	bl	8005b40 <__kernel_rem_pio2>
 8005986:	9b04      	ldr	r3, [sp, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	4605      	mov	r5, r0
 800598c:	f6bf ae58 	bge.w	8005640 <__ieee754_rem_pio2+0x78>
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005996:	6063      	str	r3, [r4, #4]
 8005998:	68e3      	ldr	r3, [r4, #12]
 800599a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800599e:	e746      	b.n	800582e <__ieee754_rem_pio2+0x266>
 80059a0:	46d0      	mov	r8, sl
 80059a2:	e7dd      	b.n	8005960 <__ieee754_rem_pio2+0x398>
 80059a4:	41700000 	.word	0x41700000
 80059a8:	08006714 	.word	0x08006714
 80059ac:	00000000 	.word	0x00000000

080059b0 <__kernel_cos>:
 80059b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	ec59 8b10 	vmov	r8, r9, d0
 80059b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80059bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80059c0:	ed2d 8b02 	vpush	{d8}
 80059c4:	eeb0 8a41 	vmov.f32	s16, s2
 80059c8:	eef0 8a61 	vmov.f32	s17, s3
 80059cc:	da07      	bge.n	80059de <__kernel_cos+0x2e>
 80059ce:	ee10 0a10 	vmov	r0, s0
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fb f858 	bl	8000a88 <__aeabi_d2iz>
 80059d8:	2800      	cmp	r0, #0
 80059da:	f000 8089 	beq.w	8005af0 <__kernel_cos+0x140>
 80059de:	4642      	mov	r2, r8
 80059e0:	464b      	mov	r3, r9
 80059e2:	4640      	mov	r0, r8
 80059e4:	4649      	mov	r1, r9
 80059e6:	f7fa fdb5 	bl	8000554 <__aeabi_dmul>
 80059ea:	2200      	movs	r2, #0
 80059ec:	4b4e      	ldr	r3, [pc, #312]	; (8005b28 <__kernel_cos+0x178>)
 80059ee:	4604      	mov	r4, r0
 80059f0:	460d      	mov	r5, r1
 80059f2:	f7fa fdaf 	bl	8000554 <__aeabi_dmul>
 80059f6:	a340      	add	r3, pc, #256	; (adr r3, 8005af8 <__kernel_cos+0x148>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	4682      	mov	sl, r0
 80059fe:	468b      	mov	fp, r1
 8005a00:	4620      	mov	r0, r4
 8005a02:	4629      	mov	r1, r5
 8005a04:	f7fa fda6 	bl	8000554 <__aeabi_dmul>
 8005a08:	a33d      	add	r3, pc, #244	; (adr r3, 8005b00 <__kernel_cos+0x150>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fbeb 	bl	80001e8 <__adddf3>
 8005a12:	4622      	mov	r2, r4
 8005a14:	462b      	mov	r3, r5
 8005a16:	f7fa fd9d 	bl	8000554 <__aeabi_dmul>
 8005a1a:	a33b      	add	r3, pc, #236	; (adr r3, 8005b08 <__kernel_cos+0x158>)
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f7fa fbe0 	bl	80001e4 <__aeabi_dsub>
 8005a24:	4622      	mov	r2, r4
 8005a26:	462b      	mov	r3, r5
 8005a28:	f7fa fd94 	bl	8000554 <__aeabi_dmul>
 8005a2c:	a338      	add	r3, pc, #224	; (adr r3, 8005b10 <__kernel_cos+0x160>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fbd9 	bl	80001e8 <__adddf3>
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	f7fa fd8b 	bl	8000554 <__aeabi_dmul>
 8005a3e:	a336      	add	r3, pc, #216	; (adr r3, 8005b18 <__kernel_cos+0x168>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f7fa fbce 	bl	80001e4 <__aeabi_dsub>
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	f7fa fd82 	bl	8000554 <__aeabi_dmul>
 8005a50:	a333      	add	r3, pc, #204	; (adr r3, 8005b20 <__kernel_cos+0x170>)
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f7fa fbc7 	bl	80001e8 <__adddf3>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	f7fa fd79 	bl	8000554 <__aeabi_dmul>
 8005a62:	4622      	mov	r2, r4
 8005a64:	462b      	mov	r3, r5
 8005a66:	f7fa fd75 	bl	8000554 <__aeabi_dmul>
 8005a6a:	ec53 2b18 	vmov	r2, r3, d8
 8005a6e:	4604      	mov	r4, r0
 8005a70:	460d      	mov	r5, r1
 8005a72:	4640      	mov	r0, r8
 8005a74:	4649      	mov	r1, r9
 8005a76:	f7fa fd6d 	bl	8000554 <__aeabi_dmul>
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4629      	mov	r1, r5
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7fa fbaf 	bl	80001e4 <__aeabi_dsub>
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <__kernel_cos+0x17c>)
 8005a88:	429e      	cmp	r6, r3
 8005a8a:	4680      	mov	r8, r0
 8005a8c:	4689      	mov	r9, r1
 8005a8e:	dc11      	bgt.n	8005ab4 <__kernel_cos+0x104>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4650      	mov	r0, sl
 8005a96:	4659      	mov	r1, fp
 8005a98:	f7fa fba4 	bl	80001e4 <__aeabi_dsub>
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4924      	ldr	r1, [pc, #144]	; (8005b30 <__kernel_cos+0x180>)
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f7fa fb9e 	bl	80001e4 <__aeabi_dsub>
 8005aa8:	ecbd 8b02 	vpop	{d8}
 8005aac:	ec41 0b10 	vmov	d0, r0, r1
 8005ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <__kernel_cos+0x184>)
 8005ab6:	491e      	ldr	r1, [pc, #120]	; (8005b30 <__kernel_cos+0x180>)
 8005ab8:	429e      	cmp	r6, r3
 8005aba:	bfcc      	ite	gt
 8005abc:	4d1e      	ldrgt	r5, [pc, #120]	; (8005b38 <__kernel_cos+0x188>)
 8005abe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005ac2:	2400      	movs	r4, #0
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f7fa fb8b 	bl	80001e4 <__aeabi_dsub>
 8005ace:	4622      	mov	r2, r4
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	460f      	mov	r7, r1
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	4650      	mov	r0, sl
 8005ad8:	4659      	mov	r1, fp
 8005ada:	f7fa fb83 	bl	80001e4 <__aeabi_dsub>
 8005ade:	4642      	mov	r2, r8
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	f7fa fb7f 	bl	80001e4 <__aeabi_dsub>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4630      	mov	r0, r6
 8005aec:	4639      	mov	r1, r7
 8005aee:	e7d9      	b.n	8005aa4 <__kernel_cos+0xf4>
 8005af0:	2000      	movs	r0, #0
 8005af2:	490f      	ldr	r1, [pc, #60]	; (8005b30 <__kernel_cos+0x180>)
 8005af4:	e7d8      	b.n	8005aa8 <__kernel_cos+0xf8>
 8005af6:	bf00      	nop
 8005af8:	be8838d4 	.word	0xbe8838d4
 8005afc:	bda8fae9 	.word	0xbda8fae9
 8005b00:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b04:	3e21ee9e 	.word	0x3e21ee9e
 8005b08:	809c52ad 	.word	0x809c52ad
 8005b0c:	3e927e4f 	.word	0x3e927e4f
 8005b10:	19cb1590 	.word	0x19cb1590
 8005b14:	3efa01a0 	.word	0x3efa01a0
 8005b18:	16c15177 	.word	0x16c15177
 8005b1c:	3f56c16c 	.word	0x3f56c16c
 8005b20:	5555554c 	.word	0x5555554c
 8005b24:	3fa55555 	.word	0x3fa55555
 8005b28:	3fe00000 	.word	0x3fe00000
 8005b2c:	3fd33332 	.word	0x3fd33332
 8005b30:	3ff00000 	.word	0x3ff00000
 8005b34:	3fe90000 	.word	0x3fe90000
 8005b38:	3fd20000 	.word	0x3fd20000
 8005b3c:	00000000 	.word	0x00000000

08005b40 <__kernel_rem_pio2>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	ed2d 8b02 	vpush	{d8}
 8005b48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005b4c:	1ed4      	subs	r4, r2, #3
 8005b4e:	9308      	str	r3, [sp, #32]
 8005b50:	9101      	str	r1, [sp, #4]
 8005b52:	4bc5      	ldr	r3, [pc, #788]	; (8005e68 <__kernel_rem_pio2+0x328>)
 8005b54:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005b56:	9009      	str	r0, [sp, #36]	; 0x24
 8005b58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	9b08      	ldr	r3, [sp, #32]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	2318      	movs	r3, #24
 8005b66:	fb94 f4f3 	sdiv	r4, r4, r3
 8005b6a:	f06f 0317 	mvn.w	r3, #23
 8005b6e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005b72:	fb04 3303 	mla	r3, r4, r3, r3
 8005b76:	eb03 0a02 	add.w	sl, r3, r2
 8005b7a:	9b04      	ldr	r3, [sp, #16]
 8005b7c:	9a07      	ldr	r2, [sp, #28]
 8005b7e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005e58 <__kernel_rem_pio2+0x318>
 8005b82:	eb03 0802 	add.w	r8, r3, r2
 8005b86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005b88:	1aa7      	subs	r7, r4, r2
 8005b8a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005b8e:	ae22      	add	r6, sp, #136	; 0x88
 8005b90:	2500      	movs	r5, #0
 8005b92:	4545      	cmp	r5, r8
 8005b94:	dd13      	ble.n	8005bbe <__kernel_rem_pio2+0x7e>
 8005b96:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005e58 <__kernel_rem_pio2+0x318>
 8005b9a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005b9e:	2600      	movs	r6, #0
 8005ba0:	9b04      	ldr	r3, [sp, #16]
 8005ba2:	429e      	cmp	r6, r3
 8005ba4:	dc32      	bgt.n	8005c0c <__kernel_rem_pio2+0xcc>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba8:	9302      	str	r3, [sp, #8]
 8005baa:	9b08      	ldr	r3, [sp, #32]
 8005bac:	199d      	adds	r5, r3, r6
 8005bae:	ab22      	add	r3, sp, #136	; 0x88
 8005bb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005bb4:	9306      	str	r3, [sp, #24]
 8005bb6:	ec59 8b18 	vmov	r8, r9, d8
 8005bba:	2700      	movs	r7, #0
 8005bbc:	e01f      	b.n	8005bfe <__kernel_rem_pio2+0xbe>
 8005bbe:	42ef      	cmn	r7, r5
 8005bc0:	d407      	bmi.n	8005bd2 <__kernel_rem_pio2+0x92>
 8005bc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005bc6:	f7fa fc5b 	bl	8000480 <__aeabi_i2d>
 8005bca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005bce:	3501      	adds	r5, #1
 8005bd0:	e7df      	b.n	8005b92 <__kernel_rem_pio2+0x52>
 8005bd2:	ec51 0b18 	vmov	r0, r1, d8
 8005bd6:	e7f8      	b.n	8005bca <__kernel_rem_pio2+0x8a>
 8005bd8:	9906      	ldr	r1, [sp, #24]
 8005bda:	9d02      	ldr	r5, [sp, #8]
 8005bdc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005be0:	9106      	str	r1, [sp, #24]
 8005be2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005be6:	9502      	str	r5, [sp, #8]
 8005be8:	f7fa fcb4 	bl	8000554 <__aeabi_dmul>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	f7fa faf8 	bl	80001e8 <__adddf3>
 8005bf8:	3701      	adds	r7, #1
 8005bfa:	4680      	mov	r8, r0
 8005bfc:	4689      	mov	r9, r1
 8005bfe:	9b07      	ldr	r3, [sp, #28]
 8005c00:	429f      	cmp	r7, r3
 8005c02:	dde9      	ble.n	8005bd8 <__kernel_rem_pio2+0x98>
 8005c04:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005c08:	3601      	adds	r6, #1
 8005c0a:	e7c9      	b.n	8005ba0 <__kernel_rem_pio2+0x60>
 8005c0c:	9b04      	ldr	r3, [sp, #16]
 8005c0e:	aa0e      	add	r2, sp, #56	; 0x38
 8005c10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c14:	930c      	str	r3, [sp, #48]	; 0x30
 8005c16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005c18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005c1c:	9c04      	ldr	r4, [sp, #16]
 8005c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c20:	ab9a      	add	r3, sp, #616	; 0x268
 8005c22:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005c26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c2e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005c32:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005c36:	ab9a      	add	r3, sp, #616	; 0x268
 8005c38:	445b      	add	r3, fp
 8005c3a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005c3e:	2500      	movs	r5, #0
 8005c40:	1b63      	subs	r3, r4, r5
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	dc78      	bgt.n	8005d38 <__kernel_rem_pio2+0x1f8>
 8005c46:	4650      	mov	r0, sl
 8005c48:	ec49 8b10 	vmov	d0, r8, r9
 8005c4c:	f000 fc00 	bl	8006450 <scalbn>
 8005c50:	ec57 6b10 	vmov	r6, r7, d0
 8005c54:	2200      	movs	r2, #0
 8005c56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005c5a:	ee10 0a10 	vmov	r0, s0
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f7fa fc78 	bl	8000554 <__aeabi_dmul>
 8005c64:	ec41 0b10 	vmov	d0, r0, r1
 8005c68:	f000 fb6e 	bl	8006348 <floor>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	ec51 0b10 	vmov	r0, r1, d0
 8005c72:	4b7e      	ldr	r3, [pc, #504]	; (8005e6c <__kernel_rem_pio2+0x32c>)
 8005c74:	f7fa fc6e 	bl	8000554 <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa fab0 	bl	80001e4 <__aeabi_dsub>
 8005c84:	460f      	mov	r7, r1
 8005c86:	4606      	mov	r6, r0
 8005c88:	f7fa fefe 	bl	8000a88 <__aeabi_d2iz>
 8005c8c:	9006      	str	r0, [sp, #24]
 8005c8e:	f7fa fbf7 	bl	8000480 <__aeabi_i2d>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa faa3 	bl	80001e4 <__aeabi_dsub>
 8005c9e:	f1ba 0f00 	cmp.w	sl, #0
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460f      	mov	r7, r1
 8005ca6:	dd6c      	ble.n	8005d82 <__kernel_rem_pio2+0x242>
 8005ca8:	1e62      	subs	r2, r4, #1
 8005caa:	ab0e      	add	r3, sp, #56	; 0x38
 8005cac:	f1ca 0118 	rsb	r1, sl, #24
 8005cb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005cb4:	9d06      	ldr	r5, [sp, #24]
 8005cb6:	fa40 f301 	asr.w	r3, r0, r1
 8005cba:	441d      	add	r5, r3
 8005cbc:	408b      	lsls	r3, r1
 8005cbe:	1ac0      	subs	r0, r0, r3
 8005cc0:	ab0e      	add	r3, sp, #56	; 0x38
 8005cc2:	9506      	str	r5, [sp, #24]
 8005cc4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005cc8:	f1ca 0317 	rsb	r3, sl, #23
 8005ccc:	fa40 f303 	asr.w	r3, r0, r3
 8005cd0:	9302      	str	r3, [sp, #8]
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dd62      	ble.n	8005d9e <__kernel_rem_pio2+0x25e>
 8005cd8:	9b06      	ldr	r3, [sp, #24]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	3301      	adds	r3, #1
 8005cde:	9306      	str	r3, [sp, #24]
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005ce6:	4294      	cmp	r4, r2
 8005ce8:	f300 8095 	bgt.w	8005e16 <__kernel_rem_pio2+0x2d6>
 8005cec:	f1ba 0f00 	cmp.w	sl, #0
 8005cf0:	dd07      	ble.n	8005d02 <__kernel_rem_pio2+0x1c2>
 8005cf2:	f1ba 0f01 	cmp.w	sl, #1
 8005cf6:	f000 80a2 	beq.w	8005e3e <__kernel_rem_pio2+0x2fe>
 8005cfa:	f1ba 0f02 	cmp.w	sl, #2
 8005cfe:	f000 80c1 	beq.w	8005e84 <__kernel_rem_pio2+0x344>
 8005d02:	9b02      	ldr	r3, [sp, #8]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d14a      	bne.n	8005d9e <__kernel_rem_pio2+0x25e>
 8005d08:	4632      	mov	r2, r6
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	4958      	ldr	r1, [pc, #352]	; (8005e70 <__kernel_rem_pio2+0x330>)
 8005d10:	f7fa fa68 	bl	80001e4 <__aeabi_dsub>
 8005d14:	4606      	mov	r6, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	d040      	beq.n	8005d9e <__kernel_rem_pio2+0x25e>
 8005d1c:	4650      	mov	r0, sl
 8005d1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005e60 <__kernel_rem_pio2+0x320>
 8005d22:	f000 fb95 	bl	8006450 <scalbn>
 8005d26:	4630      	mov	r0, r6
 8005d28:	4639      	mov	r1, r7
 8005d2a:	ec53 2b10 	vmov	r2, r3, d0
 8005d2e:	f7fa fa59 	bl	80001e4 <__aeabi_dsub>
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	e032      	b.n	8005d9e <__kernel_rem_pio2+0x25e>
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4b4e      	ldr	r3, [pc, #312]	; (8005e74 <__kernel_rem_pio2+0x334>)
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4649      	mov	r1, r9
 8005d40:	f7fa fc08 	bl	8000554 <__aeabi_dmul>
 8005d44:	f7fa fea0 	bl	8000a88 <__aeabi_d2iz>
 8005d48:	f7fa fb9a 	bl	8000480 <__aeabi_i2d>
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <__kernel_rem_pio2+0x338>)
 8005d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d54:	f7fa fbfe 	bl	8000554 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4649      	mov	r1, r9
 8005d60:	f7fa fa40 	bl	80001e4 <__aeabi_dsub>
 8005d64:	f7fa fe90 	bl	8000a88 <__aeabi_d2iz>
 8005d68:	ab0e      	add	r3, sp, #56	; 0x38
 8005d6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005d6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d76:	f7fa fa37 	bl	80001e8 <__adddf3>
 8005d7a:	3501      	adds	r5, #1
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	4689      	mov	r9, r1
 8005d80:	e75e      	b.n	8005c40 <__kernel_rem_pio2+0x100>
 8005d82:	d105      	bne.n	8005d90 <__kernel_rem_pio2+0x250>
 8005d84:	1e63      	subs	r3, r4, #1
 8005d86:	aa0e      	add	r2, sp, #56	; 0x38
 8005d88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005d8c:	15c3      	asrs	r3, r0, #23
 8005d8e:	e79f      	b.n	8005cd0 <__kernel_rem_pio2+0x190>
 8005d90:	2200      	movs	r2, #0
 8005d92:	4b3a      	ldr	r3, [pc, #232]	; (8005e7c <__kernel_rem_pio2+0x33c>)
 8005d94:	f7fa fe64 	bl	8000a60 <__aeabi_dcmpge>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d139      	bne.n	8005e10 <__kernel_rem_pio2+0x2d0>
 8005d9c:	9002      	str	r0, [sp, #8]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2300      	movs	r3, #0
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fe3d 	bl	8000a24 <__aeabi_dcmpeq>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	f000 80c7 	beq.w	8005f3e <__kernel_rem_pio2+0x3fe>
 8005db0:	1e65      	subs	r5, r4, #1
 8005db2:	462b      	mov	r3, r5
 8005db4:	2200      	movs	r2, #0
 8005db6:	9904      	ldr	r1, [sp, #16]
 8005db8:	428b      	cmp	r3, r1
 8005dba:	da6a      	bge.n	8005e92 <__kernel_rem_pio2+0x352>
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	f000 8088 	beq.w	8005ed2 <__kernel_rem_pio2+0x392>
 8005dc2:	ab0e      	add	r3, sp, #56	; 0x38
 8005dc4:	f1aa 0a18 	sub.w	sl, sl, #24
 8005dc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80b4 	beq.w	8005f3a <__kernel_rem_pio2+0x3fa>
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005e60 <__kernel_rem_pio2+0x320>
 8005dd8:	f000 fb3a 	bl	8006450 <scalbn>
 8005ddc:	00ec      	lsls	r4, r5, #3
 8005dde:	ab72      	add	r3, sp, #456	; 0x1c8
 8005de0:	191e      	adds	r6, r3, r4
 8005de2:	ec59 8b10 	vmov	r8, r9, d0
 8005de6:	f106 0a08 	add.w	sl, r6, #8
 8005dea:	462f      	mov	r7, r5
 8005dec:	2f00      	cmp	r7, #0
 8005dee:	f280 80df 	bge.w	8005fb0 <__kernel_rem_pio2+0x470>
 8005df2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005e58 <__kernel_rem_pio2+0x318>
 8005df6:	f04f 0a00 	mov.w	sl, #0
 8005dfa:	eba5 030a 	sub.w	r3, r5, sl
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f2c0 810a 	blt.w	8006018 <__kernel_rem_pio2+0x4d8>
 8005e04:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005e80 <__kernel_rem_pio2+0x340>
 8005e08:	ec59 8b18 	vmov	r8, r9, d8
 8005e0c:	2700      	movs	r7, #0
 8005e0e:	e0f5      	b.n	8005ffc <__kernel_rem_pio2+0x4bc>
 8005e10:	2302      	movs	r3, #2
 8005e12:	9302      	str	r3, [sp, #8]
 8005e14:	e760      	b.n	8005cd8 <__kernel_rem_pio2+0x198>
 8005e16:	ab0e      	add	r3, sp, #56	; 0x38
 8005e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1c:	b94d      	cbnz	r5, 8005e32 <__kernel_rem_pio2+0x2f2>
 8005e1e:	b12b      	cbz	r3, 8005e2c <__kernel_rem_pio2+0x2ec>
 8005e20:	a80e      	add	r0, sp, #56	; 0x38
 8005e22:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005e26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	3201      	adds	r2, #1
 8005e2e:	461d      	mov	r5, r3
 8005e30:	e759      	b.n	8005ce6 <__kernel_rem_pio2+0x1a6>
 8005e32:	a80e      	add	r0, sp, #56	; 0x38
 8005e34:	1acb      	subs	r3, r1, r3
 8005e36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005e3a:	462b      	mov	r3, r5
 8005e3c:	e7f6      	b.n	8005e2c <__kernel_rem_pio2+0x2ec>
 8005e3e:	1e62      	subs	r2, r4, #1
 8005e40:	ab0e      	add	r3, sp, #56	; 0x38
 8005e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e46:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005e4a:	a90e      	add	r1, sp, #56	; 0x38
 8005e4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005e50:	e757      	b.n	8005d02 <__kernel_rem_pio2+0x1c2>
 8005e52:	bf00      	nop
 8005e54:	f3af 8000 	nop.w
	...
 8005e64:	3ff00000 	.word	0x3ff00000
 8005e68:	08006860 	.word	0x08006860
 8005e6c:	40200000 	.word	0x40200000
 8005e70:	3ff00000 	.word	0x3ff00000
 8005e74:	3e700000 	.word	0x3e700000
 8005e78:	41700000 	.word	0x41700000
 8005e7c:	3fe00000 	.word	0x3fe00000
 8005e80:	08006820 	.word	0x08006820
 8005e84:	1e62      	subs	r2, r4, #1
 8005e86:	ab0e      	add	r3, sp, #56	; 0x38
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e90:	e7db      	b.n	8005e4a <__kernel_rem_pio2+0x30a>
 8005e92:	a90e      	add	r1, sp, #56	; 0x38
 8005e94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	e78b      	b.n	8005db6 <__kernel_rem_pio2+0x276>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d0fa      	beq.n	8005e9e <__kernel_rem_pio2+0x35e>
 8005ea8:	9a08      	ldr	r2, [sp, #32]
 8005eaa:	4422      	add	r2, r4
 8005eac:	00d2      	lsls	r2, r2, #3
 8005eae:	a922      	add	r1, sp, #136	; 0x88
 8005eb0:	18e3      	adds	r3, r4, r3
 8005eb2:	9206      	str	r2, [sp, #24]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	9302      	str	r3, [sp, #8]
 8005eb8:	f10b 0108 	add.w	r1, fp, #8
 8005ebc:	f102 0308 	add.w	r3, r2, #8
 8005ec0:	1c66      	adds	r6, r4, #1
 8005ec2:	910a      	str	r1, [sp, #40]	; 0x28
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ec8:	9b02      	ldr	r3, [sp, #8]
 8005eca:	42b3      	cmp	r3, r6
 8005ecc:	da04      	bge.n	8005ed8 <__kernel_rem_pio2+0x398>
 8005ece:	461c      	mov	r4, r3
 8005ed0:	e6a6      	b.n	8005c20 <__kernel_rem_pio2+0xe0>
 8005ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e7e3      	b.n	8005ea0 <__kernel_rem_pio2+0x360>
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	18ef      	adds	r7, r5, r3
 8005edc:	ab22      	add	r3, sp, #136	; 0x88
 8005ede:	441f      	add	r7, r3
 8005ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ee2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ee6:	f7fa facb 	bl	8000480 <__aeabi_i2d>
 8005eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eec:	461c      	mov	r4, r3
 8005eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ef0:	e9c7 0100 	strd	r0, r1, [r7]
 8005ef4:	eb03 0b05 	add.w	fp, r3, r5
 8005ef8:	2700      	movs	r7, #0
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	f04f 0900 	mov.w	r9, #0
 8005f02:	9b07      	ldr	r3, [sp, #28]
 8005f04:	429f      	cmp	r7, r3
 8005f06:	dd08      	ble.n	8005f1a <__kernel_rem_pio2+0x3da>
 8005f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f0a:	aa72      	add	r2, sp, #456	; 0x1c8
 8005f0c:	18eb      	adds	r3, r5, r3
 8005f0e:	4413      	add	r3, r2
 8005f10:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005f14:	3601      	adds	r6, #1
 8005f16:	3508      	adds	r5, #8
 8005f18:	e7d6      	b.n	8005ec8 <__kernel_rem_pio2+0x388>
 8005f1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005f1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005f22:	f7fa fb17 	bl	8000554 <__aeabi_dmul>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	f7fa f95b 	bl	80001e8 <__adddf3>
 8005f32:	3701      	adds	r7, #1
 8005f34:	4680      	mov	r8, r0
 8005f36:	4689      	mov	r9, r1
 8005f38:	e7e3      	b.n	8005f02 <__kernel_rem_pio2+0x3c2>
 8005f3a:	3d01      	subs	r5, #1
 8005f3c:	e741      	b.n	8005dc2 <__kernel_rem_pio2+0x282>
 8005f3e:	f1ca 0000 	rsb	r0, sl, #0
 8005f42:	ec47 6b10 	vmov	d0, r6, r7
 8005f46:	f000 fa83 	bl	8006450 <scalbn>
 8005f4a:	ec57 6b10 	vmov	r6, r7, d0
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4b99      	ldr	r3, [pc, #612]	; (80061b8 <__kernel_rem_pio2+0x678>)
 8005f52:	ee10 0a10 	vmov	r0, s0
 8005f56:	4639      	mov	r1, r7
 8005f58:	f7fa fd82 	bl	8000a60 <__aeabi_dcmpge>
 8005f5c:	b1f8      	cbz	r0, 8005f9e <__kernel_rem_pio2+0x45e>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4b96      	ldr	r3, [pc, #600]	; (80061bc <__kernel_rem_pio2+0x67c>)
 8005f62:	4630      	mov	r0, r6
 8005f64:	4639      	mov	r1, r7
 8005f66:	f7fa faf5 	bl	8000554 <__aeabi_dmul>
 8005f6a:	f7fa fd8d 	bl	8000a88 <__aeabi_d2iz>
 8005f6e:	4680      	mov	r8, r0
 8005f70:	f7fa fa86 	bl	8000480 <__aeabi_i2d>
 8005f74:	2200      	movs	r2, #0
 8005f76:	4b90      	ldr	r3, [pc, #576]	; (80061b8 <__kernel_rem_pio2+0x678>)
 8005f78:	f7fa faec 	bl	8000554 <__aeabi_dmul>
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4602      	mov	r2, r0
 8005f80:	4639      	mov	r1, r7
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7fa f92e 	bl	80001e4 <__aeabi_dsub>
 8005f88:	f7fa fd7e 	bl	8000a88 <__aeabi_d2iz>
 8005f8c:	1c65      	adds	r5, r4, #1
 8005f8e:	ab0e      	add	r3, sp, #56	; 0x38
 8005f90:	f10a 0a18 	add.w	sl, sl, #24
 8005f94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f98:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005f9c:	e719      	b.n	8005dd2 <__kernel_rem_pio2+0x292>
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	f7fa fd71 	bl	8000a88 <__aeabi_d2iz>
 8005fa6:	ab0e      	add	r3, sp, #56	; 0x38
 8005fa8:	4625      	mov	r5, r4
 8005faa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005fae:	e710      	b.n	8005dd2 <__kernel_rem_pio2+0x292>
 8005fb0:	ab0e      	add	r3, sp, #56	; 0x38
 8005fb2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005fb6:	f7fa fa63 	bl	8000480 <__aeabi_i2d>
 8005fba:	4642      	mov	r2, r8
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	f7fa fac9 	bl	8000554 <__aeabi_dmul>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005fc8:	4b7c      	ldr	r3, [pc, #496]	; (80061bc <__kernel_rem_pio2+0x67c>)
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4649      	mov	r1, r9
 8005fce:	f7fa fac1 	bl	8000554 <__aeabi_dmul>
 8005fd2:	3f01      	subs	r7, #1
 8005fd4:	4680      	mov	r8, r0
 8005fd6:	4689      	mov	r9, r1
 8005fd8:	e708      	b.n	8005dec <__kernel_rem_pio2+0x2ac>
 8005fda:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005fe6:	f7fa fab5 	bl	8000554 <__aeabi_dmul>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4640      	mov	r0, r8
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	f7fa f8f9 	bl	80001e8 <__adddf3>
 8005ff6:	3701      	adds	r7, #1
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	4689      	mov	r9, r1
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	429f      	cmp	r7, r3
 8006000:	dc01      	bgt.n	8006006 <__kernel_rem_pio2+0x4c6>
 8006002:	45ba      	cmp	sl, r7
 8006004:	dae9      	bge.n	8005fda <__kernel_rem_pio2+0x49a>
 8006006:	ab4a      	add	r3, sp, #296	; 0x128
 8006008:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800600c:	e9c3 8900 	strd	r8, r9, [r3]
 8006010:	f10a 0a01 	add.w	sl, sl, #1
 8006014:	3e08      	subs	r6, #8
 8006016:	e6f0      	b.n	8005dfa <__kernel_rem_pio2+0x2ba>
 8006018:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800601a:	2b03      	cmp	r3, #3
 800601c:	d85b      	bhi.n	80060d6 <__kernel_rem_pio2+0x596>
 800601e:	e8df f003 	tbb	[pc, r3]
 8006022:	264a      	.short	0x264a
 8006024:	0226      	.short	0x0226
 8006026:	ab9a      	add	r3, sp, #616	; 0x268
 8006028:	441c      	add	r4, r3
 800602a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800602e:	46a2      	mov	sl, r4
 8006030:	46ab      	mov	fp, r5
 8006032:	f1bb 0f00 	cmp.w	fp, #0
 8006036:	dc6c      	bgt.n	8006112 <__kernel_rem_pio2+0x5d2>
 8006038:	46a2      	mov	sl, r4
 800603a:	46ab      	mov	fp, r5
 800603c:	f1bb 0f01 	cmp.w	fp, #1
 8006040:	f300 8086 	bgt.w	8006150 <__kernel_rem_pio2+0x610>
 8006044:	2000      	movs	r0, #0
 8006046:	2100      	movs	r1, #0
 8006048:	2d01      	cmp	r5, #1
 800604a:	f300 80a0 	bgt.w	800618e <__kernel_rem_pio2+0x64e>
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006054:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 809e 	bne.w	800619a <__kernel_rem_pio2+0x65a>
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	e9c3 7800 	strd	r7, r8, [r3]
 8006064:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006068:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800606c:	e033      	b.n	80060d6 <__kernel_rem_pio2+0x596>
 800606e:	3408      	adds	r4, #8
 8006070:	ab4a      	add	r3, sp, #296	; 0x128
 8006072:	441c      	add	r4, r3
 8006074:	462e      	mov	r6, r5
 8006076:	2000      	movs	r0, #0
 8006078:	2100      	movs	r1, #0
 800607a:	2e00      	cmp	r6, #0
 800607c:	da3a      	bge.n	80060f4 <__kernel_rem_pio2+0x5b4>
 800607e:	9b02      	ldr	r3, [sp, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d03d      	beq.n	8006100 <__kernel_rem_pio2+0x5c0>
 8006084:	4602      	mov	r2, r0
 8006086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800608a:	9c01      	ldr	r4, [sp, #4]
 800608c:	e9c4 2300 	strd	r2, r3, [r4]
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006098:	f7fa f8a4 	bl	80001e4 <__aeabi_dsub>
 800609c:	ae4c      	add	r6, sp, #304	; 0x130
 800609e:	2401      	movs	r4, #1
 80060a0:	42a5      	cmp	r5, r4
 80060a2:	da30      	bge.n	8006106 <__kernel_rem_pio2+0x5c6>
 80060a4:	9b02      	ldr	r3, [sp, #8]
 80060a6:	b113      	cbz	r3, 80060ae <__kernel_rem_pio2+0x56e>
 80060a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060ac:	4619      	mov	r1, r3
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80060b4:	e00f      	b.n	80060d6 <__kernel_rem_pio2+0x596>
 80060b6:	ab9a      	add	r3, sp, #616	; 0x268
 80060b8:	441c      	add	r4, r3
 80060ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80060be:	2000      	movs	r0, #0
 80060c0:	2100      	movs	r1, #0
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	da10      	bge.n	80060e8 <__kernel_rem_pio2+0x5a8>
 80060c6:	9b02      	ldr	r3, [sp, #8]
 80060c8:	b113      	cbz	r3, 80060d0 <__kernel_rem_pio2+0x590>
 80060ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060ce:	4619      	mov	r1, r3
 80060d0:	9b01      	ldr	r3, [sp, #4]
 80060d2:	e9c3 0100 	strd	r0, r1, [r3]
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	f003 0007 	and.w	r0, r3, #7
 80060dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80060e0:	ecbd 8b02 	vpop	{d8}
 80060e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80060ec:	f7fa f87c 	bl	80001e8 <__adddf3>
 80060f0:	3d01      	subs	r5, #1
 80060f2:	e7e6      	b.n	80060c2 <__kernel_rem_pio2+0x582>
 80060f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80060f8:	f7fa f876 	bl	80001e8 <__adddf3>
 80060fc:	3e01      	subs	r6, #1
 80060fe:	e7bc      	b.n	800607a <__kernel_rem_pio2+0x53a>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	e7c1      	b.n	800608a <__kernel_rem_pio2+0x54a>
 8006106:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800610a:	f7fa f86d 	bl	80001e8 <__adddf3>
 800610e:	3401      	adds	r4, #1
 8006110:	e7c6      	b.n	80060a0 <__kernel_rem_pio2+0x560>
 8006112:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006116:	ed3a 7b02 	vldmdb	sl!, {d7}
 800611a:	4640      	mov	r0, r8
 800611c:	ec53 2b17 	vmov	r2, r3, d7
 8006120:	4649      	mov	r1, r9
 8006122:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006126:	f7fa f85f 	bl	80001e8 <__adddf3>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4606      	mov	r6, r0
 8006130:	460f      	mov	r7, r1
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa f855 	bl	80001e4 <__aeabi_dsub>
 800613a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800613e:	f7fa f853 	bl	80001e8 <__adddf3>
 8006142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006146:	e9ca 0100 	strd	r0, r1, [sl]
 800614a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800614e:	e770      	b.n	8006032 <__kernel_rem_pio2+0x4f2>
 8006150:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006154:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006158:	4630      	mov	r0, r6
 800615a:	ec53 2b17 	vmov	r2, r3, d7
 800615e:	4639      	mov	r1, r7
 8006160:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006164:	f7fa f840 	bl	80001e8 <__adddf3>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4680      	mov	r8, r0
 800616e:	4689      	mov	r9, r1
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa f836 	bl	80001e4 <__aeabi_dsub>
 8006178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800617c:	f7fa f834 	bl	80001e8 <__adddf3>
 8006180:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006184:	e9ca 0100 	strd	r0, r1, [sl]
 8006188:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800618c:	e756      	b.n	800603c <__kernel_rem_pio2+0x4fc>
 800618e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006192:	f7fa f829 	bl	80001e8 <__adddf3>
 8006196:	3d01      	subs	r5, #1
 8006198:	e756      	b.n	8006048 <__kernel_rem_pio2+0x508>
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	9a01      	ldr	r2, [sp, #4]
 800619e:	601f      	str	r7, [r3, #0]
 80061a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80061a4:	605c      	str	r4, [r3, #4]
 80061a6:	609d      	str	r5, [r3, #8]
 80061a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061ac:	60d3      	str	r3, [r2, #12]
 80061ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061b2:	6110      	str	r0, [r2, #16]
 80061b4:	6153      	str	r3, [r2, #20]
 80061b6:	e78e      	b.n	80060d6 <__kernel_rem_pio2+0x596>
 80061b8:	41700000 	.word	0x41700000
 80061bc:	3e700000 	.word	0x3e700000

080061c0 <__kernel_sin>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	ec55 4b10 	vmov	r4, r5, d0
 80061c8:	b085      	sub	sp, #20
 80061ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80061d2:	ed8d 1b00 	vstr	d1, [sp]
 80061d6:	9002      	str	r0, [sp, #8]
 80061d8:	da06      	bge.n	80061e8 <__kernel_sin+0x28>
 80061da:	ee10 0a10 	vmov	r0, s0
 80061de:	4629      	mov	r1, r5
 80061e0:	f7fa fc52 	bl	8000a88 <__aeabi_d2iz>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d051      	beq.n	800628c <__kernel_sin+0xcc>
 80061e8:	4622      	mov	r2, r4
 80061ea:	462b      	mov	r3, r5
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7fa f9b0 	bl	8000554 <__aeabi_dmul>
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	f7fa f9a8 	bl	8000554 <__aeabi_dmul>
 8006204:	a341      	add	r3, pc, #260	; (adr r3, 800630c <__kernel_sin+0x14c>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	4680      	mov	r8, r0
 800620c:	4689      	mov	r9, r1
 800620e:	4650      	mov	r0, sl
 8006210:	4659      	mov	r1, fp
 8006212:	f7fa f99f 	bl	8000554 <__aeabi_dmul>
 8006216:	a33f      	add	r3, pc, #252	; (adr r3, 8006314 <__kernel_sin+0x154>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f7f9 ffe2 	bl	80001e4 <__aeabi_dsub>
 8006220:	4652      	mov	r2, sl
 8006222:	465b      	mov	r3, fp
 8006224:	f7fa f996 	bl	8000554 <__aeabi_dmul>
 8006228:	a33c      	add	r3, pc, #240	; (adr r3, 800631c <__kernel_sin+0x15c>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7f9 ffdb 	bl	80001e8 <__adddf3>
 8006232:	4652      	mov	r2, sl
 8006234:	465b      	mov	r3, fp
 8006236:	f7fa f98d 	bl	8000554 <__aeabi_dmul>
 800623a:	a33a      	add	r3, pc, #232	; (adr r3, 8006324 <__kernel_sin+0x164>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7f9 ffd0 	bl	80001e4 <__aeabi_dsub>
 8006244:	4652      	mov	r2, sl
 8006246:	465b      	mov	r3, fp
 8006248:	f7fa f984 	bl	8000554 <__aeabi_dmul>
 800624c:	a337      	add	r3, pc, #220	; (adr r3, 800632c <__kernel_sin+0x16c>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f7f9 ffc9 	bl	80001e8 <__adddf3>
 8006256:	9b02      	ldr	r3, [sp, #8]
 8006258:	4606      	mov	r6, r0
 800625a:	460f      	mov	r7, r1
 800625c:	b9db      	cbnz	r3, 8006296 <__kernel_sin+0xd6>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4650      	mov	r0, sl
 8006264:	4659      	mov	r1, fp
 8006266:	f7fa f975 	bl	8000554 <__aeabi_dmul>
 800626a:	a325      	add	r3, pc, #148	; (adr r3, 8006300 <__kernel_sin+0x140>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7f9 ffb8 	bl	80001e4 <__aeabi_dsub>
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	f7fa f96c 	bl	8000554 <__aeabi_dmul>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7f9 ffb0 	bl	80001e8 <__adddf3>
 8006288:	4604      	mov	r4, r0
 800628a:	460d      	mov	r5, r1
 800628c:	ec45 4b10 	vmov	d0, r4, r5
 8006290:	b005      	add	sp, #20
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006296:	2200      	movs	r2, #0
 8006298:	4b1b      	ldr	r3, [pc, #108]	; (8006308 <__kernel_sin+0x148>)
 800629a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800629e:	f7fa f959 	bl	8000554 <__aeabi_dmul>
 80062a2:	4632      	mov	r2, r6
 80062a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062a8:	463b      	mov	r3, r7
 80062aa:	4640      	mov	r0, r8
 80062ac:	4649      	mov	r1, r9
 80062ae:	f7fa f951 	bl	8000554 <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ba:	f7f9 ff93 	bl	80001e4 <__aeabi_dsub>
 80062be:	4652      	mov	r2, sl
 80062c0:	465b      	mov	r3, fp
 80062c2:	f7fa f947 	bl	8000554 <__aeabi_dmul>
 80062c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ca:	f7f9 ff8b 	bl	80001e4 <__aeabi_dsub>
 80062ce:	a30c      	add	r3, pc, #48	; (adr r3, 8006300 <__kernel_sin+0x140>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	4640      	mov	r0, r8
 80062da:	4649      	mov	r1, r9
 80062dc:	f7fa f93a 	bl	8000554 <__aeabi_dmul>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7f9 ff7e 	bl	80001e8 <__adddf3>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7f9 ff76 	bl	80001e4 <__aeabi_dsub>
 80062f8:	e7c6      	b.n	8006288 <__kernel_sin+0xc8>
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w
 8006300:	55555549 	.word	0x55555549
 8006304:	3fc55555 	.word	0x3fc55555
 8006308:	3fe00000 	.word	0x3fe00000
 800630c:	5acfd57c 	.word	0x5acfd57c
 8006310:	3de5d93a 	.word	0x3de5d93a
 8006314:	8a2b9ceb 	.word	0x8a2b9ceb
 8006318:	3e5ae5e6 	.word	0x3e5ae5e6
 800631c:	57b1fe7d 	.word	0x57b1fe7d
 8006320:	3ec71de3 	.word	0x3ec71de3
 8006324:	19c161d5 	.word	0x19c161d5
 8006328:	3f2a01a0 	.word	0x3f2a01a0
 800632c:	1110f8a6 	.word	0x1110f8a6
 8006330:	3f811111 	.word	0x3f811111

08006334 <fabs>:
 8006334:	ec51 0b10 	vmov	r0, r1, d0
 8006338:	ee10 2a10 	vmov	r2, s0
 800633c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006340:	ec43 2b10 	vmov	d0, r2, r3
 8006344:	4770      	bx	lr
	...

08006348 <floor>:
 8006348:	ec51 0b10 	vmov	r0, r1, d0
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006354:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006358:	2e13      	cmp	r6, #19
 800635a:	460c      	mov	r4, r1
 800635c:	ee10 5a10 	vmov	r5, s0
 8006360:	4680      	mov	r8, r0
 8006362:	dc34      	bgt.n	80063ce <floor+0x86>
 8006364:	2e00      	cmp	r6, #0
 8006366:	da16      	bge.n	8006396 <floor+0x4e>
 8006368:	a335      	add	r3, pc, #212	; (adr r3, 8006440 <floor+0xf8>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7f9 ff3b 	bl	80001e8 <__adddf3>
 8006372:	2200      	movs	r2, #0
 8006374:	2300      	movs	r3, #0
 8006376:	f7fa fb7d 	bl	8000a74 <__aeabi_dcmpgt>
 800637a:	b148      	cbz	r0, 8006390 <floor+0x48>
 800637c:	2c00      	cmp	r4, #0
 800637e:	da59      	bge.n	8006434 <floor+0xec>
 8006380:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006384:	4a30      	ldr	r2, [pc, #192]	; (8006448 <floor+0x100>)
 8006386:	432b      	orrs	r3, r5
 8006388:	2500      	movs	r5, #0
 800638a:	42ab      	cmp	r3, r5
 800638c:	bf18      	it	ne
 800638e:	4614      	movne	r4, r2
 8006390:	4621      	mov	r1, r4
 8006392:	4628      	mov	r0, r5
 8006394:	e025      	b.n	80063e2 <floor+0x9a>
 8006396:	4f2d      	ldr	r7, [pc, #180]	; (800644c <floor+0x104>)
 8006398:	4137      	asrs	r7, r6
 800639a:	ea01 0307 	and.w	r3, r1, r7
 800639e:	4303      	orrs	r3, r0
 80063a0:	d01f      	beq.n	80063e2 <floor+0x9a>
 80063a2:	a327      	add	r3, pc, #156	; (adr r3, 8006440 <floor+0xf8>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7f9 ff1e 	bl	80001e8 <__adddf3>
 80063ac:	2200      	movs	r2, #0
 80063ae:	2300      	movs	r3, #0
 80063b0:	f7fa fb60 	bl	8000a74 <__aeabi_dcmpgt>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0eb      	beq.n	8006390 <floor+0x48>
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	bfbe      	ittt	lt
 80063bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80063c0:	fa43 f606 	asrlt.w	r6, r3, r6
 80063c4:	19a4      	addlt	r4, r4, r6
 80063c6:	ea24 0407 	bic.w	r4, r4, r7
 80063ca:	2500      	movs	r5, #0
 80063cc:	e7e0      	b.n	8006390 <floor+0x48>
 80063ce:	2e33      	cmp	r6, #51	; 0x33
 80063d0:	dd0b      	ble.n	80063ea <floor+0xa2>
 80063d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80063d6:	d104      	bne.n	80063e2 <floor+0x9a>
 80063d8:	ee10 2a10 	vmov	r2, s0
 80063dc:	460b      	mov	r3, r1
 80063de:	f7f9 ff03 	bl	80001e8 <__adddf3>
 80063e2:	ec41 0b10 	vmov	d0, r0, r1
 80063e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295
 80063f2:	fa23 f707 	lsr.w	r7, r3, r7
 80063f6:	4207      	tst	r7, r0
 80063f8:	d0f3      	beq.n	80063e2 <floor+0x9a>
 80063fa:	a311      	add	r3, pc, #68	; (adr r3, 8006440 <floor+0xf8>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7f9 fef2 	bl	80001e8 <__adddf3>
 8006404:	2200      	movs	r2, #0
 8006406:	2300      	movs	r3, #0
 8006408:	f7fa fb34 	bl	8000a74 <__aeabi_dcmpgt>
 800640c:	2800      	cmp	r0, #0
 800640e:	d0bf      	beq.n	8006390 <floor+0x48>
 8006410:	2c00      	cmp	r4, #0
 8006412:	da02      	bge.n	800641a <floor+0xd2>
 8006414:	2e14      	cmp	r6, #20
 8006416:	d103      	bne.n	8006420 <floor+0xd8>
 8006418:	3401      	adds	r4, #1
 800641a:	ea25 0507 	bic.w	r5, r5, r7
 800641e:	e7b7      	b.n	8006390 <floor+0x48>
 8006420:	2301      	movs	r3, #1
 8006422:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006426:	fa03 f606 	lsl.w	r6, r3, r6
 800642a:	4435      	add	r5, r6
 800642c:	4545      	cmp	r5, r8
 800642e:	bf38      	it	cc
 8006430:	18e4      	addcc	r4, r4, r3
 8006432:	e7f2      	b.n	800641a <floor+0xd2>
 8006434:	2500      	movs	r5, #0
 8006436:	462c      	mov	r4, r5
 8006438:	e7aa      	b.n	8006390 <floor+0x48>
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w
 8006440:	8800759c 	.word	0x8800759c
 8006444:	7e37e43c 	.word	0x7e37e43c
 8006448:	bff00000 	.word	0xbff00000
 800644c:	000fffff 	.word	0x000fffff

08006450 <scalbn>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	ec55 4b10 	vmov	r4, r5, d0
 8006456:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800645a:	4606      	mov	r6, r0
 800645c:	462b      	mov	r3, r5
 800645e:	b9aa      	cbnz	r2, 800648c <scalbn+0x3c>
 8006460:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006464:	4323      	orrs	r3, r4
 8006466:	d03b      	beq.n	80064e0 <scalbn+0x90>
 8006468:	4b31      	ldr	r3, [pc, #196]	; (8006530 <scalbn+0xe0>)
 800646a:	4629      	mov	r1, r5
 800646c:	2200      	movs	r2, #0
 800646e:	ee10 0a10 	vmov	r0, s0
 8006472:	f7fa f86f 	bl	8000554 <__aeabi_dmul>
 8006476:	4b2f      	ldr	r3, [pc, #188]	; (8006534 <scalbn+0xe4>)
 8006478:	429e      	cmp	r6, r3
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	da12      	bge.n	80064a6 <scalbn+0x56>
 8006480:	a327      	add	r3, pc, #156	; (adr r3, 8006520 <scalbn+0xd0>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7fa f865 	bl	8000554 <__aeabi_dmul>
 800648a:	e009      	b.n	80064a0 <scalbn+0x50>
 800648c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006490:	428a      	cmp	r2, r1
 8006492:	d10c      	bne.n	80064ae <scalbn+0x5e>
 8006494:	ee10 2a10 	vmov	r2, s0
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f7f9 fea4 	bl	80001e8 <__adddf3>
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	e01c      	b.n	80064e0 <scalbn+0x90>
 80064a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80064aa:	460b      	mov	r3, r1
 80064ac:	3a36      	subs	r2, #54	; 0x36
 80064ae:	4432      	add	r2, r6
 80064b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064b4:	428a      	cmp	r2, r1
 80064b6:	dd0b      	ble.n	80064d0 <scalbn+0x80>
 80064b8:	ec45 4b11 	vmov	d1, r4, r5
 80064bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006528 <scalbn+0xd8>
 80064c0:	f000 f83c 	bl	800653c <copysign>
 80064c4:	a318      	add	r3, pc, #96	; (adr r3, 8006528 <scalbn+0xd8>)
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	ec51 0b10 	vmov	r0, r1, d0
 80064ce:	e7da      	b.n	8006486 <scalbn+0x36>
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	dd08      	ble.n	80064e6 <scalbn+0x96>
 80064d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064e0:	ec45 4b10 	vmov	d0, r4, r5
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80064ea:	da0d      	bge.n	8006508 <scalbn+0xb8>
 80064ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80064f0:	429e      	cmp	r6, r3
 80064f2:	ec45 4b11 	vmov	d1, r4, r5
 80064f6:	dce1      	bgt.n	80064bc <scalbn+0x6c>
 80064f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006520 <scalbn+0xd0>
 80064fc:	f000 f81e 	bl	800653c <copysign>
 8006500:	a307      	add	r3, pc, #28	; (adr r3, 8006520 <scalbn+0xd0>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	e7e0      	b.n	80064ca <scalbn+0x7a>
 8006508:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800650c:	3236      	adds	r2, #54	; 0x36
 800650e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006512:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006516:	4620      	mov	r0, r4
 8006518:	4629      	mov	r1, r5
 800651a:	2200      	movs	r2, #0
 800651c:	4b06      	ldr	r3, [pc, #24]	; (8006538 <scalbn+0xe8>)
 800651e:	e7b2      	b.n	8006486 <scalbn+0x36>
 8006520:	c2f8f359 	.word	0xc2f8f359
 8006524:	01a56e1f 	.word	0x01a56e1f
 8006528:	8800759c 	.word	0x8800759c
 800652c:	7e37e43c 	.word	0x7e37e43c
 8006530:	43500000 	.word	0x43500000
 8006534:	ffff3cb0 	.word	0xffff3cb0
 8006538:	3c900000 	.word	0x3c900000

0800653c <copysign>:
 800653c:	ec51 0b10 	vmov	r0, r1, d0
 8006540:	ee11 0a90 	vmov	r0, s3
 8006544:	ee10 2a10 	vmov	r2, s0
 8006548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800654c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006550:	ea41 0300 	orr.w	r3, r1, r0
 8006554:	ec43 2b10 	vmov	d0, r2, r3
 8006558:	4770      	bx	lr
	...

0800655c <_init>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr

08006568 <_fini>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr
